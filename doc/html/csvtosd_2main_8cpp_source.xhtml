<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.4"/>
<title>Simple Analyzer: csvtosd/main.cpp Quellcode</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="doc_icon.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Simple Analyzer
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Erzeugt von Doxygen 1.8.4 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Suchen');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Hauptseite</span></a></li>
      <li><a href="pages.xhtml"><span>Zusätzliche&#160;Informationen</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namensbereiche</span></a></li>
      <li><a href="annotated.xhtml"><span>Klassen</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Dateien</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Suchen" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>Auflistung&#160;der&#160;Dateien</span></a></li>
      <li><a href="globals.xhtml"><span>Datei-Elemente</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>Alle</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Klassen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namensbereiche</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Dateien</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Funktionen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variablen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Aufzählungen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Freundbeziehungen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Seiten</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_0f0be48dfb7e32b7ed5e441dfdae0f38.xhtml">csvtosd</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">main.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * main.cpp</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *  Created on: 17.10.2013</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *      Author: valentin</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * Enthält die Programmeinstellungen</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="code" href="structOptions.xhtml">   19</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structOptions.xhtml">Options</a> {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordtype">size_t</span> startcol;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordtype">char</span> separator;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keywordtype">bool</span> replace_comma_with_point;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordtype">size_t</span> timecol;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordtype">size_t</span> namecol;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordtype">int</span> time_step_delta;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordtype">long</span> max_time;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordtype">long</span> min_time;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;} opts;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keywordtype">bool</span> contains( std::vector&lt;string&gt;&amp; Vec, <span class="keyword">const</span> <span class="keywordtype">string</span>&amp; Element )</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">if</span> (find(Vec.begin(), Vec.end(), Element) != Vec.end())</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;}</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keywordtype">bool</span> contains( std::vector&lt;int&gt;&amp; Vec, <span class="keyword">const</span> <span class="keywordtype">int</span>&amp; Element )</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (find(Vec.begin(), Vec.end(), Element) != Vec.end())</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">string</span> getTextBlock(<span class="keywordtype">string</span> data,<span class="keywordtype">int</span> n) { <span class="comment">//Gibt den n-ten durch Leerzeichen abgetrennten Block zurück</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordtype">int</span> pos = 0;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">int</span> prevPos = 0;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordtype">size_t</span> curPos = 0;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    curPos = data.find(<span class="stringliteral">&quot; &quot;</span>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> (curPos==data.npos) {</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    }</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    pos = curPos;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0;i&lt;n;i++) {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        curPos = data.find(<span class="stringliteral">&quot; &quot;</span>,pos+1);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> (curPos==data.npos) {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">if</span> (n-i&gt;1) {    <span class="comment">//Mehr Blöcke als vorhanden nachgefragt</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                prevPos = pos+1;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                pos = data.size();</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        prevPos = pos+1;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        pos = curPos;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> data.substr(prevPos,pos-(prevPos));</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keywordtype">int</span> parseLine(<span class="keywordtype">string</span> line,vector&lt;string&gt; &amp;out,vector&lt;string&gt;* timestamps,vector&lt;string&gt;* names,vector&lt;int&gt;* valid_cols) {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">string</span> workstr = line.substr(0,line.length());</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    out.clear();</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">size_t</span> sep_pos = workstr.find(opts.separator);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">size_t</span> count = 0;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">while</span> (sep_pos!=workstr.npos) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        sep_pos = workstr.find(opts.separator);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordtype">string</span> substr = workstr.substr(0,sep_pos);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        workstr.erase(0,sep_pos+1);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (substr==<span class="stringliteral">&quot;&quot;</span>) <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (count&gt;=opts.startcol) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">if</span> (valid_cols==NULL || contains(*valid_cols,count-opts.startcol)) {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                out.resize(out.size()+1,substr);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> (count==opts.timecol &amp;&amp; timestamps!=NULL) {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            timestamps-&gt;resize(timestamps-&gt;size()+1,substr);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span> (count==opts.namecol &amp;&amp; names!=NULL) {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            names-&gt;resize(names-&gt;size()+1,substr);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        count++;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keywordtype">void</span> replaceAll(<span class="keywordtype">string</span> &amp;str, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;from, <span class="keyword">const</span> <span class="keywordtype">string</span> &amp;to) {</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordtype">size_t</span> start_pos = 0;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">while</span>((start_pos = str.find(from, start_pos)) != string::npos) {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        str.replace(start_pos, from.length(), to);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        start_pos += to.length();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> *argv[]) {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    opts.startcol = 4;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    opts.separator = <span class="charliteral">&#39;;&#39;</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    opts.replace_comma_with_point = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    opts.timecol = 2;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    opts.namecol = 1;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    opts.max_time = -1;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    opts.min_time = -1;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    opts.time_step_delta = 1;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">bool</span> names_read = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordtype">string</span> sdef_file = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordtype">string</span> input_file = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">string</span> output_file = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordtype">int</span> i=0;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">while</span> (i&lt;argc-1) {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        i++;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordtype">string</span> arg = string(argv[i]);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">if</span> (arg==<span class="stringliteral">&quot;-in&quot;</span> || arg==<span class="stringliteral">&quot;-i&quot;</span>) {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            input_file = string(argv[i+1]);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            i++;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">if</span> (arg==<span class="stringliteral">&quot;-out&quot;</span> || arg==<span class="stringliteral">&quot;-o&quot;</span>) {</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            output_file = string(argv[i+1]);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            i++;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">if</span> (arg==<span class="stringliteral">&quot;-sensor-def&quot;</span> || arg==<span class="stringliteral">&quot;-s&quot;</span>) {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            sdef_file = string(argv[i+1]);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            i++;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">if</span> (arg==<span class="stringliteral">&quot;-step-time&quot;</span>) {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            opts.time_step_delta = atoi(argv[i+1]);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span> (opts.time_step_delta&lt;1) {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                cerr &lt;&lt; <span class="stringliteral">&quot;-step-time must be &gt;0!&quot;</span> &lt;&lt; endl;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            i++;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">if</span> (arg==<span class="stringliteral">&quot;-max-time&quot;</span>) {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            opts.max_time = atof(argv[i+1]);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">if</span> (opts.max_time&lt;0) {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                opts.max_time = -1;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            i++;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">if</span> (arg==<span class="stringliteral">&quot;-min-time&quot;</span>) {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            opts.min_time = atof(argv[i+1]);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">if</span> (opts.min_time&lt;0) {</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                opts.min_time = -1;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            i++;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">if</span> (arg==<span class="stringliteral">&quot;-h&quot;</span>) {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            cout &lt;&lt; <span class="stringliteral">&quot;csvtosd converts character-separated values (csv) into timed sensor data (tsd) for SimpleAnalyzer.\n&quot;</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;usage: mergetsd ARGUMENT1 VALUE1 ARGUMENT2 VALUE2...\n&quot;</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;program arguments: \n&quot;</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;\t-i\t-in\t\tpath to csv input file\n\n&quot;</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;\t-o\t-out\t\tpath to tsd output file\n\n&quot;</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;\t-s\t-sensor-def\tpath to sensor definition file\n\n&quot;</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;\t\t-step-time\tstepwidth in time (take every n-th data set) (optional, default 1)\n\n&quot;</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;\t\t-min-time\tread only from this time on (optional, default -1 (means no restriction))\n\n&quot;</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;\t\t-max-time\tread only until this time (optional, default -1 (means no restriction))\n\n&quot;</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;\t-h\t-help\t\tprint this help\n\n&quot;</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;configuration details can be set in configuration file: csvtosd.conf\n&quot;</span>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;invalid argument: &quot;</span> &lt;&lt; argv[i] &lt;&lt; endl;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span> (opts.min_time&gt;opts.max_time and opts.max_time!=-1) {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        cerr &lt;&lt; <span class="stringliteral">&quot;-min-time can&#39;t be greater than -max-time!&quot;</span> &lt;&lt; endl;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    ifstream cfgfile;           <span class="comment">//Sensor definitions</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">    #define NUMBEROFPATHS 3</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">string</span> configpaths[NUMBEROFPATHS] {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        string(<span class="keywordtype">string</span>(argv[0])+<span class="stringliteral">&quot;.conf&quot;</span>),</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="stringliteral">&quot;/usr/local/share/simpleanalyzer/csvtosd.conf&quot;</span>,</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="stringliteral">&quot;/usr/share/simpleanalyzer/csvtosd.conf&quot;</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    };</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0;i&lt;NUMBEROFPATHS;i++) {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        cfgfile.open(configpaths[i].c_str());</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">if</span> (cfgfile.is_open()) <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">if</span> (!cfgfile.is_open()) {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;configuration file csvtosd.cfg not found!&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    }</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">string</span> line;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    getline(cfgfile,line);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    opts.startcol = atoi(getTextBlock(line,0).c_str());</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    getline(cfgfile,line);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    opts.separator = getTextBlock(line,0).c_str()[0];</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    getline(cfgfile,line);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    opts.replace_comma_with_point = atoi(getTextBlock(line,0).c_str());</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    getline(cfgfile,line);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    opts.timecol = atoi(getTextBlock(line,0).c_str());</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    getline(cfgfile,line);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    opts.namecol = atoi(getTextBlock(line,0).c_str());</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    cfgfile.close();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    ifstream deffile;           <span class="comment">//Sensor definitions</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    deffile.open(sdef_file.c_str());</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">if</span> (!deffile.is_open()) {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        cerr &lt;&lt; <span class="stringliteral">&quot;sensor definition file \&quot;&quot;</span>&lt;&lt;sdef_file&lt;&lt; <span class="stringliteral">&quot;\&quot; not found!&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    vector&lt;string&gt; sensor_names;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    vector&lt;string&gt; sensor_data;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">while</span> (deffile.good()) {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        getline(deffile,line);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span> (line==<span class="stringliteral">&quot;&quot;</span>) <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordtype">bool</span> instr = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">if</span> (line.at(0)==<span class="charliteral">&#39;#&#39;</span>) <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0;i&lt;line.length();i++) {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            <span class="keywordtype">char</span> c = line.at(i);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">if</span> (c==<span class="charliteral">&#39;&quot;&#39;</span>) instr=!instr;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">if</span> (c==<span class="charliteral">&#39; &#39;</span> &amp;&amp; !instr) {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordtype">string</span> name = line.substr(0,i);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                replaceAll(name,<span class="stringliteral">&quot;\&quot;&quot;</span>,<span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="keywordtype">string</span> data = line.substr(i+1,line.length()-i);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                replaceAll(data,<span class="stringliteral">&quot;\&quot;&quot;</span>,<span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                sensor_names.resize(sensor_names.size()+1,name);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                sensor_data.resize(sensor_data.size()+1,data);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            }</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    deffile.close();</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    ifstream file;                  <span class="comment">// data file</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    file.open(input_file.c_str());</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">if</span> (!file.is_open()) {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        cerr &lt;&lt; <span class="stringliteral">&quot;input file \&quot;&quot;</span>&lt;&lt;input_file&lt;&lt; <span class="stringliteral">&quot;\&quot; not found!&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    vector&lt;int&gt; valid_cols;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    vector&lt;vector&lt;string&gt; &gt; values(0);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    vector&lt;string&gt; timestamps;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    vector&lt;string&gt; names;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordtype">int</span> data_row_count = 0;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">while</span> (file.good()) {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        getline(file,line);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">if</span> (line==(<span class="stringliteral">&quot;&quot;</span>)) <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">if</span> (!names_read) {</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            vector&lt;string&gt; col_names;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            parseLine(line,col_names,NULL,NULL,NULL);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0;i&lt;col_names.size();i++) {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                <span class="keywordflow">if</span> (contains(sensor_names,col_names.at(i))) {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    valid_cols.resize(valid_cols.size()+1,i);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    cerr &lt;&lt; <span class="stringliteral">&quot;HINT: sensor \&quot;&quot;</span>&lt;&lt;col_names.at(i) &lt;&lt; <span class="stringliteral">&quot;\&quot; from csv not found in sensor definition file!&quot;</span> &lt;&lt; endl;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            names_read = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            data_row_count++;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">if</span> (!(data_row_count%opts.time_step_delta==0)) <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keywordflow">if</span> (opts.replace_comma_with_point) {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                replaceAll(line,<span class="stringliteral">&quot;,&quot;</span>, <span class="stringliteral">&quot;.&quot;</span>);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            }</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            values.resize(values.size()+1);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            parseLine(line,values.at(values.size()-1),&amp;timestamps,&amp;names,&amp;valid_cols);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordflow">if</span> (timestamps.size()&gt;0 &amp;&amp; atoi(timestamps.at(timestamps.size()-1).c_str())&lt;opts.min_time &amp;&amp; opts.min_time!=-1) {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                values.resize(timestamps.size()-1);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                names.resize(timestamps.size()-1);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                timestamps.resize(timestamps.size()-1);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">if</span> (timestamps.size()&gt;0 &amp;&amp; atoi(timestamps.at(timestamps.size()-1).c_str())&gt;opts.max_time &amp;&amp; opts.max_time!=-1) {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                values.resize(timestamps.size()-1);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                names.resize(timestamps.size()-1);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                timestamps.resize(timestamps.size()-1);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    file.close();</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    ofstream outfile;                   <span class="comment">// output</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    outfile.open(output_file.c_str());</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">if</span> (!outfile.is_open()) {</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        cerr &lt;&lt; <span class="stringliteral">&quot;output file \&quot;&quot;</span>&lt;&lt;output_file&lt;&lt; <span class="stringliteral">&quot;\&quot; is invalid!&quot;</span>&lt;&lt;endl;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    outfile &lt;&lt; <span class="stringliteral">&quot;#sensors:\n&quot;</span>;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0;i&lt;sensor_names.size();i++) {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        outfile &lt;&lt; <span class="stringliteral">&quot;#&quot;</span> &lt;&lt; sensor_names.at(i) &lt;&lt;<span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=0;j&lt;values.size();j++) {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        outfile &lt;&lt; <span class="stringliteral">&quot;t &quot;</span> &lt;&lt; timestamps.at(j) &lt;&lt; endl;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        outfile &lt;&lt; <span class="stringliteral">&quot;n &quot;</span> &lt;&lt; names.at(j) &lt;&lt; endl;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0;i&lt;sensor_names.size();i++) {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            outfile &lt;&lt; <span class="stringliteral">&quot;s &quot;</span>&lt;&lt; sensor_data.at(i) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; values.at(j).at(i) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        }</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    outfile.close();</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    cout &lt;&lt; <span class="stringliteral">&quot;files successfully created.&quot;</span> &lt;&lt; endl;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;};</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Erzeugt am Son Feb 9 2014 01:43:18 für Simple Analyzer von &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.4
</small></address>
</body>
</html>
