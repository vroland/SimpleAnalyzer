<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.4"/>
<title>Simple Analyzer: simpleanalyzer-gui/src/libraries/tetgen/tetgen.h Quellcode</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="doc_icon.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">Simple Analyzer
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Erzeugt von Doxygen 1.8.4 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Suchen');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Hauptseite</span></a></li>
      <li><a href="pages.xhtml"><span>Zusätzliche&#160;Informationen</span></a></li>
      <li><a href="annotated.xhtml"><span>Klassen</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Dateien</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Suchen" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>Auflistung&#160;der&#160;Dateien</span></a></li>
      <li><a href="globals.xhtml"><span>Datei-Elemente</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>Alle</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Klassen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Dateien</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Funktionen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variablen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Aufzählungen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Freundbeziehungen</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Seiten</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_c77ee61374efdb50c23b8fd1bc609a29.xhtml">simpleanalyzer-gui</a></li><li class="navelem"><a class="el" href="dir_fc69cc80a9959f5f4d9fc5f3e2f537ca.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_3ae5ff8f903e04726d22262ee65ea878.xhtml">libraries</a></li><li class="navelem"><a class="el" href="dir_1dbbdb760a0f2f84a518df485e10351f.xhtml">tetgen</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">tetgen.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// TetGen                                                                    //</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// A Quality Tetrahedral Mesh Generator and 3D Delaunay Triangulator         //</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// Version 1.4                                                               //</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">// September 6, December 13, 2010                                            //</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// January 19, 2011                                                          //</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// Copyright (C) 2002--2011                                                  //</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// Hang Si                                                                   //</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// Research Group: Numerical Mathematics and Scientific Computing            //</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">// Weierstrass Institute for Applied Analysis and Stochastics (WIAS)         //</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">// Mohrenstr. 39, 10117 Berlin, Germany                                      //</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">// si@wias-berlin.de                                                         //</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">// TetGen is freely available through the website: http://tetgen.berlios.de. //</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//   It may be copied, modified, and redistributed for non-commercial use.   //</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">//   Please consult the file LICENSE for the detailed copyright notices.     //</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// TetGen is a library to generate tetrahedral meshes for 3D domains.  It&#39;s  //</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">//   main purpose is to generate suitable tetrahedral meshes for numerical   //</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">//   simulations using finite element and finite volume methods.             //</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">// TetGen incorporates a suit of geometrical and mesh generation algorithms. //</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">//   A brief description of algorithms used in TetGen is found in the first  //</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">//   section of the user&#39;s manual.  References are given for users who are   //</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">//   interesting in these approaches. The main references are given below:   //</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">//   The efficient Delaunay tetrahedralization algorithm is: H. Edelsbrunner //</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">//   and N. R. Shah, &quot;Incremental Topological Flipping Works for Regular     //</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">//   Triangulations&quot;. Algorithmica 15: 223--241, 1996.                       //</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">//   The constrained Delaunay tetrahedralization algorithm is described in:  //</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">//   H. Si and K. Gaertner,  &quot;Meshing Piecewise Linear Complexes by Constr-  //</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">//   ained Delaunay Tetrahedralizations&quot;.  In Proceeding of the 14th Inter-  //</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">//   national Meshing Roundtable. September 2005.                            //</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">//   The mesh refinement algorithm is from:  Hang Si, &quot;Adaptive Tetrahedral  //</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">//   Mesh Generation by Constrained Delaunay Refinement&quot;.  International     //</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">//   Journal for Numerical Methods in Engineering, 75(7): 856--880, 2008.    //</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">// The mesh data structure of TetGen is a combination of two types of mesh   //</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">//   data structures.  The tetrahedron-based mesh data structure introduced  //</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">//   by Shewchuk is eligible for tetrahedralization algorithms. The triangle //</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">//   -edge data structure developed by Muecke is adopted for representing    //</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">//   boundary elements: subfaces and subsegments.                            //</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">//   J. R. Shewchuk, &quot;Delaunay Refinement Mesh Generation&quot;. PhD thesis,      //</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">//   Carnegie Mellon University, Pittsburgh, PA, 1997.                       //</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">//   E. P. Muecke, &quot;Shapes and Implementations in Three-Dimensional          //</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">//   Geometry&quot;. PhD thesis, Univ. of Illinois, Urbana, Illinois, 1993.       //</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">// The research of mesh generation is definitly on the move. Many State-of-  //</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">//   the-art algorithms need implementing and evaluating. I heartily welcome //</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">//   any new algorithm especially for generating quality conforming Delaunay //</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">//   meshes and anisotropic conforming Delaunay meshes.                      //</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">// TetGen is supported by the &quot;pdelib&quot; project of Weierstrass Institute for  //</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">//   Applied Analysis and Stochastics (WIAS) in Berlin.  It is a collection  //</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">//   of software components for solving non-linear partial differential      //</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">//   equations including 2D and 3D mesh generators, sparse matrix solvers,   //</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">//   and scientific visualization tools, etc.  For more information please   //</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">//   visit: http://www.wias-berlin.de/software/pdelib.                       //</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">// tetgen.h                                                                  //</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">// Header file of the TetGen library. Also is the user-level header file.    //</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#ifndef tetgenH</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define tetgenH</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#include &lt;math.h&gt;</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#include &lt;time.h&gt;</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;</span> </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">// The types &#39;intptr_t&#39; and &#39;uintptr_t&#39; are signed and unsigned integer types,</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">//   respectively. They are guaranteed to be the same width as a pointer.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">//   They are defined in &lt;stdint.h&gt; by the C99 Standard.</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">//   However, Microsoft Visual C++ doesn&#39;t ship with this header file yet. We</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">//   need to define them. (Thanks to Steven G. Johnson from MIT for the </span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">//   following piece of code.) </span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">// Define the _MSC_VER symbol if you are using Microsoft Visual C++.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">// #define _MSC_VER</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">// Define the _WIN64 symbol if you are running TetGen on Win64.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">// #define _WIN64</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#ifdef _MSC_VER // Microsoft Visual C++</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#  ifdef _WIN64</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor"></span>     <span class="keyword">typedef</span> __int64 intptr_t;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;     <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> __int64 uintptr_t;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#  else // not _WIN64</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor"></span>     <span class="keyword">typedef</span> <span class="keywordtype">int</span> intptr_t;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;     <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> uintptr_t;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#  endif</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else // not Visual C++</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#  include &lt;stdint.h&gt;</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">// To compile TetGen as a library instead of an executable program, define</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">//   the TETLIBRARY symbol.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">// #define TETLIBRARY</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">// Uncomment the following line to disable assert macros. These macros are</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">//   inserted in places where I hope to catch bugs.</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">// #define NDEBUG</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">// To insert lots of self-checks for internal errors, define the SELF_CHECK</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">//   symbol.  This will slow down the program a bit. </span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">// #define SELF_CHECK</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">// For single precision ( which will save some memory and reduce paging ),</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">//   define the symbol SINGLE by using the -DSINGLE compiler switch or by</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">//   writing &quot;#define SINGLE&quot; below.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">// For double precision ( which will allow you to refine meshes to a smaller</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">//   edge length), leave SINGLE undefined.</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">// #define SINGLE</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">#ifdef SINGLE</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define REAL float</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor"></span><span class="preprocessor">  #define REAL double</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif  // not defined SINGLE</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">// TetGen Library Overview                                                   //</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">// TetGen library is comprised by several data types and global functions.   //</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">// There are three main data types: tetgenio, tetgenbehavior, and tetgenmesh.//</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">// Tetgenio is used to pass data into and out of TetGen library; tetgenbeha- //</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">// vior keeps the runtime options and thus controls the behaviors of TetGen; //</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">// tetgenmesh, the biggest data type I&#39;ve ever defined, contains mesh data   //</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">// structures and mesh traversing and transformation operators.  The meshing //</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">// algorithms are implemented on top of it.  These data types are defined as //</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">// C++ classes.                                                              //</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">// There are few global functions. tetrahedralize() is provided for calling  //</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">// TetGen from another program. Two functions: orient3d() and insphere() are //</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">// incorporated from a public C code provided by Shewchuk.  They performing  //</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">// exact geometrical tests.                                                  //</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">// Class tetgenio                                                            //</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">// The interface for passing data into and out of the library of TetGen.     //</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">// The tetgenio data structure is actually a collection of arrays of points, //</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">// facets, tetrahedra, and so forth.  The library will read and write these  //</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">// arrays according to the options specified in tetgenbehavior structure.    //</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">// If you want to program with the library of TetGen, it&#39;s necessary for you //</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">// to understand this data type,while the other two structures can be hidden //</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">// through calling the global function &quot;tetrahedralize()&quot;. Each array corre- //</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">// sponds to a list of data in the file formats of TetGen.  It is necessary  //</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">// to understand TetGen&#39;s input/output file formats (see user&#39;s manual).     //</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">// Once an object of tetgenio is declared,  no array is created. One has to  //</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">// allocate enough memory for them, e.g., use the &quot;new&quot; operator in C++. On  //</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">// deletion of the object, the memory occupied by these arrays needs to be   //</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">// freed.  Routine deinitialize() will be automatically called. It will de-  //</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">// allocate the memory for an array if it is not a NULL. However, it assumes //</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">// that the memory is allocated by the C++ &quot;new&quot; operator. If you use malloc //</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">// (), you should free() them and set the pointers to NULLs before reaching  //</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">// deinitialize().                                                           //</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">// tetgenio ontains routines for reading and writing TetGen&#39;s files, i.e.,   //</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">// .node, .poly, .smesh, .ele, .face, and .edge files.  Both the library of  //</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">// TetGen and TetView use these routines to process input files.             //</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="code" href="classtetgenio.xhtml">  201</a></span>&#160;<span class="keyword">class </span><a class="code" href="classtetgenio.xhtml">tetgenio</a> {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="comment">// Maximum number of characters in a file name (including the null).</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keyword">enum</span> {FILENAMESIZE = 1024};</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="comment">// Maxi. numbers of chars in a line read from a file (incl. the null).</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="keyword">enum</span> {INPUTLINESIZE = 1024};</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="comment">// The polygon data structure.  A &quot;polygon&quot; describes a simple polygon</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="comment">//   (no holes). It is not necessarily convex.  Each polygon contains a</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  <span class="comment">//   number of corners (points) and the same number of sides (edges).</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="comment">// Note that the points of the polygon must be given in either counter-</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="comment">//   clockwise or clockwise order and they form a ring, so every two</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="comment">//   consective points forms an edge of the polygon.</span></div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="code" href="structtetgenio_1_1polygon.xhtml">  217</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordtype">int</span> *vertexlist;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">int</span> numberofvertices;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  } <a class="code" href="structtetgenio_1_1polygon.xhtml">polygon</a>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> init(<a class="code" href="structtetgenio_1_1polygon.xhtml">polygon</a>* p) {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    p-&gt;vertexlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    p-&gt;numberofvertices = 0;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  <span class="comment">// The facet data structure.  A &quot;facet&quot; describes a facet. Each facet is </span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="comment">//   a polygonal region possibly with holes, edges, and points in it.</span></div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="code" href="structtetgenio_1_1facet.xhtml">  229</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <a class="code" href="structtetgenio_1_1polygon.xhtml">polygon</a> *polygonlist;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">int</span> numberofpolygons;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    REAL *holelist;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordtype">int</span> numberofholes;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  } <a class="code" href="structtetgenio_1_1facet.xhtml">facet</a>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> init(<a class="code" href="structtetgenio_1_1facet.xhtml">facet</a>* f) {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    f-&gt;polygonlist = (<a class="code" href="structtetgenio_1_1polygon.xhtml">polygon</a> *) NULL;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    f-&gt;numberofpolygons = 0;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    f-&gt;holelist = (REAL *) NULL;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    f-&gt;numberofholes = 0;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="comment">// A &#39;voroedge&#39; is an edge of the Voronoi diagram. It corresponds to a</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="comment">//   Delaunay face.  Each voroedge is either a line segment connecting</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="comment">//   two Voronoi vertices or a ray starting from a Voronoi vertex to an</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="comment">//   &quot;infinite vertex&quot;.  &#39;v1&#39; and &#39;v2&#39; are two indices pointing to the</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="comment">//   list of Voronoi vertices. &#39;v1&#39; must be non-negative, while &#39;v2&#39; may</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="comment">//   be -1 if it is a ray, in this case, the unit normal of this ray is</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="comment">//   given in &#39;vnormal&#39;. </span></div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="code" href="structtetgenio_1_1voroedge.xhtml">  250</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordtype">int</span> v1, v2;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    REAL vnormal[3];</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  } <a class="code" href="structtetgenio_1_1voroedge.xhtml">voroedge</a>;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="comment">// A &#39;vorofacet&#39; is an facet of the Voronoi diagram. It corresponds to a</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="comment">//   Delaunay edge.  Each Voronoi facet is a convex polygon formed by a</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="comment">//   list of Voronoi edges, it may not be closed.  &#39;c1&#39; and &#39;c2&#39; are two</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="comment">//   indices pointing into the list of Voronoi cells, i.e., the two cells</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="comment">//   share this facet.  &#39;elist&#39; is an array of indices pointing into the</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="comment">//   list of Voronoi edges, &#39;elist[0]&#39; saves the number of Voronoi edges</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="comment">//   (including rays) of this facet.</span></div>
<div class="line"><a name="l00262"></a><span class="lineno"><a class="code" href="structtetgenio_1_1vorofacet.xhtml">  262</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordtype">int</span> c1, c2;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordtype">int</span> *elist;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  } <a class="code" href="structtetgenio_1_1vorofacet.xhtml">vorofacet</a>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="comment">// The periodic boundary condition group data structure.  A &quot;pbcgroup&quot;</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="comment">//   contains the definition of a pbc and the list of pbc point pairs.</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="comment">//   &#39;fmark1&#39; and &#39;fmark2&#39; are the facetmarkers of the two pbc facets f1</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="comment">//   and f2, respectively. &#39;transmat&#39; is the transformation matrix which</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="comment">//   maps a point in f1 into f2.  An array of pbc point pairs are saved</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="comment">//   in &#39;pointpairlist&#39;. The first point pair is at indices [0] and [1],</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="comment">//   followed by remaining pairs. Two integers per pair.</span></div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="code" href="structtetgenio_1_1pbcgroup.xhtml">  274</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordtype">int</span> fmark1, fmark2;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    REAL transmat[4][4];</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordtype">int</span> numberofpointpairs;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordtype">int</span> *pointpairlist;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  } <a class="code" href="structtetgenio_1_1pbcgroup.xhtml">pbcgroup</a>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="comment">// A callback function for mesh refinement.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keyword">typedef</span> bool (* TetSizeFunc)(REAL*, REAL*, REAL*, REAL*, REAL*, REAL);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="comment">// Items are numbered starting from &#39;firstnumber&#39; (0 or 1), default is 0.</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keywordtype">int</span> firstnumber; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="comment">// Dimension of the mesh (2 or 3), default is 3.</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keywordtype">int</span> mesh_dim;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="comment">// Does the lines in .node file contain index or not, default is TRUE.</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordtype">bool</span> useindex;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="comment">// &#39;pointlist&#39;:  An array of point coordinates.  The first point&#39;s x</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="comment">//   coordinate is at index [0] and its y coordinate at index [1], its</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="comment">//   z coordinate is at index [2], followed by the coordinates of the</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="comment">//   remaining points.  Each point occupies three REALs. </span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="comment">// &#39;pointattributelist&#39;:  An array of point attributes.  Each point&#39;s</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="comment">//   attributes occupy &#39;numberofpointattributes&#39; REALs.</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  <span class="comment">// &#39;pointmtrlist&#39;: An array of metric tensors at points. Each point&#39;s</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="comment">//   tensor occupies &#39;numberofpointmtr&#39; REALs.</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="comment">// `pointmarkerlist&#39;:  An array of point markers; one int per point.</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  REAL *pointlist;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  REAL *pointattributelist;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  REAL *pointmtrlist;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="keywordtype">int</span> *pointmarkerlist;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordtype">int</span> numberofpoints;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keywordtype">int</span> numberofpointattributes;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  <span class="keywordtype">int</span> numberofpointmtrs;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="comment">// `elementlist&#39;:  An array of element (triangle or tetrahedron) corners.</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="comment">//   The first element&#39;s first corner is at index [0], followed by its</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="comment">//   other corners in counterclockwise order, followed by any other</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  <span class="comment">//   nodes if the element represents a nonlinear element.  Each element</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  <span class="comment">//   occupies `numberofcorners&#39; ints.</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="comment">// `elementattributelist&#39;:  An array of element attributes.  Each</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  <span class="comment">//   element&#39;s attributes occupy `numberofelementattributes&#39; REALs.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="comment">// `elementconstraintlist&#39;:  An array of constraints, i.e. triangle&#39;s</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="comment">//   area or tetrahedron&#39;s volume; one REAL per element.  Input only.</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  <span class="comment">// `neighborlist&#39;:  An array of element neighbors; 3 or 4 ints per</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="comment">//   element.  Output only.</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordtype">int</span> *tetrahedronlist;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  REAL *tetrahedronattributelist;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  REAL *tetrahedronvolumelist;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordtype">int</span> *neighborlist;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordtype">int</span> numberoftetrahedra;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordtype">int</span> numberofcorners;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="keywordtype">int</span> numberoftetrahedronattributes;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <span class="comment">// `facetlist&#39;:  An array of facets.  Each entry is a structure of facet.</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="comment">// `facetmarkerlist&#39;:  An array of facet markers; one int per facet.</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <a class="code" href="structtetgenio_1_1facet.xhtml">facet</a> *facetlist;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordtype">int</span> *facetmarkerlist;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordtype">int</span> numberoffacets;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  <span class="comment">// `holelist&#39;:  An array of holes.  The first hole&#39;s x, y and z</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <span class="comment">//   coordinates  are at indices [0], [1] and [2], followed by the</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="comment">//   remaining holes. Three REALs per hole. </span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  REAL *holelist;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="keywordtype">int</span> numberofholes;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <span class="comment">// `regionlist&#39;: An array of regional attributes and volume constraints.</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  <span class="comment">//   The first constraint&#39;s x, y and z coordinates are at indices [0],</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <span class="comment">//   [1] and [2], followed by the regional attribute at index [3], foll-</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="comment">//   owed by the maximum volume at index [4]. Five REALs per constraint.</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="comment">// Note that each regional attribute is used only if you select the `A&#39;</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="comment">//   switch, and each volume constraint is used only if you select the</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="comment">//   `a&#39; switch (with no number following).</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  REAL *regionlist;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keywordtype">int</span> numberofregions;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <span class="comment">// `facetconstraintlist&#39;: An array of facet maximal area constraints.</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="comment">//   Two REALs per constraint. The first (at index [0]) is the facet</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="comment">//   marker (cast it to int), the second (at index [1]) is its maximum</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <span class="comment">//   area bound.</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  REAL *facetconstraintlist;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <span class="keywordtype">int</span> numberoffacetconstraints;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <span class="comment">// `segmentconstraintlist&#39;: An array of segment max. length constraints.</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <span class="comment">//   Three REALs per constraint. The first two (at indcies [0] and [1]) </span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="comment">//   are the indices of the endpoints of the segment, the third (at index</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <span class="comment">//   [2]) is its maximum length bound.</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  REAL *segmentconstraintlist;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <span class="keywordtype">int</span> numberofsegmentconstraints;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <span class="comment">// &#39;pbcgrouplist&#39;:  An array of periodic boundary condition groups.</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <a class="code" href="structtetgenio_1_1pbcgroup.xhtml">pbcgroup</a> *pbcgrouplist;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keywordtype">int</span> numberofpbcgroups;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="comment">// `trifacelist&#39;:  An array of triangular face endpoints.  The first</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="comment">//   face&#39;s endpoints are at indices [0], [1] and [2], followed by the</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="comment">//   remaining faces.  Three ints per face.</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <span class="comment">// `adjtetlist&#39;:  An array of adjacent tetrahedra to the faces of</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <span class="comment">//   trifacelist. Each face has at most two adjacent tets, the first</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="comment">//   face&#39;s adjacent tets are at [0], [1]. Two ints per face. A &#39;-1&#39;</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="comment">//   indicates outside (no adj. tet). This list is output when &#39;-nn&#39;</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  <span class="comment">//   switch is used.</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="comment">// `trifacemarkerlist&#39;:  An array of face markers; one int per face.</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <span class="keywordtype">int</span> *trifacelist;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordtype">int</span> *adjtetlist;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <span class="keywordtype">int</span> *trifacemarkerlist;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="keywordtype">int</span> numberoftrifaces;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <span class="comment">// `edgelist&#39;:  An array of edge endpoints.  The first edge&#39;s endpoints</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  <span class="comment">//   are at indices [0] and [1], followed by the remaining edges.  Two</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  <span class="comment">//   ints per edge.</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  <span class="comment">// `edgemarkerlist&#39;:  An array of edge markers; one int per edge.</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  <span class="keywordtype">int</span> *edgelist;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keywordtype">int</span> *edgemarkerlist;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keywordtype">int</span> numberofedges;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  <span class="comment">// &#39;vpointlist&#39;:  An array of Voronoi vertex coordinates (like pointlist).</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  <span class="comment">// &#39;vedgelist&#39;:  An array of Voronoi edges.  Each entry is a &#39;voroedge&#39;.</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="comment">// &#39;vfacetlist&#39;:  An array of Voronoi facets. Each entry is a &#39;vorofacet&#39;.</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="comment">// &#39;vcelllist&#39;:  An array of Voronoi cells.  Each entry is an array of</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <span class="comment">//   indices pointing into &#39;vfacetlist&#39;. The 0th entry is used to store</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="comment">//   the length of this array.</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  REAL *vpointlist;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <a class="code" href="structtetgenio_1_1voroedge.xhtml">voroedge</a> *vedgelist;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <a class="code" href="structtetgenio_1_1vorofacet.xhtml">vorofacet</a> *vfacetlist;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  <span class="keywordtype">int</span> **vcelllist;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keywordtype">int</span> numberofvpoints;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <span class="keywordtype">int</span> numberofvedges;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keywordtype">int</span> numberofvfacets;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  <span class="keywordtype">int</span> numberofvcells;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <span class="comment">// A callback function.</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  TetSizeFunc tetunsuitable;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  <span class="comment">// Input &amp; output routines.</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  <span class="keywordtype">bool</span> load_node_call(FILE* infile, <span class="keywordtype">int</span> markers, <span class="keywordtype">char</span>* nodefilename);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <span class="keywordtype">bool</span> load_node(<span class="keywordtype">char</span>* filebasename);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  <span class="keywordtype">bool</span> load_var(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <span class="keywordtype">bool</span> load_mtr(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <span class="keywordtype">bool</span> load_poly(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <span class="keywordtype">bool</span> load_pbc(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <span class="keywordtype">bool</span> load_off(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  <span class="keywordtype">bool</span> load_ply(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordtype">bool</span> load_stl(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  <span class="keywordtype">bool</span> load_medit(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  <span class="keywordtype">bool</span> load_vtk(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  <span class="keywordtype">bool</span> load_plc(<span class="keywordtype">char</span>*, <span class="keywordtype">int</span>);</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <span class="keywordtype">bool</span> load_tetmesh(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;  <span class="keywordtype">void</span> save_nodes(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  <span class="keywordtype">void</span> save_elements(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  <span class="keywordtype">void</span> save_faces(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  <span class="keywordtype">void</span> save_edges(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  <span class="keywordtype">void</span> save_neighbors(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  <span class="keywordtype">void</span> save_poly(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  <span class="comment">// Read line and parse string functions.</span></div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  <span class="keywordtype">char</span> *readline(<span class="keywordtype">char</span>* <span class="keywordtype">string</span>, FILE* infile, <span class="keywordtype">int</span> *linenumber);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  <span class="keywordtype">char</span> *findnextfield(<span class="keywordtype">char</span>* <span class="keywordtype">string</span>);</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <span class="keywordtype">char</span> *readnumberline(<span class="keywordtype">char</span>* <span class="keywordtype">string</span>, FILE* infile, <span class="keywordtype">char</span>* infilename);</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  <span class="keywordtype">char</span> *findnextnumber(<span class="keywordtype">char</span>* <span class="keywordtype">string</span>);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  <span class="comment">// Initialize routine.</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordtype">void</span> initialize()</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    firstnumber = 0; <span class="comment">// Default item index is numbered from Zero.</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    mesh_dim = 3; <span class="comment">// Default mesh dimension is 3.</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    useindex = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    pointlist = (REAL *) NULL;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    pointattributelist = (REAL *) NULL;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    pointmtrlist = (REAL *) NULL;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;    pointmarkerlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    numberofpoints = 0;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    numberofpointattributes = 0;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    numberofpointmtrs = 0;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    tetrahedronlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    tetrahedronattributelist = (REAL *) NULL;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    tetrahedronvolumelist = (REAL *) NULL;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    neighborlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    numberoftetrahedra = 0;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    numberofcorners = 4; <span class="comment">// Default is 4 nodes per element.</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    numberoftetrahedronattributes = 0;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    trifacelist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    adjtetlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    trifacemarkerlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    numberoftrifaces = 0; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    facetlist = (<a class="code" href="structtetgenio_1_1facet.xhtml">facet</a> *) NULL;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    facetmarkerlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    numberoffacets = 0; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    edgelist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    edgemarkerlist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;    numberofedges = 0;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    holelist = (REAL *) NULL;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    numberofholes = 0;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    regionlist = (REAL *) NULL;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    numberofregions = 0;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    facetconstraintlist = (REAL *) NULL;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    numberoffacetconstraints = 0;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    segmentconstraintlist = (REAL *) NULL;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    numberofsegmentconstraints = 0;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;    pbcgrouplist = (<a class="code" href="structtetgenio_1_1pbcgroup.xhtml">pbcgroup</a> *) NULL;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    numberofpbcgroups = 0;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    vpointlist = (REAL *) NULL;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    vedgelist = (<a class="code" href="structtetgenio_1_1voroedge.xhtml">voroedge</a> *) NULL;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    vfacetlist = (<a class="code" href="structtetgenio_1_1vorofacet.xhtml">vorofacet</a> *) NULL; </div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    vcelllist = (<span class="keywordtype">int</span> **) NULL; </div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    numberofvpoints = 0;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    numberofvedges = 0;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    numberofvfacets = 0;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    numberofvcells = 0;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    tetunsuitable = NULL;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  }</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;  <span class="comment">// Free the memory allocated in &#39;tetgenio&#39;.  </span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;  <span class="keywordtype">void</span> deinitialize()</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  {</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    facet *f;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;    polygon *p;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    pbcgroup *pg;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keywordtype">int</span> i, j;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    <span class="comment">// This routine assumes that the memory was allocated by </span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;    <span class="comment">//   C++ memory allocation operator &#39;new&#39;.</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    <span class="keywordflow">if</span> (pointlist != (REAL *) NULL) {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;      <span class="keyword">delete</span> [] pointlist;</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;    }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keywordflow">if</span> (pointattributelist != (REAL *) NULL) {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;      <span class="keyword">delete</span> [] pointattributelist;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    }</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    <span class="keywordflow">if</span> (pointmtrlist != (REAL *) NULL) {</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;      <span class="keyword">delete</span> [] pointmtrlist;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    <span class="keywordflow">if</span> (pointmarkerlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;      <span class="keyword">delete</span> [] pointmarkerlist;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    }</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;    <span class="keywordflow">if</span> (tetrahedronlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;      <span class="keyword">delete</span> [] tetrahedronlist;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordflow">if</span> (tetrahedronattributelist != (REAL *) NULL) {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;      <span class="keyword">delete</span> [] tetrahedronattributelist;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">if</span> (tetrahedronvolumelist != (REAL *) NULL) {</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;      <span class="keyword">delete</span> [] tetrahedronvolumelist;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    <span class="keywordflow">if</span> (neighborlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;      <span class="keyword">delete</span> [] neighborlist;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;    }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    <span class="keywordflow">if</span> (trifacelist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;      <span class="keyword">delete</span> [] trifacelist;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    }</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;    <span class="keywordflow">if</span> (adjtetlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;      <span class="keyword">delete</span> [] adjtetlist;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">if</span> (trifacemarkerlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      <span class="keyword">delete</span> [] trifacemarkerlist;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    }</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <span class="keywordflow">if</span> (edgelist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;      <span class="keyword">delete</span> [] edgelist;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordflow">if</span> (edgemarkerlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;      <span class="keyword">delete</span> [] edgemarkerlist;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    }</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keywordflow">if</span> (facetlist != (facet *) NULL) {</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;      <span class="keywordflow">for</span> (i = 0; i &lt; numberoffacets; i++) {</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        f = &amp;facetlist[i];</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">for</span> (j = 0; j &lt; f-&gt;numberofpolygons; j++) {</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;          p = &amp;f-&gt;polygonlist[j];</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;          <span class="keyword">delete</span> [] p-&gt;vertexlist;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="keyword">delete</span> [] f-&gt;polygonlist;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        <span class="keywordflow">if</span> (f-&gt;holelist != (REAL *) NULL) {</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;          <span class="keyword">delete</span> [] f-&gt;holelist;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;      }</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;      <span class="keyword">delete</span> [] facetlist;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    }</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <span class="keywordflow">if</span> (facetmarkerlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;      <span class="keyword">delete</span> [] facetmarkerlist;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    }</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordflow">if</span> (holelist != (REAL *) NULL) {</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;      <span class="keyword">delete</span> [] holelist;</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    }</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keywordflow">if</span> (regionlist != (REAL *) NULL) {</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;      <span class="keyword">delete</span> [] regionlist;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;    }</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordflow">if</span> (facetconstraintlist != (REAL *) NULL) {</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;      <span class="keyword">delete</span> [] facetconstraintlist;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    }</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="keywordflow">if</span> (segmentconstraintlist != (REAL *) NULL) {</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;      <span class="keyword">delete</span> [] segmentconstraintlist;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    }</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">if</span> (pbcgrouplist != (pbcgroup *) NULL) {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;      <span class="keywordflow">for</span> (i = 0; i &lt; numberofpbcgroups; i++) {</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        pg = &amp;(pbcgrouplist[i]);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <span class="keywordflow">if</span> (pg-&gt;pointpairlist != (<span class="keywordtype">int</span> *) NULL) {</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;          <span class="keyword">delete</span> [] pg-&gt;pointpairlist;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;      }</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;      <span class="keyword">delete</span> [] pbcgrouplist;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    <span class="keywordflow">if</span> (vpointlist != (REAL *) NULL) {</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;      <span class="keyword">delete</span> [] vpointlist;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    }</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordflow">if</span> (vedgelist != (voroedge *) NULL) {</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;      <span class="keyword">delete</span> [] vedgelist;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">if</span> (vfacetlist != (vorofacet *) NULL) {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;      <span class="keywordflow">for</span> (i = 0; i &lt; numberofvfacets; i++) {</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <span class="keyword">delete</span> [] vfacetlist[i].elist;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;      }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;      <span class="keyword">delete</span> [] vfacetlist;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">if</span> (vcelllist != (<span class="keywordtype">int</span> **) NULL) {</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;      <span class="keywordflow">for</span> (i = 0; i &lt; numberofvcells; i++) {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keyword">delete</span> [] vcelllist[i];</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;      }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;      <span class="keyword">delete</span> [] vcelllist;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    }</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  }</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;  <span class="comment">// Constructor &amp; destructor.</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;  <a class="code" href="classtetgenio.xhtml">tetgenio</a>() {initialize();}</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;  ~<a class="code" href="classtetgenio.xhtml">tetgenio</a>() {deinitialize();}</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;};</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment">// Class tetgenbehavior                                                      //</span></div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment">// The object holding a collection of options controlling TetGen&#39;s behavior. //</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment">// See &quot;command line switches&quot; in User&#39;s manual.                             //</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="comment">// parse_commandline() provides an simple interface to set the vaules of the //</span></div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">// variables.  It accepts the standard parameters (e.g., &#39;argc&#39; and &#39;argv&#39;)  //</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="comment">// that pass to C/C++ main() function. Alternatively a string which contains //</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="comment">// the command line options can be used as its parameter.                    //</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00628"></a><span class="lineno"><a class="code" href="classtetgenbehavior.xhtml">  628</a></span>&#160;<span class="keyword">class </span><a class="code" href="classtetgenbehavior.xhtml">tetgenbehavior</a> {</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  <span class="comment">// Labels define the objects which are acceptable by TetGen. They are </span></div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  <span class="comment">//   recognized by the file extensions.</span></div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  <span class="comment">//   - NODES, a list of nodes (.node); </span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;  <span class="comment">//   - POLY, a piecewise linear complex (.poly or .smesh); </span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  <span class="comment">//   - OFF, a polyhedron (.off, Geomview&#39;s file format); </span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  <span class="comment">//   - PLY, a polyhedron (.ply, file format from gatech);</span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  <span class="comment">//   - STL, a surface mesh (.stl, stereolithography format);</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  <span class="comment">//   - MEDIT, a surface mesh (.mesh, Medit&#39;s file format); </span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  <span class="comment">//   - MESH, a tetrahedral mesh (.ele).</span></div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  <span class="comment">//   If no extension is available, the imposed commandline switch</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  <span class="comment">//   (-p or -r) implies the object. </span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;  <span class="keyword">enum</span> objecttype {NONE, NODES, POLY, OFF, PLY, STL, MEDIT, VTK, MESH};</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  <span class="comment">// Variables of command line switches. Each variable corresponds to a</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  <span class="comment">//   switch and will be initialized.</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  <span class="keywordtype">int</span> plc;                                                 <span class="comment">// &#39;-p&#39; switch, 0.</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;  <span class="keywordtype">int</span> quality;                                             <span class="comment">// &#39;-q&#39; switch, 0.</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;  <span class="keywordtype">int</span> refine;                                              <span class="comment">// &#39;-r&#39; switch, 0.</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  <span class="keywordtype">int</span> coarse;                                              <span class="comment">// &#39;-R&#39; switch, 0.</span></div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  <span class="keywordtype">int</span> metric;                                              <span class="comment">// &#39;-m&#39; switch, 0.</span></div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;  <span class="keywordtype">int</span> varvolume;                            <span class="comment">// &#39;-a&#39; switch without number, 0.</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;  <span class="keywordtype">int</span> fixedvolume;                             <span class="comment">// &#39;-a&#39; switch with number, 0.</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;  <span class="keywordtype">int</span> insertaddpoints;                                     <span class="comment">// &#39;-i&#39; switch, 0.</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;  <span class="keywordtype">int</span> regionattrib;                                        <span class="comment">// &#39;-A&#39; switch, 0.</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;  <span class="keywordtype">int</span> conformdel;                                          <span class="comment">// &#39;-D&#39; switch, 0.</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;  <span class="keywordtype">int</span> diagnose;                                            <span class="comment">// &#39;-d&#39; switch, 0.</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;  <span class="keywordtype">int</span> zeroindex;                                           <span class="comment">// &#39;-z&#39; switch, 0.</span></div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  <span class="keywordtype">int</span> btree;                                                        <span class="comment">// -u, 1.</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;  <span class="keywordtype">int</span> max_btreenode_size;                            <span class="comment">// number after -u, 100.</span></div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;  <span class="keywordtype">int</span> optlevel;                     <span class="comment">// number specified after &#39;-s&#39; switch, 3.</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  <span class="keywordtype">int</span> optpasses;                   <span class="comment">// number specified after &#39;-ss&#39; switch, 3.</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;  <span class="keywordtype">int</span> order;                <span class="comment">// element order, specified after &#39;-o&#39; switch, 1.</span></div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  <span class="keywordtype">int</span> facesout;                                            <span class="comment">// &#39;-f&#39; switch, 0.</span></div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;  <span class="keywordtype">int</span> edgesout;                                            <span class="comment">// &#39;-e&#39; switch, 0.</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;  <span class="keywordtype">int</span> neighout;                                            <span class="comment">// &#39;-n&#39; switch, 0.</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;  <span class="keywordtype">int</span> voroout;                                             <span class="comment">// &#39;-v&#39;,switch, 0.</span></div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  <span class="keywordtype">int</span> meditview;                                           <span class="comment">// &#39;-g&#39; switch, 0.</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;  <span class="keywordtype">int</span> gidview;                                             <span class="comment">// &#39;-G&#39; switch, 0.</span></div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;  <span class="keywordtype">int</span> geomview;                                            <span class="comment">// &#39;-O&#39; switch, 0.</span></div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  <span class="keywordtype">int</span> vtkview;                                             <span class="comment">// &#39;-K&#39; switch, 0.</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;  <span class="keywordtype">int</span> nobound;                                             <span class="comment">// &#39;-B&#39; switch, 0.</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;  <span class="keywordtype">int</span> nonodewritten;                                       <span class="comment">// &#39;-N&#39; switch, 0.</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;  <span class="keywordtype">int</span> noelewritten;                                        <span class="comment">// &#39;-E&#39; switch, 0.</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;  <span class="keywordtype">int</span> nofacewritten;                                       <span class="comment">// &#39;-F&#39; switch, 0.</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;  <span class="keywordtype">int</span> noiterationnum;                                      <span class="comment">// &#39;-I&#39; switch, 0.</span></div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;  <span class="keywordtype">int</span> nomerge;                                             <span class="comment">// &#39;-M&#39;,switch, 0.</span></div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  <span class="keywordtype">int</span> nobisect;             <span class="comment">// count of how often &#39;-Y&#39; switch is selected, 0.</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;  <span class="keywordtype">int</span> noflip;                        <span class="comment">// do not perform flips. &#39;-X&#39; switch. 0.</span></div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;  <span class="keywordtype">int</span> nojettison;        <span class="comment">// do not jettison redundants nodes. &#39;-J&#39; switch. 0.</span></div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;  <span class="keywordtype">int</span> steiner;                                <span class="comment">// number after &#39;-S&#39; switch. 0.</span></div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  <span class="keywordtype">int</span> fliprepair;                                          <span class="comment">// &#39;-X&#39; switch, 1.</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;  <span class="keywordtype">int</span> offcenter;                                           <span class="comment">// &#39;-R&#39; switch, 0.</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;  <span class="keywordtype">int</span> docheck;                                             <span class="comment">// &#39;-C&#39; switch, 0.</span></div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;  <span class="keywordtype">int</span> quiet;                                               <span class="comment">// &#39;-Q&#39; switch, 0.</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;  <span class="keywordtype">int</span> verbose;              <span class="comment">// count of how often &#39;-V&#39; switch is selected, 0.</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  <span class="keywordtype">int</span> useshelles;               <span class="comment">// &#39;-p&#39;, &#39;-r&#39;, &#39;-q&#39;, &#39;-d&#39;, or &#39;-R&#39; switch, 0.</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  <span class="keywordtype">int</span> maxflipedgelinksize;        <span class="comment">// The maximum flippable edge link size 10.</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  REAL minratio;                            <span class="comment">// number after &#39;-q&#39; switch, 2.0.</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  REAL goodratio;                  <span class="comment">// number calculated from &#39;minratio&#39;, 0.0.</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  REAL minangle;                                <span class="comment">// minimum angle bound, 20.0.</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  REAL goodangle;                         <span class="comment">// cosine squared of minangle, 0.0.</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  REAL maxvolume;                          <span class="comment">// number after &#39;-a&#39; switch, -1.0.</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;  REAL mindihedral;                        <span class="comment">// number after &#39;-qq&#39; switch, 5.0.</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;  REAL maxdihedral;                     <span class="comment">// number after &#39;-qqq&#39; switch, 165.0.</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  REAL alpha1;                          <span class="comment">// number after &#39;-m&#39; switch, sqrt(2).</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  REAL alpha2;                             <span class="comment">// number after &#39;-mm&#39; switch, 1.0.</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;  REAL alpha3;                            <span class="comment">// number after &#39;-mmm&#39; switch, 0.6.</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;  REAL epsilon;                          <span class="comment">// number after &#39;-T&#39; switch, 1.0e-8.</span></div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;  REAL epsilon2;                        <span class="comment">// number after &#39;-TT&#39; switch, 1.0e-5.</span></div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;  <span class="keyword">enum</span> objecttype object;            <span class="comment">// determined by -p, or -r switch. NONE.</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  <span class="comment">// Variables used to save command line switches and in/out file names.</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;  <span class="keywordtype">char</span> commandline[1024];</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;  <span class="keywordtype">char</span> infilename[1024];</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;  <span class="keywordtype">char</span> outfilename[1024];</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;  <span class="keywordtype">char</span> addinfilename[1024];</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;  <span class="keywordtype">char</span> bgmeshfilename[1024];</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;  <span class="keywordtype">void</span> syntax();</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;  <span class="keywordtype">void</span> usage();</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;  <span class="comment">// Command line parse routine.</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;  <span class="keywordtype">bool</span> parse_commandline(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;  <span class="keywordtype">bool</span> parse_commandline(<span class="keywordtype">char</span> *switches) {</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    <span class="keywordflow">return</span> parse_commandline(0, &amp;switches);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  }</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;  <span class="comment">// Initialize all variables.</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;  <a class="code" href="classtetgenbehavior.xhtml">tetgenbehavior</a>()</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;  {</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    plc = 0;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    quality = 0;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    refine = 0;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    coarse = 0;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    metric = 0;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    minratio = 2.0;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    goodratio = 0.0;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    minangle = 20.0;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    goodangle = 0.0;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    maxdihedral = 165.0;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    mindihedral = 5.0;</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    varvolume = 0;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    fixedvolume = 0;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    maxvolume = -1.0;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;    regionattrib = 0;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    insertaddpoints = 0;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    diagnose = 0;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    offcenter = 0;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    conformdel = 0;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    alpha1 = sqrt(2.0);</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    alpha2 = 1.0;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    alpha3 = 0.6;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;    zeroindex = 0;</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    btree = 1;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    max_btreenode_size = 100;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;    facesout = 0;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    edgesout = 0;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;    neighout = 0;</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;    voroout = 0;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;    meditview = 0;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;    gidview = 0;</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    geomview = 0;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    vtkview = 0;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    optlevel = 3;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    optpasses = 3;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    order = 1;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;    nojettison = 0;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;    nobound = 0;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;    nonodewritten = 0;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    noelewritten = 0;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;    nofacewritten = 0;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    noiterationnum = 0;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    nobisect = 0;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    noflip = 0;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    steiner = -1;</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    fliprepair = 1;</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    nomerge = 0;</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    docheck = 0;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    quiet = 0;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;    verbose = 0;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    useshelles = 0;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    maxflipedgelinksize = 10;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;    epsilon = 1.0e-8;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    epsilon2 = 1.0e-5;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;    <span class="keywordtype">object</span> = NONE;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    commandline[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    infilename[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    outfilename[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    addinfilename[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;    bgmeshfilename[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  }</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;  </div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  ~<a class="code" href="classtetgenbehavior.xhtml">tetgenbehavior</a>() </div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;  {</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  }</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;};</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="comment">// Class tetgenmesh                                                          //</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="comment">// The object to store, generate, and refine a tetrahedral mesh.             //</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="comment">// It implements the mesh data structures and functions to create and update //</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="comment">// a tetrahedral mesh according to the specified options.                    //</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00803"></a><span class="lineno"><a class="code" href="classtetgenmesh.xhtml">  803</a></span>&#160;<span class="keyword">class </span><a class="code" href="classtetgenmesh.xhtml">tetgenmesh</a> {</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  <span class="keyword">public</span>:</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;  <span class="comment">// Maximum number of characters in a file name (including the null).</span></div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;  <span class="keyword">enum</span> {FILENAMESIZE = 1024};</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;  <span class="comment">// For efficiency, a variety of data structures are allocated in bulk.</span></div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;  <span class="comment">//   The following constants determine how many of each structure is</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;  <span class="comment">//   allocated at once.</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;  <span class="keyword">enum</span> {VERPERBLOCK = 4092, SUBPERBLOCK = 4092, ELEPERBLOCK = 8188};</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;  <span class="comment">// Used for the point location scheme of Mucke, Saias, and Zhu, to</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  <span class="comment">//   decide how large a random sample of tetrahedra to inspect.</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;  <span class="keyword">enum</span> {SAMPLEFACTOR = 11};</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;  <span class="comment">// Labels that signify two edge rings of a triangle (see Muecke&#39;s thesis).</span></div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;  <span class="keyword">enum</span> {CCW = 0, CW = 1};</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;  <span class="comment">// Labels that signify whether a record consists primarily of pointers</span></div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;  <span class="comment">//   or of floating-point words.  Used for data alignment.</span></div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;  <span class="keyword">enum</span> wordtype {POINTER, FLOATINGPOINT};</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;  <span class="comment">// Labels that signify the type of a vertex. </span></div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  <span class="keyword">enum</span> verttype {UNUSEDVERTEX, DUPLICATEDVERTEX, NACUTEVERTEX, ACUTEVERTEX,</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;    FREESEGVERTEX, FREESUBVERTEX, FREEVOLVERTEX, DEADVERTEX = -32768};</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160; </div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;  <span class="comment">// Labels that signify the type of a subface/subsegment.</span></div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;  <span class="keyword">enum</span> shestype {NSHARP, SHARP};</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;  <span class="comment">// Labels that signify the type of flips can be applied on a face.</span></div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;  <span class="keyword">enum</span> fliptype {T23, T32, T22, T44, N32, N40, FORBIDDENFACE, FORBIDDENEDGE};</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;  <span class="comment">// Labels that signify the result of triangle-triangle intersection test.</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;  <span class="keyword">enum</span> interresult {DISJOINT, INTERSECT, SHAREVERTEX, SHAREEDGE, SHAREFACE,</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    TOUCHEDGE, TOUCHFACE, INTERVERT, INTEREDGE, INTERFACE, INTERTET,</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    TRIEDGEINT, EDGETRIINT, COLLISIONFACE, INTERSUBSEG, INTERSUBFACE,</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;    BELOWHULL2};</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;  <span class="comment">// Labels that signify the result of point location.</span></div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;  <span class="keyword">enum</span> locateresult {INTETRAHEDRON, ONFACE, ONEDGE, ONVERTEX, OUTSIDE,</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;    ENCSEGMENT};</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;  <span class="comment">// Labels that signify the result of vertex insertion. </span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;  <span class="keyword">enum</span> insertsiteresult {SUCCESSINTET, SUCCESSONFACE, SUCCESSONEDGE,</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    DUPLICATEPOINT, OUTSIDEPOINT};</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;  <span class="comment">// Labels that signify the result of direction finding. </span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;  <span class="keyword">enum</span> finddirectionresult {ACROSSEDGE, ACROSSFACE, LEFTCOLLINEAR,</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;    RIGHTCOLLINEAR, TOPCOLLINEAR, BELOWHULL};</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment">// Mesh elements                                                             //</span></div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="comment">// There are four types of mesh elements: tetrahedra, subfaces, subsegments, //</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="comment">// and points,  where subfaces and subsegments are triangles and edges which //</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="comment">// appear on boundaries.  A tetrahedralization of a 3D point set comprises   //</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="comment">// tetrahedra and points;  a surface mesh of a 3D domain comprises subfaces  //</span></div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="comment">// subsegments and points.  The elements of all the four types consist of a  //</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="comment">// tetrahedral mesh of a 3D domain.  However, TetGen uses three data types:  //</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="comment">// &#39;tetrahedron&#39;, &#39;shellface&#39;, and &#39;point&#39;. A &#39;tetrahedron&#39; is a tetrahedron;//</span></div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="comment">// while a &#39;shellface&#39; can be either a subface or a subsegment; and a &#39;point&#39;//</span></div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment">// is a point.  These three data types, linked by pointers comprise a mesh.  //</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment">// A tetrahedron primarily consists of a list of 4 pointers to its corners,  //</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment">// a list of 4 pointers to its adjoining tetrahedra, a list of 4 pointers to //</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="comment">// its adjoining subfaces (when subfaces are needed). Optinoally, (depending //</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="comment">// on the selected switches), it may contain an arbitrary number of user-    //</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="comment">// defined floating-point attributes,  an optional maximum volume constraint //</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="comment">// (for -a switch), and a pointer to a list of high-order nodes (-o2 switch).//</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="comment">// Since the size of a tetrahedron is not determined until running time.     //</span></div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="comment">// The data structure of tetrahedron also stores the geometrical information.//</span></div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="comment">// Let t be a tetrahedron, v0, v1, v2, and v3 be the 4 nodes corresponding   //</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="comment">// to the order of their storage in t.  v3 always has a negative orientation //</span></div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="comment">// with respect to v0, v1, v2 (ie,, v3 lies above the oriented plane passes  //</span></div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="comment">// through v0, v1, v2). Let the 4 faces of t be f0, f1, f2, and f3. Vertices //</span></div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="comment">// of each face are stipulated as follows: f0 (v0, v1, v2), f1 (v0, v3, v1), //</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="comment">// f2 (v1, v3, v2), f3 (v2, v3, v0).                                         //</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="comment">// A subface has 3 pointers to vertices, 3 pointers to adjoining subfaces, 3 //</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="comment">// pointers to adjoining subsegments, 2 pointers to adjoining tetrahedra, a  //</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="comment">// boundary marker(an integer). Like a tetrahedron, the pointers to vertices,//</span></div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="comment">// subfaces, and subsegments are ordered in a way that indicates their geom- //</span></div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="comment">// etric relation.  Let s be a subface, v0, v1 and v2 be the 3 nodes corres- //</span></div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="comment">// ponding to the order of their storage in s,  e0, e1 and e2 be the 3 edges,//</span></div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="comment">// then we have: e0 (v0, v1), e1 (v1, v2), e2 (v2, v0).                      //</span></div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment">// A subsegment has exactly the same data fields as a subface has, but only  //</span></div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="comment">// uses some of them. It has 2 pointers to its endpoints, 2 pointers to its  //</span></div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="comment">// adjoining (and collinear) subsegments, a pointer to a subface containing  //</span></div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="comment">// it (there may exist any number of subfaces having it, choose one of them  //</span></div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="comment">// arbitrarily). The geometric relation between its endpoints and adjoining  //</span></div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="comment">// subsegments is kept with respect to the storing order of its endpoints.   //</span></div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="comment">// The data structure of point is relatively simple.  A point is a list of   //</span></div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="comment">// floating-point numbers, starting with the x, y, and z coords, followed by //</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="comment">// an arbitrary number of optional user-defined floating-point attributes,   //</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="comment">// an integer boundary marker, an integer for the point type, and a pointer  //</span></div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="comment">// to a tetrahedron (used for speeding up point location).                   //</span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="comment">// For a tetrahedron on a boundary (or a hull) of the mesh, some or all of   //</span></div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="comment">// the adjoining tetrahedra may not be present. For an interior tetrahedron, //</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="comment">// often no neighboring subfaces are present,  Such absent tetrahedra and    //</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="comment">// subfaces are never represented by the NULL pointers; they are represented //</span></div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="comment">// by two special records: `dummytet&#39;, the tetrahedron fills &quot;outer space&quot;,  //</span></div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="comment">// and `dummysh&#39;,  the vacuous subfaces which are omnipresent.               //</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="comment">// Tetrahedra and adjoining subfaces are glued together through the pointers //</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="comment">// saved in each data fields of them. Subfaces and adjoining subsegments are //</span></div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="comment">// connected in the same fashion.  However, there are no pointers directly   //</span></div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="comment">// gluing tetrahedra and adjoining subsegments.  For the purpose of saving   //</span></div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="comment">// space, the connections between tetrahedra and subsegments are entirely    //</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="comment">// mediated through subfaces.  The following part explains how subfaces are  //</span></div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="comment">// connected in TetGen.                                                      //</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="comment">// Subface-subface and subface-subsegment connections                        //</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment">// Adjoining subfaces sharing a common edge are connected in such a way that //</span></div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">// they form a face ring around the edge. It is indeed a single linked list  //</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment">// which is cyclic, e.g., one can start from any subface in it and traverse  //</span></div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">// back. When the edge is not a subsegment, the ring only has two coplanar   //</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment">// subfaces which are pointing to each other. Otherwise, the face ring may   //</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">// have any number of subfaces (and are not all coplanar).                   //</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment">// How is the face ring formed?  Let s be a subsegment, f is one of subfaces //</span></div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="comment">// containing s as an edge.  The direction of s is stipulated from its first //</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="comment">// endpoint to its second (according to their storage in s). Once the dir of //</span></div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="comment">// s is determined, the other two edges of f are oriented to follow this dir.//</span></div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment">// The &quot;directional normal&quot; N_f is a vector formed from any point in f and a //</span></div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="comment">// points orthogonally above f.                                              //</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="comment">// The face ring of s is a cyclic ordered set of subfaces containing s, i.e.,//</span></div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="comment">// F(s) = {f1, f2, ..., fn}, n &gt;= 1.  Where the order is defined as follows: //</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="comment">// let fi, fj be two faces in F(s), the &quot;normal-angle&quot;, NAngle(i,j) (range   //</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="comment">// from 0 to 360 degree) is the angle between the N_fi and N_fj;  then fi is //</span></div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="comment">// in front of fj (or symbolically, fi &lt; fj) if there exists another fk in   //</span></div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="comment">// F(s), and NAangle(k, i) &lt; NAngle(k, j).  The face ring of s is: f1 &lt; f2 &lt; //</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="comment">// ... &lt; fn &lt; f1.                                                            //</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="comment">// The easiest way to imagine how a face ring is formed is to use the right- //</span></div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="comment">// hand rule.  Make a fist using your right hand with the thumb pointing to  //</span></div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="comment">// the direction of the subsegment. The face ring is connected following the //</span></div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="comment">// direction of your fingers.                                                //</span></div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment">// The subface and subsegment are also connected through pointers stored in  //</span></div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment">// their own data fields.  Every subface has a pointer to its adjoining sub- //</span></div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">// segment. However, a subsegment only has one pointer to a subface which is //</span></div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">// containing it. Such subface can be chosen arbitrarily, other subfaces are //</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">// found through the face ring.                                              //</span></div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;  <span class="comment">// The tetrahedron data structure.  Fields of a tetrahedron contains:</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;  <span class="comment">//   - a list of four adjoining tetrahedra;</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;  <span class="comment">//   - a list of four vertices;</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;  <span class="comment">//   - a list of four subfaces (optional, used for -p switch);</span></div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;  <span class="comment">//   - a list of user-defined floating-point attributes (optional);</span></div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;  <span class="comment">//   - a volume constraint (optional, used for -a switch);</span></div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;  <span class="comment">//   - an integer of element marker (optional, used for -n switch);</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;  <span class="comment">//   - a pointer to a list of high-ordered nodes (optional, -o2 switch);</span></div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;  <span class="keyword">typedef</span> REAL **tetrahedron;</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;  <span class="comment">// The shellface data structure.  Fields of a shellface contains:</span></div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;  <span class="comment">//   - a list of three adjoining subfaces;</span></div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;  <span class="comment">//   - a list of three vertices;</span></div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;  <span class="comment">//   - a list of two adjoining tetrahedra;</span></div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;  <span class="comment">//   - a list of three adjoining subsegments;</span></div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;  <span class="comment">//   - a pointer to a badface containing it (used for -q);</span></div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;  <span class="comment">//   - an area constraint (optional, used for -q);</span></div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;  <span class="comment">//   - an integer for boundary marker;</span></div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;  <span class="comment">//   - an integer for type: SHARPSEGMENT, NONSHARPSEGMENT, ...;</span></div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;  <span class="comment">//   - an integer for pbc group (optional, if in-&gt;pbcgrouplist exists);</span></div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;  <span class="keyword">typedef</span> REAL **shellface;</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;  <span class="comment">// The point data structure.  It is actually an array of REALs:</span></div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;  <span class="comment">//   - x, y and z coordinates;</span></div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;  <span class="comment">//   - a list of user-defined point attributes (optional);</span></div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;  <span class="comment">//   - a list of REALs of a user-defined metric tensor (optional);</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;  <span class="comment">//   - a pointer to a simplex (tet, tri, edge, or vertex);</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;  <span class="comment">//   - a pointer to a parent (or duplicate) point;</span></div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;  <span class="comment">//   - a pointer to a tet in background mesh (optional);</span></div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;  <span class="comment">//   - a pointer to another pbc point (optional);</span></div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;  <span class="comment">//   - an integer for boundary marker;</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;  <span class="comment">//   - an integer for verttype: INPUTVERTEX, FREEVERTEX, ...;</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;  <span class="keyword">typedef</span> REAL *point;</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="comment">// Mesh handles                                                              //</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="comment">// Two special data types, &#39;triface&#39; and &#39;face&#39; are defined for maintaining  //</span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;<span class="comment">// and updating meshes. They are like pointers (or handles), which allow you //</span></div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;<span class="comment">// to hold one particular part of the mesh, i.e., a tetrahedron, a triangle, //</span></div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="comment">// an edge and a vertex.  However, these data types do not themselves store  //</span></div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="comment">// any part of the mesh. The mesh is made of the data types defined above.   //</span></div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<span class="comment">// Muecke&#39;s &quot;triangle-edge&quot; data structure is the prototype for these data   //</span></div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="comment">// types.  It allows a universal representation for every tetrahedron,       //</span></div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;<span class="comment">// triangle, edge and vertex.  For understanding the following descriptions  //</span></div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;<span class="comment">// of these handle data structures,  readers are required to read both the   //</span></div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;<span class="comment">// introduction and implementation detail of &quot;triangle-edge&quot; data structure  //</span></div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="comment">// in Muecke&#39;s thesis.                                                       //</span></div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="comment">// A &#39;triface&#39; represents a face of a tetrahedron and an oriented edge of    //</span></div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;<span class="comment">// the face simultaneously.  It has a pointer &#39;tet&#39; to a tetrahedron, an     //</span></div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;<span class="comment">// integer &#39;loc&#39; (range from 0 to 3) as the face index, and an integer &#39;ver&#39; //</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="comment">// (range from 0 to 5) as the edge version. A face of the tetrahedron can be //</span></div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="comment">// uniquly determined by the pair (tet, loc), and an oriented edge of this   //</span></div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="comment">// face can be uniquly determined by the triple (tet, loc, ver).  Therefore, //</span></div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="comment">// different usages of one triface are possible.  If we only use the pair    //</span></div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="comment">// (tet, loc), it refers to a face, and if we add the &#39;ver&#39; additionally to  //</span></div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="comment">// the pair, it is an oriented edge of this face.                            //</span></div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;<span class="comment">// A &#39;face&#39; represents a subface and an oriented edge of it simultaneously.  //</span></div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;<span class="comment">// It has a pointer &#39;sh&#39; to a subface, an integer &#39;shver&#39;(range from 0 to 5) //</span></div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="comment">// as the edge version.  The pair (sh, shver) determines a unique oriented   //</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="comment">// edge of this subface.  A &#39;face&#39; is also used to represent a subsegment,   //</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment">// in this case, &#39;sh&#39; points to the subsegment, and &#39;shver&#39; indicates the    //</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;<span class="comment">// one of two orientations of this subsegment, hence, it only can be 0 or 1. //</span></div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="comment">// Mesh navigation and updating are accomplished through a set of mesh       //</span></div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;<span class="comment">// manipulation primitives which operate on trifaces and faces.  They are    //</span></div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;<span class="comment">// introduced below.                                                         //</span></div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01038"></a><span class="lineno"><a class="code" href="classtetgenmesh_1_1triface.xhtml"> 1038</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a> {</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    tetrahedron* tet;</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;    <span class="keywordtype">int</span> loc, ver;</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;    <span class="comment">// Constructors;</span></div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;    <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>() : tet(0), loc(0), ver(0) {}</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    <span class="comment">// Operators;</span></div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t) {</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;      tet = t.tet; loc = t.loc; ver = t.ver;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;      <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;    }</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;    <span class="keywordtype">bool</span> operator==(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t) {</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;      <span class="keywordflow">return</span> tet == t.tet &amp;&amp; loc == t.loc &amp;&amp; ver == t.ver;</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;    }</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;    <span class="keywordtype">bool</span> operator!=(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t) {</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;      <span class="keywordflow">return</span> tet != t.tet || loc != t.loc || ver != t.ver;</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;    }</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;  };</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;</div>
<div class="line"><a name="l01060"></a><span class="lineno"><a class="code" href="classtetgenmesh_1_1face.xhtml"> 1060</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classtetgenmesh_1_1face.xhtml">face</a> {</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    shellface *sh;</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <span class="keywordtype">int</span> shver;</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;    <span class="comment">// Constructors;</span></div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>() : sh(0), shver(0) {}</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    <span class="comment">// Operators;</span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s) {</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;      sh = s.sh; shver = s.shver;</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;      <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;    }</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;    <span class="keywordtype">bool</span> operator==(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s) {<span class="keywordflow">return</span> (sh == s.sh) &amp;&amp; (shver == s.shver);}</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;    <span class="keywordtype">bool</span> operator!=(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s) {<span class="keywordflow">return</span> (sh != s.sh) || (shver != s.shver);}</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;  };</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment">// The badface structure                                                     //</span></div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment">// A multiple usages structure. Despite of its name, a &#39;badface&#39; can be used //</span></div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="comment">// to represent the following objects:                                       //</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="comment">//   - a face of a tetrahedron which is (possibly) non-Delaunay;             //</span></div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;<span class="comment">//   - an encroached subsegment or subface;                                  //</span></div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="comment">//   - a bad-quality tetrahedron, i.e, has too large radius-edge ratio;      //</span></div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="comment">//   - a sliver, i.e., has good radius-edge ratio but nearly zero volume;    //</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="comment">//   - a degenerate tetrahedron (see routine checkdegetet()).                //</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="comment">//   - a recently flipped face (saved for undoing the flip later).           //</span></div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="comment">// It has the following fields:  &#39;tt&#39; holds a tetrahedron; &#39;ss&#39; holds a sub- //</span></div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="comment">// segment or subface; &#39;cent&#39; is the circumcent of &#39;tt&#39; or &#39;ss&#39;, &#39;key&#39; is a  //</span></div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="comment">// special value depending on the use, it can be either the square of the    //</span></div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="comment">// radius-edge ratio of &#39;tt&#39; or the flipped type of &#39;tt&#39;;  &#39;forg&#39;, &#39;fdest&#39;,  //</span></div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<span class="comment">// &#39;fapex&#39;, and &#39;foppo&#39; are vertices saved for checking the object in &#39;tt&#39;   //</span></div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="comment">// or &#39;ss&#39; is still the same when it was stored; &#39;noppo&#39; is the fifth vertex //</span></div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;<span class="comment">// of a degenerate point set.  &#39;previtem&#39; and &#39;nextitem&#39; implement a double  //</span></div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;<span class="comment">// link for managing many basfaces.                                          //</span></div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01102"></a><span class="lineno"><a class="code" href="structtetgenmesh_1_1badface.xhtml"> 1102</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a> {</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;    <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a> tt; </div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a> ss; </div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;    REAL key;</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;    REAL cent[3];</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;    point forg, fdest, fapex, foppo;</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    point noppo;</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;    <span class="keyword">struct </span><a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a> *previtem, *nextitem; </div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;  };</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;<span class="comment">// Elementary flip data structure                                            //</span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="comment">// A data structure to record three types of elementary flips, which are     //</span></div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="comment">// 2-to-3, 3-to-2, and 2-to-2 flips.                                         //</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01121"></a><span class="lineno"><a class="code" href="classtetgenmesh_1_1elemflip.xhtml"> 1121</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classtetgenmesh_1_1elemflip.xhtml">elemflip</a> {</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;    <span class="keyword">enum</span> fliptype ft; <span class="comment">// ft \in {T23, T32, T22}.</span></div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;    point pset1[3];</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;    point pset2[3];</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;    <a class="code" href="classtetgenmesh_1_1elemflip.xhtml">elemflip</a>() {</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;      ft = T23; <span class="comment">// Default.</span></div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;      pset1[0] = pset1[1] = pset1[2] = (point) NULL;</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;      pset2[0] = pset2[1] = pset2[2] = (point) NULL;</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;    }</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;  };</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="comment">// The pbcdata structure                                                     //</span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;<span class="comment">// A pbcdata stores data of a periodic boundary condition defined on a pair  //</span></div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment">// of facets or segments. Let f1 and f2 define a pbcgroup. &#39;fmark&#39; saves the //</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="comment">// facet markers of f1 and f2;  &#39;ss&#39; contains two subfaces belong to f1 and  //</span></div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment">// f2, respectively.  Let s1 and s2 define a segment pbcgroup. &#39;segid&#39; are   //</span></div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="comment">// the segment ids of s1 and s2; &#39;ss&#39; contains two segments belong to s1 and //</span></div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="comment">// s2, respectively. &#39;transmat&#39; are two transformation matrices. transmat[0] //</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;<span class="comment">// transforms a point of f1 (or s1) into a point of f2 (or s2),  transmat[1] //</span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;<span class="comment">// does the inverse.                                                         //</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01152"></a><span class="lineno"><a class="code" href="structtetgenmesh_1_1pbcdata.xhtml"> 1152</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structtetgenmesh_1_1pbcdata.xhtml">pbcdata</a> {</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;    <span class="keywordtype">int</span> fmark[2];</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;    <span class="keywordtype">int</span> segid[2];</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;    <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a> ss[2];</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;    REAL transmat[2][4][4];</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;  };</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;<span class="comment">// Fast lookup tables for mesh manipulation primitives.                      //</span></div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="comment">// Mesh manipulation primitives (given below) are basic operations on mesh   //</span></div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment">// data structures. They answer basic queries on mesh handles, such as &quot;what //</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="comment">// is the origin (or destination, or apex) of the face?&quot;, &quot;what is the next  //</span></div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;<span class="comment">// (or previous) edge in the edge ring?&quot;, and &quot;what is the next face in the  //</span></div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;<span class="comment">// face ring?&quot;, and so on.                                                   //</span></div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="comment">// The implementation of teste basic queries can take advangtage of the fact //</span></div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="comment">// that the mesh data structures additionally store geometric informations.  //</span></div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="comment">// For example, we have ordered the 4 vertices (from 0 to 3) and the 4 faces //</span></div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="comment">// (from 0 to 3) of a tetrahedron,  and for each face of the tetrahedron, a  //</span></div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;<span class="comment">// sequence of vertices has stipulated,  therefore the origin of any face of //</span></div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;<span class="comment">// the tetrahedron can be quickly determined by a table &#39;locver2org&#39;, which  //</span></div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;<span class="comment">// takes the index of the face and the edge version as inputs.  A list of    //</span></div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;<span class="comment">// fast lookup tables are defined below. They&#39;re just like global variables. //</span></div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;<span class="comment">// These tables are initialized at the runtime.                              //</span></div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;  <span class="comment">// For enext() primitive, uses &#39;ver&#39; as the index. </span></div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> ve[6];</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;  <span class="comment">// For org(), dest() and apex() primitives, uses &#39;ver&#39; as the index.</span></div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> vo[6], vd[6], va[6];</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;  <span class="comment">// For org(), dest() and apex() primitives, uses &#39;loc&#39; as the first</span></div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;  <span class="comment">//   index and &#39;ver&#39; as the second index.</span></div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> locver2org[4][6];</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> locver2dest[4][6];</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> locver2apex[4][6];</div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;  <span class="comment">// For oppo() primitives, uses &#39;loc&#39; as the index.</span></div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> loc2oppo[4];</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;  <span class="comment">// For fnext() primitives, uses &#39;loc&#39; as the first index and &#39;ver&#39; as</span></div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;  <span class="comment">//   the second index,  returns an array containing a new &#39;loc&#39; and a</span></div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;  <span class="comment">//   new &#39;ver&#39;. Note: Only valid for &#39;ver&#39; equals one of {0, 2, 4}.</span></div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> locver2nextf[4][6][2];</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;  <span class="comment">// The edge number (from 0 to 5) of a tet is defined as follows:</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> locver2edge[4][6];</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> edge2locver[6][2];</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;  <span class="comment">// The map from a given face (&#39;loc&#39;) to the other three faces in the tet.</span></div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;  <span class="comment">//   and the map from a given face&#39;s edge (&#39;loc&#39;, &#39;ver&#39;) to other two</span></div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;  <span class="comment">//   faces in the tet opposite to this edge. (used in speeding the Bowyer-</span></div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;  <span class="comment">//   Watson cavity construction).</span></div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> locpivot[4][3];</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> locverpivot[4][6][2];</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;  <span class="comment">// For enumerating three edges of a triangle.</span></div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> plus1mod3[3];</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> minus1mod3[3];</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;<span class="comment">// Mesh manipulation primitives                                              //</span></div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;<span class="comment">// A serial of mesh operations such as topological maintenance,  navigation, //</span></div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;<span class="comment">// local modification, etc.,  is accomplished through a set of mesh manipul- //</span></div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;<span class="comment">// ation primitives. These primitives are indeed very simple functions which //</span></div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;<span class="comment">// take one or two handles (&#39;triface&#39;s and &#39;face&#39;s) as parameters,  perform  //</span></div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;<span class="comment">// basic operations such as &quot;glue two tetrahedra at a face&quot;,  &quot;return the    //</span></div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="comment">// origin of a tetrahedron&quot;, &quot;return the subface adjoining at the face of a  //</span></div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;<span class="comment">// tetrahedron&quot;, and so on.                                                  //</span></div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;  <span class="comment">// Primitives for tetrahedra.</span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> decode(tetrahedron ptr, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;  <span class="keyword">inline</span> tetrahedron encode(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sym(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> symself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> bond(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> dissolve(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;  <span class="keyword">inline</span> point org(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;  <span class="keyword">inline</span> point dest(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;  <span class="keyword">inline</span> point apex(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;  <span class="keyword">inline</span> point oppo(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setorg(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, point pointptr);</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setdest(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, point pointptr);</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setapex(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, point pointptr);</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setoppo(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, point pointptr);</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> esym(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> esymself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enext(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enextself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enext2(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enext2self(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> fnext(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> fnextself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> symedge(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> symedgeself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tfnext(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tfnextself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enextfnext(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enextfnextself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enext2fnext(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t1, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t2);</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> enext2fnextself(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;  <span class="keyword">inline</span> REAL elemattribute(tetrahedron* ptr, <span class="keywordtype">int</span> attnum);</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setelemattribute(tetrahedron* ptr, <span class="keywordtype">int</span> attnum, REAL value);</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;  <span class="keyword">inline</span> REAL volumebound(tetrahedron* ptr);</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setvolumebound(tetrahedron* ptr, REAL value);</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">int</span> getelemmarker(tetrahedron* ptr);</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setelemmarker(tetrahedron* ptr, <span class="keywordtype">int</span> value);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> infect(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> uninfect(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> infected(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> marktest(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> unmarktest(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> marktested(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> markface(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> unmarkface(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> facemarked(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> markedge(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> unmarkedge(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> edgemarked(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160; </div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;  <span class="comment">// Primitives for subfaces and subsegments.</span></div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sdecode(shellface sptr, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;  <span class="keyword">inline</span> shellface sencode(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> spivot(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s1, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s2);</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> spivotself(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sbond(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s1, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s2);</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sbond1(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s1, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s2);</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sdissolve(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;  <span class="keyword">inline</span> point sorg(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;  <span class="keyword">inline</span> point sdest(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;  <span class="keyword">inline</span> point sapex(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setsorg(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, point pointptr);</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setsdest(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, point pointptr);</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setsapex(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, point pointptr);</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sesym(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s1, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s2);</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sesymself(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> senext(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s1, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s2);</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> senextself(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> senext2(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s1, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s2);</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> senext2self(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sfnext(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp;, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp;);</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sfnextself(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp;);</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;  <span class="keyword">inline</span> <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>* shell2badface(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setshell2badface(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>* value);</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;  <span class="keyword">inline</span> REAL areabound(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setareabound(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, REAL value);</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">int</span> shellmark(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setshellmark(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <span class="keywordtype">int</span> value);</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;  <span class="keyword">inline</span> <span class="keyword">enum</span> shestype shelltype(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setshelltype(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <span class="keyword">enum</span> shestype value); </div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">int</span> shellpbcgroup(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setshellpbcgroup(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <span class="keywordtype">int</span> value);</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sinfect(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> suninfect(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> sinfected(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;  <span class="comment">// Primitives for interacting tetrahedra and subfaces.</span></div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tspivot(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> stpivot(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tsbond(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tsdissolve(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> stdissolve(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;  <span class="comment">// Primitives for interacting subfaces and subsegs.</span></div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> sspivot(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; edge);</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> ssbond(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; edge);</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> ssdissolve(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s);</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tsspivot1(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; seg);</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tssbond1(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; seg);</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> tssdissolve1(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t);</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;  <span class="comment">// Primitives for points.</span></div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">int</span>  pointmark(point pt);</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpointmark(point pt, <span class="keywordtype">int</span> value);</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;  <span class="keyword">inline</span> <span class="keyword">enum</span> verttype pointtype(point pt);</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpointtype(point pt, <span class="keyword">enum</span> verttype value);</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> pinfect(point pt);</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> puninfect(point pt);</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> pinfected(point pt);</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;  <span class="keyword">inline</span> tetrahedron point2tet(point pt);</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpoint2tet(point pt, tetrahedron value);</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;  <span class="keyword">inline</span> shellface point2sh(point pt);</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpoint2sh(point pt, shellface value);</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;  <span class="keyword">inline</span> shellface point2seg(point pt);</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpoint2seg(point pt, shellface value);</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;  <span class="keyword">inline</span> point point2ppt(point pt);</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpoint2ppt(point pt, point value);</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;  <span class="keyword">inline</span> tetrahedron point2bgmtet(point pt);</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpoint2bgmtet(point pt, tetrahedron value);</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;  <span class="keyword">inline</span> point point2pbcpt(point pt);</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> setpoint2pbcpt(point pt, point value);</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;  <span class="comment">// Advanced primitives.</span></div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> adjustedgering(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp; t, <span class="keywordtype">int</span> direction);</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> adjustedgering(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp; s, <span class="keywordtype">int</span> direction);</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> isdead(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* t);</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> isdead(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* s);</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> isfacehaspoint(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* t, point testpoint);</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> isfacehaspoint(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* t, point testpoint);</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> isfacehasedge(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* s, point tend1, point tend2);</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> issymexist(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* t);</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;  <span class="keywordtype">void</span> getnextsface(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*);</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;  <span class="keywordtype">void</span> tsspivot(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*);</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;  <span class="keywordtype">void</span> sstpivot(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*);</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;  <span class="keywordtype">void</span> point2tetorg(point, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp;);</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;  <span class="keywordtype">void</span> point2shorg(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp;);</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;  <span class="keywordtype">void</span> point2segorg(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp;);</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;  <span class="keywordtype">bool</span> findorg(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* t, point dorg);</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;  <span class="keywordtype">bool</span> findorg(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* s, point dorg);</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;  <span class="keywordtype">void</span> findedge(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* t, point eorg, point edest);</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;  <span class="keywordtype">void</span> findedge(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* s, point eorg, point edest);</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;  <span class="keywordtype">void</span> getonextseg(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* s, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* lseg);</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;  <span class="keywordtype">void</span> getseghasorg(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* sseg, point dorg);</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;  point getsubsegfarorg(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* sseg);</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;  point getsubsegfardest(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* sseg);</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;  <span class="keywordtype">void</span> printtet(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*);</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;  <span class="keywordtype">void</span> printsh(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*);</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;<span class="comment">// Arraypool                                                                 //</span></div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;<span class="comment">// Each arraypool contains an array of pointers to a number of blocks.  Each //</span></div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;<span class="comment">// block contains the same fixed number of objects.  Each index of the array //</span></div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;<span class="comment">// addesses a particular object in the pool.  The most significant bits add- //</span></div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;<span class="comment">// ress the index of the block containing the object. The less significant   //</span></div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;<span class="comment">// bits address this object within the block.                                //</span></div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;<span class="comment">// &#39;objectbytes&#39; is the size of one object in blocks; &#39;log2objectsperblock&#39;  //</span></div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;<span class="comment">// is the base-2 logarithm of &#39;objectsperblock&#39;; &#39;objects&#39; counts the number //</span></div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;<span class="comment">// of allocated objects; &#39;totalmemory&#39; is the totoal memorypool in bytes.    //</span></div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01395"></a><span class="lineno"><a class="code" href="classtetgenmesh_1_1arraypool.xhtml"> 1395</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> {</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    <span class="keywordtype">int</span> objectbytes;</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;    <span class="keywordtype">int</span> objectsperblock;</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;    <span class="keywordtype">int</span> log2objectsperblock; </div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    <span class="keywordtype">int</span> toparraylen;</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    <span class="keywordtype">char</span> **toparray;</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    <span class="keywordtype">long</span> objects;</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> totalmemory;</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;    <span class="keywordtype">void</span> restart();</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;    <span class="keywordtype">void</span> poolinit(<span class="keywordtype">int</span> sizeofobject, <span class="keywordtype">int</span> log2objperblk);</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <span class="keywordtype">char</span>* getblock(<span class="keywordtype">int</span> objectindex);</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;    <span class="keywordtype">void</span>* lookup(<span class="keywordtype">int</span> objectindex);</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;    <span class="keywordtype">int</span> newindex(<span class="keywordtype">void</span> **newptr);</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;    <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>(<span class="keywordtype">int</span> sizeofobject, <span class="keywordtype">int</span> log2objperblk);</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;    ~<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>();</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;  };</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;<span class="comment">// fastlookup() -- A fast, unsafe operation. Return the pointer to the object</span></div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;<span class="comment">//   with a given index.  Note: The object&#39;s block must have been allocated,</span></div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;<span class="comment">//   i.e., by the function newindex().</span></div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;<span class="preprocessor">#define fastlookup(pool, index) \</span></div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;<span class="preprocessor">  (void *) ((pool)-&gt;toparray[(index) &gt;&gt; (pool)-&gt;log2objectsperblock] + \</span></div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;<span class="preprocessor">            ((index) &amp; ((pool)-&gt;objectsperblock - 1)) * (pool)-&gt;objectbytes)</span></div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;<span class="comment">// A function: int cmp(const T &amp;, const T &amp;),  is said to realize a</span></div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;<span class="comment">//   linear order on the type T if there is a linear order &lt;= on T such</span></div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;<span class="comment">//   that for all x and y in T satisfy the following relation:</span></div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;<span class="comment">//                 -1  if x &lt; y.</span></div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;<span class="comment">//   comp(x, y) =   0  if x is equivalent to y.</span></div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;<span class="comment">//                 +1  if x &gt; y.</span></div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;<span class="comment">// A &#39;compfunc&#39; is a pointer to a linear-order function. </span></div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;  <span class="keyword">typedef</span> int (*compfunc) (<span class="keyword">const</span> <span class="keywordtype">void</span> *, <span class="keyword">const</span> <span class="keywordtype">void</span> *);</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;<span class="comment">// List                                                                      //</span></div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;<span class="comment">// An array of items with automatically reallocation of memory.              //</span></div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;<span class="comment">// &#39;base&#39; is the starting address of the array.  &#39;itembytes&#39; is the size of  //</span></div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;<span class="comment">//   each item in byte.                                                      //</span></div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;<span class="comment">// &#39;items&#39; is the number of items stored in list.  &#39;maxitems&#39; indicates how  //</span></div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;<span class="comment">//   many items can be stored in this list. &#39;expandsize&#39; is the increasing   //</span></div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;<span class="comment">//   size (items) when the list is full.                                     //</span></div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;<span class="comment">// The index of list always starts from zero, i.e., for a list L contains    //</span></div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;<span class="comment">//   n elements, the first element is L[0], and the last element is L[n-1].  //</span></div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01454"></a><span class="lineno"><a class="code" href="classtetgenmesh_1_1list.xhtml"> 1454</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classtetgenmesh_1_1list.xhtml">list</a> {</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;    <span class="keywordtype">char</span> *base;</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;    <span class="keywordtype">int</span>  itembytes;</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;    <span class="keywordtype">int</span>  items, maxitems, expandsize;</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    compfunc comp;</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>(<span class="keywordtype">int</span> itbytes, compfunc pcomp, <span class="keywordtype">int</span> mitems = 256, <span class="keywordtype">int</span> exsize = 128) {</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;      listinit(itbytes, pcomp, mitems, exsize);</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    }</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    ~<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>() { free(base); }</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;    <span class="keywordtype">void</span> *operator[](<span class="keywordtype">int</span> i) { <span class="keywordflow">return</span> (<span class="keywordtype">void</span> *) (base + i * itembytes); }</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <span class="keywordtype">void</span> listinit(<span class="keywordtype">int</span> itbytes, compfunc pcomp, <span class="keywordtype">int</span> mitems, <span class="keywordtype">int</span> exsize);</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    <span class="keywordtype">void</span> setcomp(compfunc compf) { comp = compf; }    </div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;    <span class="keywordtype">void</span> clear() { items = 0; }</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;    <span class="keywordtype">int</span>  len() { <span class="keywordflow">return</span> items; }</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    <span class="keywordtype">void</span> *append(<span class="keywordtype">void</span>* appitem);</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;    <span class="keywordtype">void</span> *insert(<span class="keywordtype">int</span> pos, <span class="keywordtype">void</span>* insitem);</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    <span class="keywordtype">void</span> del(<span class="keywordtype">int</span> pos, <span class="keywordtype">int</span> order);</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    <span class="keywordtype">int</span>  hasitem(<span class="keywordtype">void</span>* checkitem);</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;  };</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;<span class="comment">// Memorypool                                                                //</span></div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;<span class="comment">// A type used to allocate memory.                                           //</span></div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;<span class="comment">// firstblock is the first block of items. nowblock is the block from which  //</span></div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;<span class="comment">//   items are currently being allocated. nextitem points to the next slab   //</span></div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;<span class="comment">//   of free memory for an item. deaditemstack is the head of a linked list  //</span></div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;<span class="comment">//   (stack) of deallocated items that can be recycled.  unallocateditems is //</span></div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;<span class="comment">//   the number of items that remain to be allocated from nowblock.          //</span></div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;<span class="comment">// Traversal is the process of walking through the entire list of items, and //</span></div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;<span class="comment">//   is separate from allocation.  Note that a traversal will visit items on //</span></div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;<span class="comment">//   the &quot;deaditemstack&quot; stack as well as live items.  pathblock points to   //</span></div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;<span class="comment">//   the block currently being traversed.  pathitem points to the next item  //</span></div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;<span class="comment">//   to be traversed.  pathitemsleft is the number of items that remain to   //</span></div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;<span class="comment">//   be traversed in pathblock.                                              //</span></div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;<span class="comment">// itemwordtype is set to POINTER or FLOATINGPOINT, and is used to suggest   //</span></div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;<span class="comment">//   what sort of word the record is primarily made up of.  alignbytes       //</span></div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;<span class="comment">//   determines how new records should be aligned in memory.  itembytes and  //</span></div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;<span class="comment">//   itemwords are the length of a record in bytes (after rounding up) and   //</span></div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;<span class="comment">//   words.  itemsperblock is the number of items allocated at once in a     //</span></div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;<span class="comment">//   single block.  items is the number of currently allocated items.        //</span></div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;<span class="comment">//   maxitems is the maximum number of items that have been allocated at     //</span></div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;<span class="comment">//   once; it is the current number of items plus the number of records kept //</span></div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;<span class="comment">//   on deaditemstack.                                                       //</span></div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01511"></a><span class="lineno"><a class="code" href="classtetgenmesh_1_1memorypool.xhtml"> 1511</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> {</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;    <span class="keywordtype">void</span> **firstblock, **nowblock;</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;    <span class="keywordtype">void</span> *nextitem;</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;    <span class="keywordtype">void</span> *deaditemstack;</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;    <span class="keywordtype">void</span> **pathblock;</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;    <span class="keywordtype">void</span> *pathitem;</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;    wordtype itemwordtype;</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;    <span class="keywordtype">int</span>  alignbytes;</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;    <span class="keywordtype">int</span>  itembytes, itemwords;</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;    <span class="keywordtype">int</span>  itemsperblock;</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    <span class="keywordtype">long</span> items, maxitems;</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <span class="keywordtype">int</span>  unallocateditems;</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    <span class="keywordtype">int</span>  pathitemsleft;</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;    <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>();</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;    <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">enum</span> wordtype, <span class="keywordtype">int</span>);</div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;    ~<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>();</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    </div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;    <span class="keywordtype">void</span> poolinit(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keyword">enum</span> wordtype, <span class="keywordtype">int</span>);</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;    <span class="keywordtype">void</span> restart();</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    <span class="keywordtype">void</span> *alloc();</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;    <span class="keywordtype">void</span> dealloc(<span class="keywordtype">void</span>*);</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;    <span class="keywordtype">void</span> traversalinit();</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    <span class="keywordtype">void</span> *traverse();</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;  };  </div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;<span class="comment">// Queue                                                                     //</span></div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;<span class="comment">// A &#39;queue&#39; is a FIFO data structure.                                       //</span></div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01548"></a><span class="lineno"><a class="code" href="classtetgenmesh_1_1queue.xhtml"> 1548</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a> : <span class="keyword">public</span> <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> {</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div>
<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;    <span class="keywordtype">void</span> **head, **tail;</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;    <span class="keywordtype">int</span>  linkitembytes;</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;    <span class="keywordtype">int</span>  linkitems; <span class="comment">// Not count &#39;head&#39; and &#39;tail&#39;.</span></div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;     <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>(<span class="keywordtype">int</span> bytecount, <span class="keywordtype">int</span> itemcount = 256) {</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;       linkitembytes = bytecount;</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;       poolinit(bytecount + <span class="keyword">sizeof</span>(<span class="keywordtype">void</span> *), itemcount, POINTER, 0);</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;       head = (<span class="keywordtype">void</span> **) alloc();</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;       tail = (<span class="keywordtype">void</span> **) alloc();</div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;       *head = (<span class="keywordtype">void</span> *) tail;</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;       *tail = NULL;</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;       linkitems = 0;</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;     }</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;     <span class="keywordtype">void</span> clear() {</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;       <span class="comment">// Reset the pool.</span></div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;       restart();</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;       <span class="comment">// Initialize all variables.</span></div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;       head = (<span class="keywordtype">void</span> **) alloc();</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;       tail = (<span class="keywordtype">void</span> **) alloc();</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;       *head = (<span class="keywordtype">void</span> *) tail;</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;       *tail = NULL;</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;       linkitems = 0;</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;     }</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;     <span class="keywordtype">long</span> len() { <span class="keywordflow">return</span> linkitems; }</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;     <span class="keywordtype">bool</span> empty() { <span class="keywordflow">return</span> linkitems == 0; }</div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;</div>
<div class="line"><a name="l01580"></a><span class="lineno"> 1580</span>&#160;     <span class="keywordtype">void</span> *push(<span class="keywordtype">void</span>* newitem) {</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;       <span class="keywordtype">void</span> **newnode = tail;</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;       <span class="keywordflow">if</span> (newitem != (<span class="keywordtype">void</span> *) NULL) {</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;         memcpy((<span class="keywordtype">void</span> *)(newnode + 1), newitem, linkitembytes);</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;       }</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;       tail = (<span class="keywordtype">void</span> **) alloc();</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;       *tail = NULL;</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;       *newnode = (<span class="keywordtype">void</span> *) tail;</div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;       linkitems++;</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;       <span class="keywordflow">return</span> (<span class="keywordtype">void</span> *)(newnode + 1);</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;     }</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;     <span class="keywordtype">void</span> *pop() {</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;       <span class="keywordflow">if</span> (linkitems &gt; 0) {</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;         <span class="keywordtype">void</span> **deadnode = (<span class="keywordtype">void</span> **) *head;</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;         *head = *deadnode;</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;         dealloc((<span class="keywordtype">void</span> *) deadnode);</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;         linkitems--;</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;         <span class="keywordflow">return</span> (<span class="keywordtype">void</span> *)(deadnode + 1);</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;       } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;         <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;       }</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;     }</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;  };</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;<span class="comment">//  Memory managment routines                                                //</span></div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;  <span class="keywordtype">void</span> dummyinit(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);</div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;  <span class="keywordtype">void</span> initializepools();</div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;  <span class="keywordtype">void</span> tetrahedrondealloc(tetrahedron*);</div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;  tetrahedron *tetrahedrontraverse();</div>
<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;  <span class="keywordtype">void</span> shellfacedealloc(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>*, shellface*);</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;  shellface *shellfacetraverse(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>*);</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;  <span class="keywordtype">void</span> badfacedealloc(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>*, <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>*);</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;  <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a> *badfacetraverse(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>*);</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;  <span class="keywordtype">void</span> pointdealloc(point);</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;  point pointtraverse();</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;  <span class="keywordtype">void</span> maketetrahedron(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*);</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;  <span class="keywordtype">void</span> makeshellface(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>*, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*);</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;  <span class="keywordtype">void</span> makepoint(point*);</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;</div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;  <span class="keywordtype">void</span> makepoint2tetmap();</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;  <span class="keywordtype">void</span> makepoint2segmap();</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;  <span class="keywordtype">void</span> makeindex2pointmap(point*&amp;);</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;  <span class="keywordtype">void</span> makesegmentmap(<span class="keywordtype">int</span>*&amp;, shellface**&amp;);</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;  <span class="keywordtype">void</span> makesubfacemap(<span class="keywordtype">int</span>*&amp;, shellface**&amp;);</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;  <span class="keywordtype">void</span> maketetrahedronmap(<span class="keywordtype">int</span>*&amp;, tetrahedron**&amp;);</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;<span class="comment">// Geometric functions                                                       //</span></div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;  <span class="comment">// PI is the ratio of a circle&#39;s circumference to its diameter.</span></div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;  <span class="keyword">static</span> REAL PI;</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;  <span class="comment">// Triangle-triangle intersection test</span></div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;  <span class="keyword">enum</span> interresult edge_vert_col_inter(REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;  <span class="keyword">enum</span> interresult edge_edge_cop_inter(REAL*, REAL*, REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;  <span class="keyword">enum</span> interresult tri_vert_cop_inter(REAL*, REAL*, REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;  <span class="keyword">enum</span> interresult tri_edge_cop_inter(REAL*, REAL*, REAL*,REAL*,REAL*,REAL*);</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;  <span class="keyword">enum</span> interresult tri_edge_inter_tail(REAL*, REAL*, REAL*, REAL*, REAL*,</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;                                        REAL, REAL);</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;  <span class="keyword">enum</span> interresult tri_edge_inter(REAL*, REAL*, REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;  <span class="keyword">enum</span> interresult tri_tri_inter(REAL*, REAL*, REAL*, REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;  <span class="keywordtype">int</span> tri_edge_2d(point, point, point, point, point, point, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>*, <span class="keywordtype">int</span>*);</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;  <span class="keywordtype">int</span> tri_edge_test(point, point, point, point, point, point, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>*, <span class="keywordtype">int</span>*);</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;  <span class="comment">// Geometric tests</span></div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;  REAL incircle3d(point pa, point pb, point pc, point pd);</div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;  REAL insphere_s(REAL*, REAL*, REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;  <span class="keywordtype">bool</span> iscollinear(REAL*, REAL*, REAL*, REAL eps);</div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;  <span class="keywordtype">bool</span> iscoplanar(REAL*, REAL*, REAL*, REAL*, REAL vol6, REAL eps);</div>
<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;  <span class="keywordtype">bool</span> iscospheric(REAL*, REAL*, REAL*, REAL*, REAL*, REAL vol24, REAL eps);</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;  <span class="comment">// Linear algebra functions</span></div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;  <span class="keyword">inline</span> REAL dot(REAL* v1, REAL* v2);</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">void</span> cross(REAL* v1, REAL* v2, REAL* n);</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;  <span class="keywordtype">bool</span> lu_decmp(REAL lu[4][4], <span class="keywordtype">int</span> n, <span class="keywordtype">int</span>* ps, REAL* d, <span class="keywordtype">int</span> N);</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;  <span class="keywordtype">void</span> lu_solve(REAL lu[4][4], <span class="keywordtype">int</span> n, <span class="keywordtype">int</span>* ps, REAL* b, <span class="keywordtype">int</span> N);</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;</div>
<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;  <span class="comment">// Geometric calculations</span></div>
<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;  <span class="keyword">inline</span> REAL distance(REAL* p1, REAL* p2);</div>
<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;  REAL shortdistance(REAL* p, REAL* e1, REAL* e2);</div>
<div class="line"><a name="l01669"></a><span class="lineno"> 1669</span>&#160;  REAL shortdistance(REAL* p, REAL* e1, REAL* e2, REAL* e3);</div>
<div class="line"><a name="l01670"></a><span class="lineno"> 1670</span>&#160;  REAL interiorangle(REAL* o, REAL* p1, REAL* p2, REAL* n);</div>
<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;  <span class="keywordtype">void</span> projpt2edge(REAL* p, REAL* e1, REAL* e2, REAL* prj);</div>
<div class="line"><a name="l01672"></a><span class="lineno"> 1672</span>&#160;  <span class="keywordtype">void</span> projpt2face(REAL* p, REAL* f1, REAL* f2, REAL* f3, REAL* prj);</div>
<div class="line"><a name="l01673"></a><span class="lineno"> 1673</span>&#160;  <span class="keywordtype">void</span> facenormal(REAL* pa, REAL* pb, REAL* pc, REAL* n, REAL* nlen);</div>
<div class="line"><a name="l01674"></a><span class="lineno"> 1674</span>&#160;  <span class="keywordtype">void</span> facenormal2(point pa, point pb, point pc, REAL *n, <span class="keywordtype">int</span> pivot);</div>
<div class="line"><a name="l01675"></a><span class="lineno"> 1675</span>&#160;  <span class="keywordtype">void</span> edgeorthonormal(REAL* e1, REAL* e2, REAL* op, REAL* n);</div>
<div class="line"><a name="l01676"></a><span class="lineno"> 1676</span>&#160;  REAL facedihedral(REAL* pa, REAL* pb, REAL* pc1, REAL* pc2);</div>
<div class="line"><a name="l01677"></a><span class="lineno"> 1677</span>&#160;  <span class="keywordtype">void</span> tetalldihedral(point, point, point, point, REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01678"></a><span class="lineno"> 1678</span>&#160;  <span class="keywordtype">void</span> tetallnormal(point, point, point, point, REAL N[4][3], REAL* volume);</div>
<div class="line"><a name="l01679"></a><span class="lineno"> 1679</span>&#160;  REAL tetaspectratio(point, point, point, point);</div>
<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;  <span class="keywordtype">bool</span> circumsphere(REAL*, REAL*, REAL*, REAL*, REAL* cent, REAL* radius);</div>
<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;  <span class="keywordtype">void</span> inscribedsphere(REAL*, REAL*, REAL*, REAL*, REAL* cent, REAL* radius);</div>
<div class="line"><a name="l01682"></a><span class="lineno"> 1682</span>&#160;  <span class="keywordtype">void</span> rotatepoint(REAL* p, REAL rotangle, REAL* p1, REAL* p2);</div>
<div class="line"><a name="l01683"></a><span class="lineno"> 1683</span>&#160;  <span class="keywordtype">void</span> planelineint(REAL*, REAL*, REAL*, REAL*, REAL*, REAL*, REAL*);</div>
<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;</div>
<div class="line"><a name="l01685"></a><span class="lineno"> 1685</span>&#160;  <span class="comment">// Point location routines.</span></div>
<div class="line"><a name="l01686"></a><span class="lineno"> 1686</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> randomnation(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> choices);</div>
<div class="line"><a name="l01687"></a><span class="lineno"> 1687</span>&#160;  REAL distance2(tetrahedron* tetptr, point p);</div>
<div class="line"><a name="l01688"></a><span class="lineno"> 1688</span>&#160;  <span class="keywordtype">void</span> randomsample(point searchpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a> *searchtet);</div>
<div class="line"><a name="l01689"></a><span class="lineno"> 1689</span>&#160;  <span class="keyword">enum</span> locateresult locate(point searchpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet);</div>
<div class="line"><a name="l01690"></a><span class="lineno"> 1690</span>&#160;  <span class="keyword">enum</span> locateresult locate2(point searchpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01691"></a><span class="lineno"> 1691</span>&#160;  <span class="keyword">enum</span> locateresult preciselocate(point searchpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, <span class="keywordtype">long</span>);</div>
<div class="line"><a name="l01692"></a><span class="lineno"> 1692</span>&#160;  <span class="keyword">enum</span> locateresult adjustlocate(point, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <span class="keyword">enum</span> locateresult, REAL);</div>
<div class="line"><a name="l01693"></a><span class="lineno"> 1693</span>&#160;  <span class="keyword">enum</span> locateresult hullwalk(point searchpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* hulltet);</div>
<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;  <span class="keyword">enum</span> locateresult locatesub(point searchpt, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* searchsh, <span class="keywordtype">int</span>, REAL);</div>
<div class="line"><a name="l01695"></a><span class="lineno"> 1695</span>&#160;  <span class="keyword">enum</span> locateresult adjustlocatesub(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <span class="keyword">enum</span> locateresult, REAL);</div>
<div class="line"><a name="l01696"></a><span class="lineno"> 1696</span>&#160;  <span class="keyword">enum</span> locateresult locateseg(point searchpt, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* searchseg);</div>
<div class="line"><a name="l01697"></a><span class="lineno"> 1697</span>&#160;  <span class="keyword">enum</span> locateresult adjustlocateseg(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <span class="keyword">enum</span> locateresult, REAL);</div>
<div class="line"><a name="l01698"></a><span class="lineno"> 1698</span>&#160;</div>
<div class="line"><a name="l01700"></a><span class="lineno"> 1700</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01701"></a><span class="lineno"> 1701</span>&#160;<span class="comment">// Mesh update functions                                                     //</span></div>
<div class="line"><a name="l01702"></a><span class="lineno"> 1702</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01704"></a><span class="lineno"> 1704</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;  <span class="keywordtype">void</span> enqueueflipface(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>&amp;, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01706"></a><span class="lineno"> 1706</span>&#160;  <span class="keywordtype">void</span> enqueueflipedge(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>&amp;, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01707"></a><span class="lineno"> 1707</span>&#160;  <span class="keywordtype">void</span> flip23(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01708"></a><span class="lineno"> 1708</span>&#160;  <span class="keywordtype">void</span> flip32(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01709"></a><span class="lineno"> 1709</span>&#160;  <span class="keywordtype">void</span> flip22(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01710"></a><span class="lineno"> 1710</span>&#160;  <span class="keywordtype">void</span> flip22sub(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01711"></a><span class="lineno"> 1711</span>&#160;  <span class="keywordtype">long</span> lawson3d(<a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipqueue);</div>
<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;  <span class="keywordtype">long</span> lawson(<a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipqueue);</div>
<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;</div>
<div class="line"><a name="l01714"></a><span class="lineno"> 1714</span>&#160;  <span class="keywordtype">bool</span> removetetbypeeloff(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a> *striptet, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*);</div>
<div class="line"><a name="l01715"></a><span class="lineno"> 1715</span>&#160;  <span class="keywordtype">bool</span> removefacebyflip23(REAL *key, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01716"></a><span class="lineno"> 1716</span>&#160;  <span class="keywordtype">bool</span> removeedgebyflip22(REAL *key, <span class="keywordtype">int</span>, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01717"></a><span class="lineno"> 1717</span>&#160;  <span class="keywordtype">bool</span> removeedgebyflip32(REAL *key, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;  <span class="keywordtype">bool</span> removeedgebytranNM(REAL*,<span class="keywordtype">int</span>,<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*,<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*,point,point,<a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01719"></a><span class="lineno"> 1719</span>&#160;  <span class="keywordtype">bool</span> removeedgebycombNM(REAL*,<span class="keywordtype">int</span>,<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*,<span class="keywordtype">int</span>*,<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*,<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*,<a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;</div>
<div class="line"><a name="l01721"></a><span class="lineno"> 1721</span>&#160;  <span class="keywordtype">void</span> splittetrahedron(point, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;  <span class="keywordtype">void</span> splittetface(point, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01723"></a><span class="lineno"> 1723</span>&#160;  <span class="keywordtype">void</span> splitsubface(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01724"></a><span class="lineno"> 1724</span>&#160;  <span class="keywordtype">bool</span> splittetedge(point, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01725"></a><span class="lineno"> 1725</span>&#160;  <span class="keywordtype">void</span> splitsubedge(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01726"></a><span class="lineno"> 1726</span>&#160;</div>
<div class="line"><a name="l01727"></a><span class="lineno"> 1727</span>&#160;  <span class="keywordtype">void</span> formstarpolyhedron(point pt, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* tetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* verlist, <span class="keywordtype">bool</span>);</div>
<div class="line"><a name="l01728"></a><span class="lineno"> 1728</span>&#160;  <span class="keywordtype">void</span> formbowatcavitysub(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*);</div>
<div class="line"><a name="l01729"></a><span class="lineno"> 1729</span>&#160;  <span class="keywordtype">void</span> formbowatcavityquad(point, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*);</div>
<div class="line"><a name="l01730"></a><span class="lineno"> 1730</span>&#160;  <span class="keywordtype">void</span> formbowatcavitysegquad(point, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*);</div>
<div class="line"><a name="l01731"></a><span class="lineno"> 1731</span>&#160;  <span class="keywordtype">void</span> formbowatcavity(point bp, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* bpseg, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* bpsh, <span class="keywordtype">int</span>* n, <span class="keywordtype">int</span>* nmax,</div>
<div class="line"><a name="l01732"></a><span class="lineno"> 1732</span>&#160;                       <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** sublists, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** subceillists, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** tetlists,</div>
<div class="line"><a name="l01733"></a><span class="lineno"> 1733</span>&#160;                       <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** ceillists);</div>
<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;  <span class="keywordtype">void</span> releasebowatcavity(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <span class="keywordtype">int</span>, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>**, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>**, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>**, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>**);</div>
<div class="line"><a name="l01735"></a><span class="lineno"> 1735</span>&#160;  <span class="keywordtype">bool</span> validatebowatcavityquad(point bp, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ceillist, REAL maxcosd);</div>
<div class="line"><a name="l01736"></a><span class="lineno"> 1736</span>&#160;  <span class="keywordtype">void</span> updatebowatcavityquad(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* tetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ceillist);</div>
<div class="line"><a name="l01737"></a><span class="lineno"> 1737</span>&#160;  <span class="keywordtype">void</span> updatebowatcavitysub(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* sublist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* subceillist, <span class="keywordtype">int</span>* cutcount);</div>
<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;  <span class="keywordtype">bool</span> trimbowatcavity(point bp, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* bpseg, <span class="keywordtype">int</span> n, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** sublists,</div>
<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;                       <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** subceillists, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** tetlists,<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** ceillists,</div>
<div class="line"><a name="l01740"></a><span class="lineno"> 1740</span>&#160;                       REAL maxcosd);</div>
<div class="line"><a name="l01741"></a><span class="lineno"> 1741</span>&#160;  <span class="keywordtype">void</span> bowatinsertsite(point bp, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* splitseg, <span class="keywordtype">int</span> n, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** sublists,</div>
<div class="line"><a name="l01742"></a><span class="lineno"> 1742</span>&#160;                       <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** subceillists, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** tetlists, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** ceillists,</div>
<div class="line"><a name="l01743"></a><span class="lineno"> 1743</span>&#160;                       <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* verlist, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipque, <span class="keywordtype">bool</span> chkencseg, </div>
<div class="line"><a name="l01744"></a><span class="lineno"> 1744</span>&#160;                       <span class="keywordtype">bool</span> chkencsub, <span class="keywordtype">bool</span> chkbadtet);</div>
<div class="line"><a name="l01745"></a><span class="lineno"> 1745</span>&#160;</div>
<div class="line"><a name="l01747"></a><span class="lineno"> 1747</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01748"></a><span class="lineno"> 1748</span>&#160;<span class="comment">// Delaunay tetrahedralization functions                                     //</span></div>
<div class="line"><a name="l01749"></a><span class="lineno"> 1749</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01751"></a><span class="lineno"> 1751</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;  <span class="comment">// Point sorting routines.</span></div>
<div class="line"><a name="l01753"></a><span class="lineno"> 1753</span>&#160;  <span class="keywordtype">void</span> btree_sort(point*, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, REAL, REAL, REAL, REAL, REAL, REAL, <span class="keywordtype">int</span>);</div>
<div class="line"><a name="l01754"></a><span class="lineno"> 1754</span>&#160;  <span class="keywordtype">void</span> btree_insert(point insertpt);</div>
<div class="line"><a name="l01755"></a><span class="lineno"> 1755</span>&#160;  <span class="keywordtype">void</span> btree_search(point searchpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet);</div>
<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;  <span class="keywordtype">void</span> ordervertices(point* vertexarray, <span class="keywordtype">int</span> arraysize);</div>
<div class="line"><a name="l01757"></a><span class="lineno"> 1757</span>&#160;</div>
<div class="line"><a name="l01758"></a><span class="lineno"> 1758</span>&#160;  <span class="keyword">enum</span> locateresult insertvertexbw(point insertpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a> *searchtet, </div>
<div class="line"><a name="l01759"></a><span class="lineno"> 1759</span>&#160;                                   <span class="keywordtype">bool</span> bwflag, <span class="keywordtype">bool</span> visflag, </div>
<div class="line"><a name="l01760"></a><span class="lineno"> 1760</span>&#160;                                   <span class="keywordtype">bool</span> noencsegflag, <span class="keywordtype">bool</span> noencsubflag);</div>
<div class="line"><a name="l01761"></a><span class="lineno"> 1761</span>&#160;  <span class="keywordtype">bool</span> unifypoint(point testpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <span class="keyword">enum</span> locateresult, REAL);</div>
<div class="line"><a name="l01762"></a><span class="lineno"> 1762</span>&#160;  <span class="keywordtype">bool</span> incrflipdelaunay(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, point*, <span class="keywordtype">long</span>, <span class="keywordtype">bool</span>, <span class="keywordtype">bool</span>, REAL, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01763"></a><span class="lineno"> 1763</span>&#160;  <span class="keywordtype">long</span> delaunizevertices();</div>
<div class="line"><a name="l01764"></a><span class="lineno"> 1764</span>&#160;</div>
<div class="line"><a name="l01766"></a><span class="lineno"> 1766</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01767"></a><span class="lineno"> 1767</span>&#160;<span class="comment">// Surface triangulation functions                                           //</span></div>
<div class="line"><a name="l01768"></a><span class="lineno"> 1768</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01770"></a><span class="lineno"> 1770</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01771"></a><span class="lineno"> 1771</span>&#160;  <span class="keyword">enum</span> locateresult sinsertvertex(point insertpt, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a> *splitsh,<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a> *splitseg,</div>
<div class="line"><a name="l01772"></a><span class="lineno"> 1772</span>&#160;                                  <span class="keywordtype">bool</span> bwflag, <span class="keywordtype">bool</span> cflag);</div>
<div class="line"><a name="l01773"></a><span class="lineno"> 1773</span>&#160;  <span class="keywordtype">void</span> formstarpolygon(point pt, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* trilist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* verlist);</div>
<div class="line"><a name="l01774"></a><span class="lineno"> 1774</span>&#160;  <span class="keywordtype">void</span> getfacetabovepoint(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* facetsh);</div>
<div class="line"><a name="l01775"></a><span class="lineno"> 1775</span>&#160;  <span class="keywordtype">bool</span> incrflipdelaunaysub(<span class="keywordtype">int</span> shmark, REAL eps, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <span class="keywordtype">int</span>, REAL*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01776"></a><span class="lineno"> 1776</span>&#160;  <span class="keyword">enum</span> finddirectionresult finddirectionsub(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* searchsh, point tend);</div>
<div class="line"><a name="l01777"></a><span class="lineno"> 1777</span>&#160;  <span class="keywordtype">void</span> insertsubseg(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* tri);</div>
<div class="line"><a name="l01778"></a><span class="lineno"> 1778</span>&#160;  <span class="keywordtype">bool</span> scoutsegmentsub(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* searchsh, point tend);</div>
<div class="line"><a name="l01779"></a><span class="lineno"> 1779</span>&#160;  <span class="keywordtype">void</span> flipedgerecursive(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* flipedge, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipqueue);</div>
<div class="line"><a name="l01780"></a><span class="lineno"> 1780</span>&#160;  <span class="keywordtype">void</span> constrainededge(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* startsh, point tend, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipqueue);</div>
<div class="line"><a name="l01781"></a><span class="lineno"> 1781</span>&#160;  <span class="keywordtype">void</span> recoversegment(point tstart, point tend, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipqueue);</div>
<div class="line"><a name="l01782"></a><span class="lineno"> 1782</span>&#160;  <span class="keywordtype">void</span> infecthullsub(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>* viri);</div>
<div class="line"><a name="l01783"></a><span class="lineno"> 1783</span>&#160;  <span class="keywordtype">void</span> plaguesub(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>* viri);</div>
<div class="line"><a name="l01784"></a><span class="lineno"> 1784</span>&#160;  <span class="keywordtype">void</span> carveholessub(<span class="keywordtype">int</span> holes, REAL* holelist, <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>* viri);</div>
<div class="line"><a name="l01785"></a><span class="lineno"> 1785</span>&#160;  <span class="keywordtype">void</span> triangulate(<span class="keywordtype">int</span> shmark, REAL eps, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ptlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* conlist,<span class="keywordtype">int</span> holes,</div>
<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;                   REAL* holelist, <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>* viri, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;  <span class="keywordtype">void</span> retrievenewsubs(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newshlist, <span class="keywordtype">bool</span> removeseg);</div>
<div class="line"><a name="l01788"></a><span class="lineno"> 1788</span>&#160;  <span class="keywordtype">void</span> unifysegments();</div>
<div class="line"><a name="l01789"></a><span class="lineno"> 1789</span>&#160;  <span class="keywordtype">void</span> assignsegmentmarkers();</div>
<div class="line"><a name="l01790"></a><span class="lineno"> 1790</span>&#160;  <span class="keywordtype">void</span> mergefacets(<a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipqueue);</div>
<div class="line"><a name="l01791"></a><span class="lineno"> 1791</span>&#160;  <span class="keywordtype">long</span> meshsurface();</div>
<div class="line"><a name="l01792"></a><span class="lineno"> 1792</span>&#160;</div>
<div class="line"><a name="l01793"></a><span class="lineno"> 1793</span>&#160;  <span class="comment">// Detect intersecting facets of PLC.</span></div>
<div class="line"><a name="l01794"></a><span class="lineno"> 1794</span>&#160;  <span class="keywordtype">void</span> interecursive(shellface** subfacearray, <span class="keywordtype">int</span> arraysize, <span class="keywordtype">int</span> axis,</div>
<div class="line"><a name="l01795"></a><span class="lineno"> 1795</span>&#160;                     REAL bxmin, REAL bxmax, REAL bymin, REAL bymax,</div>
<div class="line"><a name="l01796"></a><span class="lineno"> 1796</span>&#160;                     REAL bzmin, REAL bzmax, <span class="keywordtype">int</span>* internum);</div>
<div class="line"><a name="l01797"></a><span class="lineno"> 1797</span>&#160;  <span class="keywordtype">void</span> detectinterfaces(); </div>
<div class="line"><a name="l01798"></a><span class="lineno"> 1798</span>&#160;</div>
<div class="line"><a name="l01800"></a><span class="lineno"> 1800</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01801"></a><span class="lineno"> 1801</span>&#160;<span class="comment">// Constrained Delaunay tetrahedralization functions                         //</span></div>
<div class="line"><a name="l01802"></a><span class="lineno"> 1802</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01804"></a><span class="lineno"> 1804</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01805"></a><span class="lineno"> 1805</span>&#160;  <span class="comment">// Segment recovery routines.</span></div>
<div class="line"><a name="l01806"></a><span class="lineno"> 1806</span>&#160;  <span class="keywordtype">void</span> markacutevertices(REAL acuteangle);</div>
<div class="line"><a name="l01807"></a><span class="lineno"> 1807</span>&#160;  <span class="keyword">enum</span> finddirectionresult finddirection(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, point, <span class="keywordtype">long</span>);</div>
<div class="line"><a name="l01808"></a><span class="lineno"> 1808</span>&#160;  <span class="keyword">enum</span> interresult finddirection2(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, point);</div>
<div class="line"><a name="l01809"></a><span class="lineno"> 1809</span>&#160;  <span class="keyword">enum</span> interresult finddirection3(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, point);</div>
<div class="line"><a name="l01810"></a><span class="lineno"> 1810</span>&#160;  <span class="keyword">enum</span> interresult scoutsegment2(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, point*);</div>
<div class="line"><a name="l01811"></a><span class="lineno"> 1811</span>&#160;  <span class="keywordtype">void</span> getsegmentsplitpoint2(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* sseg, point refpt, REAL* vt);</div>
<div class="line"><a name="l01812"></a><span class="lineno"> 1812</span>&#160;  <span class="keywordtype">void</span> getsegmentsplitpoint3(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* sseg, point refpt, REAL* vt);</div>
<div class="line"><a name="l01813"></a><span class="lineno"> 1813</span>&#160;  <span class="keywordtype">void</span> delaunizesegments2();</div>
<div class="line"><a name="l01814"></a><span class="lineno"> 1814</span>&#160;</div>
<div class="line"><a name="l01815"></a><span class="lineno"> 1815</span>&#160;  <span class="comment">// Facets recovery routines.</span></div>
<div class="line"><a name="l01816"></a><span class="lineno"> 1816</span>&#160;  <span class="keyword">enum</span> interresult scoutsubface(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* ssub, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, <span class="keywordtype">int</span>);</div>
<div class="line"><a name="l01817"></a><span class="lineno"> 1817</span>&#160;  <span class="keyword">enum</span> interresult scoutcrosstet(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* ssub, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01818"></a><span class="lineno"> 1818</span>&#160;  <span class="keywordtype">void</span> recoversubfacebyflips(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* pssub, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* crossface, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01819"></a><span class="lineno"> 1819</span>&#160;  <span class="keywordtype">void</span> formcavity(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, </div>
<div class="line"><a name="l01820"></a><span class="lineno"> 1820</span>&#160;                  <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01821"></a><span class="lineno"> 1821</span>&#160;  <span class="keywordtype">bool</span> delaunizecavity(<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*,</div>
<div class="line"><a name="l01822"></a><span class="lineno"> 1822</span>&#160;                       <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01823"></a><span class="lineno"> 1823</span>&#160;  <span class="keywordtype">bool</span> fillcavity(<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01824"></a><span class="lineno"> 1824</span>&#160;  <span class="keywordtype">void</span> carvecavity(<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01825"></a><span class="lineno"> 1825</span>&#160;  <span class="keywordtype">void</span> restorecavity(<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01826"></a><span class="lineno"> 1826</span>&#160;  <span class="keywordtype">void</span> splitsubedge(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*, <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a>*);</div>
<div class="line"><a name="l01827"></a><span class="lineno"> 1827</span>&#160;  <span class="keywordtype">void</span> constrainedfacets2();</div>
<div class="line"><a name="l01828"></a><span class="lineno"> 1828</span>&#160;</div>
<div class="line"><a name="l01829"></a><span class="lineno"> 1829</span>&#160;  <span class="keywordtype">void</span> formskeleton(clock_t&amp;);</div>
<div class="line"><a name="l01830"></a><span class="lineno"> 1830</span>&#160;</div>
<div class="line"><a name="l01831"></a><span class="lineno"> 1831</span>&#160;  <span class="comment">// Carving out holes and concavities routines.</span></div>
<div class="line"><a name="l01832"></a><span class="lineno"> 1832</span>&#160;  <span class="keywordtype">void</span> infecthull(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *viri);</div>
<div class="line"><a name="l01833"></a><span class="lineno"> 1833</span>&#160;  <span class="keywordtype">void</span> plague(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *viri);</div>
<div class="line"><a name="l01834"></a><span class="lineno"> 1834</span>&#160;  <span class="keywordtype">void</span> regionplague(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *viri, REAL attribute, REAL volume);</div>
<div class="line"><a name="l01835"></a><span class="lineno"> 1835</span>&#160;  <span class="keywordtype">void</span> removeholetets(<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *viri);</div>
<div class="line"><a name="l01836"></a><span class="lineno"> 1836</span>&#160;  <span class="keywordtype">void</span> assignregionattribs();</div>
<div class="line"><a name="l01837"></a><span class="lineno"> 1837</span>&#160;  <span class="keywordtype">void</span> carveholes();</div>
<div class="line"><a name="l01838"></a><span class="lineno"> 1838</span>&#160;</div>
<div class="line"><a name="l01840"></a><span class="lineno"> 1840</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01841"></a><span class="lineno"> 1841</span>&#160;<span class="comment">// Steiner points removal functions                                          //</span></div>
<div class="line"><a name="l01842"></a><span class="lineno"> 1842</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01844"></a><span class="lineno"> 1844</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01845"></a><span class="lineno"> 1845</span>&#160;  <span class="keywordtype">void</span> initializecavity(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* floorlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ceillist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* frontlist,</div>
<div class="line"><a name="l01846"></a><span class="lineno"> 1846</span>&#160;                        <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ptlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* gluelist);</div>
<div class="line"><a name="l01847"></a><span class="lineno"> 1847</span>&#160;  <span class="keywordtype">bool</span> delaunizecavvertices(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01848"></a><span class="lineno"> 1848</span>&#160;  <span class="keywordtype">void</span> retrievenewtets(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newtetlist);</div>
<div class="line"><a name="l01849"></a><span class="lineno"> 1849</span>&#160;  <span class="keywordtype">void</span> insertauxsubface(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* front, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* idfront);</div>
<div class="line"><a name="l01850"></a><span class="lineno"> 1850</span>&#160;  <span class="keywordtype">bool</span> scoutfront(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* front, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* idfront);</div>
<div class="line"><a name="l01851"></a><span class="lineno"> 1851</span>&#160;  <span class="keywordtype">void</span> gluefronts(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* front, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* front1, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* gluetetlist,</div>
<div class="line"><a name="l01852"></a><span class="lineno"> 1852</span>&#160;                  <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* glueshlist);</div>
<div class="line"><a name="l01853"></a><span class="lineno"> 1853</span>&#160;  <span class="keywordtype">bool</span> identifyfronts(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* frontlist,<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* misfrontlist,<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* gluetetlist,</div>
<div class="line"><a name="l01854"></a><span class="lineno"> 1854</span>&#160;                      <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* glueshlist);</div>
<div class="line"><a name="l01855"></a><span class="lineno"> 1855</span>&#160;  <span class="keywordtype">void</span> detachauxsubfaces(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newtetlist);</div>
<div class="line"><a name="l01856"></a><span class="lineno"> 1856</span>&#160;  <span class="keywordtype">bool</span> carvecavity(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newtetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* outtetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* gluetetlist,</div>
<div class="line"><a name="l01857"></a><span class="lineno"> 1857</span>&#160;                   <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipque);</div>
<div class="line"><a name="l01858"></a><span class="lineno"> 1858</span>&#160;</div>
<div class="line"><a name="l01859"></a><span class="lineno"> 1859</span>&#160;  <span class="keywordtype">void</span> replacepolygonsubs(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* oldshlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newshlist);</div>
<div class="line"><a name="l01860"></a><span class="lineno"> 1860</span>&#160;  <span class="keywordtype">void</span> orientnewsubs(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newshlist, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* orientsh, REAL* norm);</div>
<div class="line"><a name="l01861"></a><span class="lineno"> 1861</span>&#160;  <span class="keywordtype">bool</span> registerelemflip(<span class="keyword">enum</span> fliptype ft, point pa1, point pb1, point pc1,</div>
<div class="line"><a name="l01862"></a><span class="lineno"> 1862</span>&#160;                        point pa2, point pb2, point pc2);</div>
<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;  <span class="keywordtype">bool</span> check4fixededge(point pa, point pb);</div>
<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;  <span class="keywordtype">bool</span> removeedgebyflips(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* remedge, <span class="keywordtype">int</span>*);</div>
<div class="line"><a name="l01865"></a><span class="lineno"> 1865</span>&#160;  <span class="keywordtype">bool</span> removefacebyflips(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* remface, <span class="keywordtype">int</span>*);</div>
<div class="line"><a name="l01866"></a><span class="lineno"> 1866</span>&#160;  <span class="keywordtype">bool</span> recoveredgebyflips(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* searchtet, point pb, <span class="keywordtype">int</span>*);</div>
<div class="line"><a name="l01867"></a><span class="lineno"> 1867</span>&#160;  <span class="keywordtype">bool</span> recoverfacebyflips(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* front, <span class="keywordtype">int</span>*);</div>
<div class="line"><a name="l01868"></a><span class="lineno"> 1868</span>&#160;  <span class="keywordtype">bool</span> constrainedcavity(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* oldtet, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* floorlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ceillist,</div>
<div class="line"><a name="l01869"></a><span class="lineno"> 1869</span>&#160;                         <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ptlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* frontlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* misfrontlist,</div>
<div class="line"><a name="l01870"></a><span class="lineno"> 1870</span>&#160;                         <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newtetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* gluetetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* glueshlist,</div>
<div class="line"><a name="l01871"></a><span class="lineno"> 1871</span>&#160;                         <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipque);</div>
<div class="line"><a name="l01872"></a><span class="lineno"> 1872</span>&#160;  <span class="keywordtype">bool</span> findrelocatepoint2(point sp, point np, REAL* n, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*);</div>
<div class="line"><a name="l01873"></a><span class="lineno"> 1873</span>&#160;  <span class="keywordtype">bool</span> relocatepoint(point steinpt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* oldtet, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01874"></a><span class="lineno"> 1874</span>&#160;  <span class="keywordtype">bool</span> findcollapseedge(point suppt, point* conpt, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* oldtetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*);</div>
<div class="line"><a name="l01875"></a><span class="lineno"> 1875</span>&#160;  <span class="keywordtype">void</span> collapseedge(point suppt, point conpt, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* oldtetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*);</div>
<div class="line"><a name="l01876"></a><span class="lineno"> 1876</span>&#160;  <span class="keywordtype">void</span> deallocfaketets(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* frontlist);</div>
<div class="line"><a name="l01877"></a><span class="lineno"> 1877</span>&#160;  <span class="keywordtype">void</span> restorepolyhedron(<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* oldtetlist);</div>
<div class="line"><a name="l01878"></a><span class="lineno"> 1878</span>&#160;  <span class="keywordtype">bool</span> suppressfacetpoint(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* supsh, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* frontlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* misfrontlist,</div>
<div class="line"><a name="l01879"></a><span class="lineno"> 1879</span>&#160;                          <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ptlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* conlist, <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>* viri,</div>
<div class="line"><a name="l01880"></a><span class="lineno"> 1880</span>&#160;                          <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipque, <span class="keywordtype">bool</span> noreloc, <span class="keywordtype">bool</span> optflag);</div>
<div class="line"><a name="l01881"></a><span class="lineno"> 1881</span>&#160;  <span class="keywordtype">bool</span> suppresssegpoint(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* supseg, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* spinshlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* newsegshlist,</div>
<div class="line"><a name="l01882"></a><span class="lineno"> 1882</span>&#160;                        <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* frontlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* misfrontlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ptlist,</div>
<div class="line"><a name="l01883"></a><span class="lineno"> 1883</span>&#160;                        <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* conlist, <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a>* viri, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipque,</div>
<div class="line"><a name="l01884"></a><span class="lineno"> 1884</span>&#160;                        <span class="keywordtype">bool</span> noreloc, <span class="keywordtype">bool</span> optflag);</div>
<div class="line"><a name="l01885"></a><span class="lineno"> 1885</span>&#160;  <span class="keywordtype">bool</span> suppressvolpoint(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* suptet, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* frontlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* misfrontlist,</div>
<div class="line"><a name="l01886"></a><span class="lineno"> 1886</span>&#160;                        <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ptlist, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>* flipque, <span class="keywordtype">bool</span> optflag);</div>
<div class="line"><a name="l01887"></a><span class="lineno"> 1887</span>&#160;  <span class="keywordtype">void</span> removesteiners2();</div>
<div class="line"><a name="l01888"></a><span class="lineno"> 1888</span>&#160;</div>
<div class="line"><a name="l01890"></a><span class="lineno"> 1890</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01891"></a><span class="lineno"> 1891</span>&#160;<span class="comment">// Mesh rebuild functions                                                    //</span></div>
<div class="line"><a name="l01892"></a><span class="lineno"> 1892</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01894"></a><span class="lineno"> 1894</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01895"></a><span class="lineno"> 1895</span>&#160;  <span class="keywordtype">void</span> transfernodes();</div>
<div class="line"><a name="l01896"></a><span class="lineno"> 1896</span>&#160;  <span class="keywordtype">long</span> reconstructmesh();</div>
<div class="line"><a name="l01897"></a><span class="lineno"> 1897</span>&#160;  <span class="keywordtype">void</span> insertconstrainedpoints(<a class="code" href="classtetgenio.xhtml">tetgenio</a> *addio);</div>
<div class="line"><a name="l01898"></a><span class="lineno"> 1898</span>&#160;  <span class="keywordtype">bool</span> p1interpolatebgm(point pt, <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* bgmtet, <span class="keywordtype">long</span> *scount);</div>
<div class="line"><a name="l01899"></a><span class="lineno"> 1899</span>&#160;  <span class="keywordtype">void</span> interpolatesizemap();</div>
<div class="line"><a name="l01900"></a><span class="lineno"> 1900</span>&#160;  <span class="keywordtype">void</span> duplicatebgmesh();</div>
<div class="line"><a name="l01901"></a><span class="lineno"> 1901</span>&#160;</div>
<div class="line"><a name="l01903"></a><span class="lineno"> 1903</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01904"></a><span class="lineno"> 1904</span>&#160;<span class="comment">// Mesh refinement functions                                                 //</span></div>
<div class="line"><a name="l01905"></a><span class="lineno"> 1905</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01907"></a><span class="lineno"> 1907</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01908"></a><span class="lineno"> 1908</span>&#160;  <span class="keywordtype">void</span> marksharpsegments(REAL sharpangle);</div>
<div class="line"><a name="l01909"></a><span class="lineno"> 1909</span>&#160;  <span class="keywordtype">void</span> decidefeaturepointsizes();</div>
<div class="line"><a name="l01910"></a><span class="lineno"> 1910</span>&#160;  <span class="keywordtype">void</span> enqueueencsub(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* ss, point encpt, <span class="keywordtype">int</span> quenumber, REAL* cent);</div>
<div class="line"><a name="l01911"></a><span class="lineno"> 1911</span>&#160;  <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>* dequeueencsub(<span class="keywordtype">int</span>* quenumber);</div>
<div class="line"><a name="l01912"></a><span class="lineno"> 1912</span>&#160;  <span class="keywordtype">void</span> enqueuebadtet(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* tt, REAL key, REAL* cent);</div>
<div class="line"><a name="l01913"></a><span class="lineno"> 1913</span>&#160;  <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>* topbadtetra();</div>
<div class="line"><a name="l01914"></a><span class="lineno"> 1914</span>&#160;  <span class="keywordtype">void</span> dequeuebadtet();</div>
<div class="line"><a name="l01915"></a><span class="lineno"> 1915</span>&#160;  <span class="keywordtype">bool</span> checkseg4encroach(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* testseg, point testpt, point*, <span class="keywordtype">bool</span> enqflag);</div>
<div class="line"><a name="l01916"></a><span class="lineno"> 1916</span>&#160;  <span class="keywordtype">bool</span> checksub4encroach(<a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* testsub, point testpt, <span class="keywordtype">bool</span> enqflag);</div>
<div class="line"><a name="l01917"></a><span class="lineno"> 1917</span>&#160;  <span class="keywordtype">bool</span> checktet4badqual(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* testtet, <span class="keywordtype">bool</span> enqflag);</div>
<div class="line"><a name="l01918"></a><span class="lineno"> 1918</span>&#160;  <span class="keywordtype">bool</span> acceptsegpt(point segpt, point refpt, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>* splitseg);</div>
<div class="line"><a name="l01919"></a><span class="lineno"> 1919</span>&#160;  <span class="keywordtype">bool</span> acceptfacpt(point facpt, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* subceillist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* verlist);</div>
<div class="line"><a name="l01920"></a><span class="lineno"> 1920</span>&#160;  <span class="keywordtype">bool</span> acceptvolpt(point volpt, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* ceillist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>* verlist);</div>
<div class="line"><a name="l01921"></a><span class="lineno"> 1921</span>&#160;  <span class="keywordtype">void</span> getsplitpoint(point e1, point e2, point refpt, point newpt);</div>
<div class="line"><a name="l01922"></a><span class="lineno"> 1922</span>&#160;  <span class="keywordtype">void</span> setnewpointsize(point newpt, point e1, point e2);</div>
<div class="line"><a name="l01923"></a><span class="lineno"> 1923</span>&#160;  <span class="keywordtype">bool</span> splitencseg(point, <a class="code" href="classtetgenmesh_1_1face.xhtml">face</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*,<a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*,<span class="keywordtype">bool</span>,<span class="keywordtype">bool</span>,<span class="keywordtype">bool</span>);</div>
<div class="line"><a name="l01924"></a><span class="lineno"> 1924</span>&#160;  <span class="keywordtype">bool</span> tallencsegs(point testpt, <span class="keywordtype">int</span> n, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** ceillists);</div>
<div class="line"><a name="l01925"></a><span class="lineno"> 1925</span>&#160;  <span class="keywordtype">bool</span> tallencsubs(point testpt, <span class="keywordtype">int</span> n, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>** ceillists);</div>
<div class="line"><a name="l01926"></a><span class="lineno"> 1926</span>&#160;  <span class="keywordtype">void</span> tallbadtetrahedrons();</div>
<div class="line"><a name="l01927"></a><span class="lineno"> 1927</span>&#160;  <span class="keywordtype">void</span> repairencsegs(<span class="keywordtype">bool</span> chkencsub, <span class="keywordtype">bool</span> chkbadtet);</div>
<div class="line"><a name="l01928"></a><span class="lineno"> 1928</span>&#160;  <span class="keywordtype">void</span> repairencsubs(<span class="keywordtype">bool</span> chkbadtet);</div>
<div class="line"><a name="l01929"></a><span class="lineno"> 1929</span>&#160;  <span class="keywordtype">void</span> repairbadtets();</div>
<div class="line"><a name="l01930"></a><span class="lineno"> 1930</span>&#160;  <span class="keywordtype">void</span> enforcequality();</div>
<div class="line"><a name="l01931"></a><span class="lineno"> 1931</span>&#160;</div>
<div class="line"><a name="l01933"></a><span class="lineno"> 1933</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;<span class="comment">// Mesh optimization routines                                                //</span></div>
<div class="line"><a name="l01935"></a><span class="lineno"> 1935</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01937"></a><span class="lineno"> 1937</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01938"></a><span class="lineno"> 1938</span>&#160;  <span class="keywordtype">bool</span> checktet4ill(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* testtet, <span class="keywordtype">bool</span> enqflag);</div>
<div class="line"><a name="l01939"></a><span class="lineno"> 1939</span>&#160;  <span class="keywordtype">bool</span> checktet4opt(<a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a>* testtet, <span class="keywordtype">bool</span> enqflag);</div>
<div class="line"><a name="l01940"></a><span class="lineno"> 1940</span>&#160;  <span class="keywordtype">bool</span> removeedge(<a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>* remedge, <span class="keywordtype">bool</span> optflag);</div>
<div class="line"><a name="l01941"></a><span class="lineno"> 1941</span>&#160;  <span class="keywordtype">bool</span> smoothpoint(point smthpt, point, point, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a>*, <span class="keywordtype">bool</span>, REAL*);</div>
<div class="line"><a name="l01942"></a><span class="lineno"> 1942</span>&#160;  <span class="keywordtype">bool</span> smoothsliver(<a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>* remedge, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a> *starlist);</div>
<div class="line"><a name="l01943"></a><span class="lineno"> 1943</span>&#160;  <span class="keywordtype">bool</span> splitsliver(<a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a>* remedge, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a> *tetlist, <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a> *ceillist);</div>
<div class="line"><a name="l01944"></a><span class="lineno"> 1944</span>&#160;  <span class="keywordtype">void</span> tallslivers(<span class="keywordtype">bool</span> optflag);</div>
<div class="line"><a name="l01945"></a><span class="lineno"> 1945</span>&#160;  <span class="keywordtype">void</span> optimizemesh2(<span class="keywordtype">bool</span> optflag);</div>
<div class="line"><a name="l01946"></a><span class="lineno"> 1946</span>&#160;</div>
<div class="line"><a name="l01948"></a><span class="lineno"> 1948</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01949"></a><span class="lineno"> 1949</span>&#160;<span class="comment">// Mesh output functions                                                     //</span></div>
<div class="line"><a name="l01950"></a><span class="lineno"> 1950</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01952"></a><span class="lineno"> 1952</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01953"></a><span class="lineno"> 1953</span>&#160;  <span class="keywordtype">void</span> jettisonnodes();</div>
<div class="line"><a name="l01954"></a><span class="lineno"> 1954</span>&#160;  <span class="keywordtype">void</span> highorder();</div>
<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;  <span class="keywordtype">void</span> numberedges();</div>
<div class="line"><a name="l01956"></a><span class="lineno"> 1956</span>&#160;  <span class="keywordtype">void</span> outnodes(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01957"></a><span class="lineno"> 1957</span>&#160;  <span class="keywordtype">void</span> outmetrics(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01958"></a><span class="lineno"> 1958</span>&#160;  <span class="keywordtype">void</span> outelements(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01959"></a><span class="lineno"> 1959</span>&#160;  <span class="keywordtype">void</span> outfaces(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01960"></a><span class="lineno"> 1960</span>&#160;  <span class="keywordtype">void</span> outhullfaces(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01961"></a><span class="lineno"> 1961</span>&#160;  <span class="keywordtype">void</span> outsubfaces(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;  <span class="keywordtype">void</span> outedges(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01963"></a><span class="lineno"> 1963</span>&#160;  <span class="keywordtype">void</span> outsubsegments(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01964"></a><span class="lineno"> 1964</span>&#160;  <span class="keywordtype">void</span> outneighbors(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01965"></a><span class="lineno"> 1965</span>&#160;  <span class="keywordtype">void</span> outvoronoi(<a class="code" href="classtetgenio.xhtml">tetgenio</a>*);</div>
<div class="line"><a name="l01966"></a><span class="lineno"> 1966</span>&#160;  <span class="keywordtype">void</span> outsmesh(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l01967"></a><span class="lineno"> 1967</span>&#160;  <span class="keywordtype">void</span> outmesh2medit(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l01968"></a><span class="lineno"> 1968</span>&#160;  <span class="keywordtype">void</span> outmesh2gid(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l01969"></a><span class="lineno"> 1969</span>&#160;  <span class="keywordtype">void</span> outmesh2off(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l01970"></a><span class="lineno"> 1970</span>&#160;  <span class="keywordtype">void</span> outmesh2vtk(<span class="keywordtype">char</span>*);</div>
<div class="line"><a name="l01971"></a><span class="lineno"> 1971</span>&#160;</div>
<div class="line"><a name="l01973"></a><span class="lineno"> 1973</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;<span class="comment">// Mesh check functions                                                      //</span></div>
<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01977"></a><span class="lineno"> 1977</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01978"></a><span class="lineno"> 1978</span>&#160;  <span class="keywordtype">int</span> checkmesh();</div>
<div class="line"><a name="l01979"></a><span class="lineno"> 1979</span>&#160;  <span class="keywordtype">int</span> checkshells();</div>
<div class="line"><a name="l01980"></a><span class="lineno"> 1980</span>&#160;  <span class="keywordtype">int</span> checksegments();</div>
<div class="line"><a name="l01981"></a><span class="lineno"> 1981</span>&#160;  <span class="keywordtype">int</span> checkdelaunay(REAL, <a class="code" href="classtetgenmesh_1_1queue.xhtml">queue</a>*);</div>
<div class="line"><a name="l01982"></a><span class="lineno"> 1982</span>&#160;  <span class="keywordtype">void</span> checkconforming();</div>
<div class="line"><a name="l01983"></a><span class="lineno"> 1983</span>&#160;  <span class="keywordtype">void</span> algorithmicstatistics();</div>
<div class="line"><a name="l01984"></a><span class="lineno"> 1984</span>&#160;  <span class="keywordtype">void</span> qualitystatistics();</div>
<div class="line"><a name="l01985"></a><span class="lineno"> 1985</span>&#160;  <span class="keywordtype">void</span> statistics();</div>
<div class="line"><a name="l01986"></a><span class="lineno"> 1986</span>&#160;</div>
<div class="line"><a name="l01988"></a><span class="lineno"> 1988</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01989"></a><span class="lineno"> 1989</span>&#160;<span class="comment">// Debug functions                                                           //</span></div>
<div class="line"><a name="l01990"></a><span class="lineno"> 1990</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l01992"></a><span class="lineno"> 1992</span>&#160;<span class="comment"></span>  <span class="comment">/*</span></div>
<div class="line"><a name="l01993"></a><span class="lineno"> 1993</span>&#160;<span class="comment">  void ptet(triface* t);</span></div>
<div class="line"><a name="l01994"></a><span class="lineno"> 1994</span>&#160;<span class="comment">  void psh(face* s);</span></div>
<div class="line"><a name="l01995"></a><span class="lineno"> 1995</span>&#160;<span class="comment">  int pteti(int i, int j, int k, int l);</span></div>
<div class="line"><a name="l01996"></a><span class="lineno"> 1996</span>&#160;<span class="comment">  void pface(int i, int j, int k);</span></div>
<div class="line"><a name="l01997"></a><span class="lineno"> 1997</span>&#160;<span class="comment">  bool pedge(int i, int j);</span></div>
<div class="line"><a name="l01998"></a><span class="lineno"> 1998</span>&#160;<span class="comment">  int psubface(int i, int j, int k);</span></div>
<div class="line"><a name="l01999"></a><span class="lineno"> 1999</span>&#160;<span class="comment">  void psubseg(int i, int j);</span></div>
<div class="line"><a name="l02000"></a><span class="lineno"> 2000</span>&#160;<span class="comment">  int pmark(point p);</span></div>
<div class="line"><a name="l02001"></a><span class="lineno"> 2001</span>&#160;<span class="comment">  void pvert(point p);</span></div>
<div class="line"><a name="l02002"></a><span class="lineno"> 2002</span>&#160;<span class="comment">  int pverti(int i);</span></div>
<div class="line"><a name="l02003"></a><span class="lineno"> 2003</span>&#160;<span class="comment">  REAL test_orient3d(int i, int j, int k, int l);</span></div>
<div class="line"><a name="l02004"></a><span class="lineno"> 2004</span>&#160;<span class="comment">  REAL test_insphere(int i, int j, int k, int l, int m);</span></div>
<div class="line"><a name="l02005"></a><span class="lineno"> 2005</span>&#160;<span class="comment">  REAL test_insphere_s(int i, int j, int k, int l, int m);</span></div>
<div class="line"><a name="l02006"></a><span class="lineno"> 2006</span>&#160;<span class="comment">  void print_tetarray(arraypool* tetarray);</span></div>
<div class="line"><a name="l02007"></a><span class="lineno"> 2007</span>&#160;<span class="comment">  void print_tetlist(list* tetlist);</span></div>
<div class="line"><a name="l02008"></a><span class="lineno"> 2008</span>&#160;<span class="comment">  void print_facearray(arraypool* facearray);</span></div>
<div class="line"><a name="l02009"></a><span class="lineno"> 2009</span>&#160;<span class="comment">  void print_facelist(list* facelist);</span></div>
<div class="line"><a name="l02010"></a><span class="lineno"> 2010</span>&#160;<span class="comment">  void print_subfacearray(arraypool* subfacearray);</span></div>
<div class="line"><a name="l02011"></a><span class="lineno"> 2011</span>&#160;<span class="comment">  void print_subfacelist(list* subfacelist);</span></div>
<div class="line"><a name="l02012"></a><span class="lineno"> 2012</span>&#160;<span class="comment">  void dump_facetof(face* pssub);</span></div>
<div class="line"><a name="l02013"></a><span class="lineno"> 2013</span>&#160;<span class="comment">  void print_fliptetlist(triface *fliptet);</span></div>
<div class="line"><a name="l02014"></a><span class="lineno"> 2014</span>&#160;<span class="comment">  void print_deaditemstack(void* deaditemstack);</span></div>
<div class="line"><a name="l02015"></a><span class="lineno"> 2015</span>&#160;<span class="comment">  int check_deaditemstack(void* deaditemstack, uintptr_t addr);</span></div>
<div class="line"><a name="l02016"></a><span class="lineno"> 2016</span>&#160;<span class="comment">  void print_abtetlist(triface *abtetlist, int len);</span></div>
<div class="line"><a name="l02017"></a><span class="lineno"> 2017</span>&#160;<span class="comment">  int checkpoint2tetmap();</span></div>
<div class="line"><a name="l02018"></a><span class="lineno"> 2018</span>&#160;<span class="comment">  int checkpoint2submap();</span></div>
<div class="line"><a name="l02019"></a><span class="lineno"> 2019</span>&#160;<span class="comment">  int checkpoint2segmap();</span></div>
<div class="line"><a name="l02020"></a><span class="lineno"> 2020</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l02022"></a><span class="lineno"> 2022</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02023"></a><span class="lineno"> 2023</span>&#160;<span class="comment">// Class variables                                                           //</span></div>
<div class="line"><a name="l02024"></a><span class="lineno"> 2024</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02026"></a><span class="lineno"> 2026</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02027"></a><span class="lineno"> 2027</span>&#160;  <span class="comment">// Pointer to the input data (a set of nodes, a PLC, or a mesh).</span></div>
<div class="line"><a name="l02028"></a><span class="lineno"> 2028</span>&#160;  <a class="code" href="classtetgenio.xhtml">tetgenio</a> *in;</div>
<div class="line"><a name="l02029"></a><span class="lineno"> 2029</span>&#160;</div>
<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;  <span class="comment">// Pointer to the options (and filenames).</span></div>
<div class="line"><a name="l02031"></a><span class="lineno"> 2031</span>&#160;  <a class="code" href="classtetgenbehavior.xhtml">tetgenbehavior</a> *b;</div>
<div class="line"><a name="l02032"></a><span class="lineno"> 2032</span>&#160;</div>
<div class="line"><a name="l02033"></a><span class="lineno"> 2033</span>&#160;  <span class="comment">// Pointer to a background mesh (contains size specification map).</span></div>
<div class="line"><a name="l02034"></a><span class="lineno"> 2034</span>&#160;  <a class="code" href="classtetgenmesh.xhtml">tetgenmesh</a> *bgm;</div>
<div class="line"><a name="l02035"></a><span class="lineno"> 2035</span>&#160;</div>
<div class="line"><a name="l02036"></a><span class="lineno"> 2036</span>&#160;  <span class="comment">// Variables used to allocate and access memory for tetrahedra, subfaces</span></div>
<div class="line"><a name="l02037"></a><span class="lineno"> 2037</span>&#160;  <span class="comment">//   subsegments, points, encroached subfaces, encroached subsegments,</span></div>
<div class="line"><a name="l02038"></a><span class="lineno"> 2038</span>&#160;  <span class="comment">//   bad-quality tetrahedra, and so on.</span></div>
<div class="line"><a name="l02039"></a><span class="lineno"> 2039</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *tetrahedrons;</div>
<div class="line"><a name="l02040"></a><span class="lineno"> 2040</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *subfaces;</div>
<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *subsegs;</div>
<div class="line"><a name="l02042"></a><span class="lineno"> 2042</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *points;</div>
<div class="line"><a name="l02043"></a><span class="lineno"> 2043</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *badsubsegs;</div>
<div class="line"><a name="l02044"></a><span class="lineno"> 2044</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *badsubfaces;</div>
<div class="line"><a name="l02045"></a><span class="lineno"> 2045</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *badtetrahedrons;</div>
<div class="line"><a name="l02046"></a><span class="lineno"> 2046</span>&#160;  <a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *tet2segpool, *tet2subpool;</div>
<div class="line"><a name="l02047"></a><span class="lineno"> 2047</span>&#160;</div>
<div class="line"><a name="l02048"></a><span class="lineno"> 2048</span>&#160;  <span class="comment">// Pointer to the &#39;tetrahedron&#39; that occupies all of &quot;outer space&quot;.</span></div>
<div class="line"><a name="l02049"></a><span class="lineno"> 2049</span>&#160;  tetrahedron *dummytet;</div>
<div class="line"><a name="l02050"></a><span class="lineno"> 2050</span>&#160;  tetrahedron *dummytetbase; <span class="comment">// Keep base address so we can free it later.</span></div>
<div class="line"><a name="l02051"></a><span class="lineno"> 2051</span>&#160;</div>
<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;  <span class="comment">// Pointer to the omnipresent subface.  Referenced by any tetrahedron,</span></div>
<div class="line"><a name="l02053"></a><span class="lineno"> 2053</span>&#160;  <span class="comment">//   or subface that isn&#39;t connected to a subface at that location.</span></div>
<div class="line"><a name="l02054"></a><span class="lineno"> 2054</span>&#160;  shellface *dummysh;</div>
<div class="line"><a name="l02055"></a><span class="lineno"> 2055</span>&#160;  shellface *dummyshbase;    <span class="comment">// Keep base address so we can free it later.</span></div>
<div class="line"><a name="l02056"></a><span class="lineno"> 2056</span>&#160;</div>
<div class="line"><a name="l02057"></a><span class="lineno"> 2057</span>&#160;  <span class="comment">// Entry to find the binary tree nodes (-u option).</span></div>
<div class="line"><a name="l02058"></a><span class="lineno"> 2058</span>&#160;  <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *btreenode_list;</div>
<div class="line"><a name="l02059"></a><span class="lineno"> 2059</span>&#160;  <span class="comment">// The maximum size of a btree node (number after -u option) is</span></div>
<div class="line"><a name="l02060"></a><span class="lineno"> 2060</span>&#160;  <span class="keywordtype">int</span> max_btreenode_size; <span class="comment">// &lt;= b-&gt;max_btreenode_size.</span></div>
<div class="line"><a name="l02061"></a><span class="lineno"> 2061</span>&#160;  <span class="comment">// The maximum btree depth (for bookkeeping).</span></div>
<div class="line"><a name="l02062"></a><span class="lineno"> 2062</span>&#160;  <span class="keywordtype">int</span> max_btree_depth; </div>
<div class="line"><a name="l02063"></a><span class="lineno"> 2063</span>&#160;</div>
<div class="line"><a name="l02064"></a><span class="lineno"> 2064</span>&#160;  <span class="comment">// Arrays used by Bowyer-Watson algorithm.</span></div>
<div class="line"><a name="l02065"></a><span class="lineno"> 2065</span>&#160;  <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *cavetetlist, *cavebdrylist, *caveoldtetlist;</div>
<div class="line"><a name="l02066"></a><span class="lineno"> 2066</span>&#160;  <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *caveshlist, *caveshbdlist;</div>
<div class="line"><a name="l02067"></a><span class="lineno"> 2067</span>&#160;  <span class="comment">// Stacks used by the boundary recovery algorithm.</span></div>
<div class="line"><a name="l02068"></a><span class="lineno"> 2068</span>&#160;  <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *subsegstack, *subfacstack;</div>
<div class="line"><a name="l02069"></a><span class="lineno"> 2069</span>&#160;</div>
<div class="line"><a name="l02070"></a><span class="lineno"> 2070</span>&#160;  <span class="comment">// Two handles used in constrained facet recovery.</span></div>
<div class="line"><a name="l02071"></a><span class="lineno"> 2071</span>&#160;  <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a> firsttopface, firstbotface;</div>
<div class="line"><a name="l02072"></a><span class="lineno"> 2072</span>&#160;</div>
<div class="line"><a name="l02073"></a><span class="lineno"> 2073</span>&#160;  <span class="comment">// An array for registering elementary flips.</span></div>
<div class="line"><a name="l02074"></a><span class="lineno"> 2074</span>&#160;  <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *elemfliplist;</div>
<div class="line"><a name="l02075"></a><span class="lineno"> 2075</span>&#160;</div>
<div class="line"><a name="l02076"></a><span class="lineno"> 2076</span>&#160;  <span class="comment">// An array of fixed edges for facet recovering by flips.</span></div>
<div class="line"><a name="l02077"></a><span class="lineno"> 2077</span>&#160;  <a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *fixededgelist;</div>
<div class="line"><a name="l02078"></a><span class="lineno"> 2078</span>&#160;</div>
<div class="line"><a name="l02079"></a><span class="lineno"> 2079</span>&#160;  <span class="comment">// A point above the plane in which the facet currently being used lies.</span></div>
<div class="line"><a name="l02080"></a><span class="lineno"> 2080</span>&#160;  <span class="comment">//   It is used as a reference point for orient3d().</span></div>
<div class="line"><a name="l02081"></a><span class="lineno"> 2081</span>&#160;  point *facetabovepointarray, abovepoint, dummypoint;</div>
<div class="line"><a name="l02082"></a><span class="lineno"> 2082</span>&#160;</div>
<div class="line"><a name="l02083"></a><span class="lineno"> 2083</span>&#160;  <span class="comment">// Array (size = numberoftetrahedra * 6) for storing high-order nodes of</span></div>
<div class="line"><a name="l02084"></a><span class="lineno"> 2084</span>&#160;  <span class="comment">//   tetrahedra (only used when -o2 switch is selected).</span></div>
<div class="line"><a name="l02085"></a><span class="lineno"> 2085</span>&#160;  point *highordertable;</div>
<div class="line"><a name="l02086"></a><span class="lineno"> 2086</span>&#160;</div>
<div class="line"><a name="l02087"></a><span class="lineno"> 2087</span>&#160;  <span class="comment">// Arrays for storing and searching pbc data. &#39;subpbcgrouptable&#39;, (size</span></div>
<div class="line"><a name="l02088"></a><span class="lineno"> 2088</span>&#160;  <span class="comment">//   is numberofpbcgroups) for pbcgroup of subfaces. &#39;segpbcgrouptable&#39;,</span></div>
<div class="line"><a name="l02089"></a><span class="lineno"> 2089</span>&#160;  <span class="comment">//   a list for pbcgroup of segments. Because a segment can have several</span></div>
<div class="line"><a name="l02090"></a><span class="lineno"> 2090</span>&#160;  <span class="comment">//   pbcgroup incident on it, its size is unknown on input, it will be</span></div>
<div class="line"><a name="l02091"></a><span class="lineno"> 2091</span>&#160;  <span class="comment">//   found in &#39;createsegpbcgrouptable()&#39;.</span></div>
<div class="line"><a name="l02092"></a><span class="lineno"> 2092</span>&#160;  <a class="code" href="structtetgenmesh_1_1pbcdata.xhtml">pbcdata</a> *subpbcgrouptable;</div>
<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;  <a class="code" href="classtetgenmesh_1_1list.xhtml">list</a> *segpbcgrouptable;</div>
<div class="line"><a name="l02094"></a><span class="lineno"> 2094</span>&#160;  <span class="comment">// A map for searching the pbcgroups of a given segment. &#39;idx2segpglist&#39;</span></div>
<div class="line"><a name="l02095"></a><span class="lineno"> 2095</span>&#160;  <span class="comment">//   (size = number of input segments + 1), and &#39;segpglist&#39;.  </span></div>
<div class="line"><a name="l02096"></a><span class="lineno"> 2096</span>&#160;  <span class="keywordtype">int</span> *idx2segpglist, *segpglist;</div>
<div class="line"><a name="l02097"></a><span class="lineno"> 2097</span>&#160;</div>
<div class="line"><a name="l02098"></a><span class="lineno"> 2098</span>&#160;  <span class="comment">// Queues that maintain the bad (badly-shaped or too large) tetrahedra.</span></div>
<div class="line"><a name="l02099"></a><span class="lineno"> 2099</span>&#160;  <span class="comment">//   The tails are pointers to the pointers that have to be filled in to</span></div>
<div class="line"><a name="l02100"></a><span class="lineno"> 2100</span>&#160;  <span class="comment">//   enqueue an item.  The queues are ordered from 63 (highest priority)</span></div>
<div class="line"><a name="l02101"></a><span class="lineno"> 2101</span>&#160;  <span class="comment">//   to 0 (lowest priority).</span></div>
<div class="line"><a name="l02102"></a><span class="lineno"> 2102</span>&#160;  <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a> *subquefront[3], **subquetail[3];</div>
<div class="line"><a name="l02103"></a><span class="lineno"> 2103</span>&#160;  <a class="code" href="structtetgenmesh_1_1badface.xhtml">badface</a> *tetquefront[64], *tetquetail[64];</div>
<div class="line"><a name="l02104"></a><span class="lineno"> 2104</span>&#160;  <span class="keywordtype">int</span> nextnonemptyq[64];</div>
<div class="line"><a name="l02105"></a><span class="lineno"> 2105</span>&#160;  <span class="keywordtype">int</span> firstnonemptyq, recentq;</div>
<div class="line"><a name="l02106"></a><span class="lineno"> 2106</span>&#160;</div>
<div class="line"><a name="l02107"></a><span class="lineno"> 2107</span>&#160;  <span class="comment">// Pointer to a recently visited tetrahedron. Improves point location</span></div>
<div class="line"><a name="l02108"></a><span class="lineno"> 2108</span>&#160;  <span class="comment">//   if proximate points are inserted sequentially.</span></div>
<div class="line"><a name="l02109"></a><span class="lineno"> 2109</span>&#160;  <a class="code" href="classtetgenmesh_1_1triface.xhtml">triface</a> recenttet;</div>
<div class="line"><a name="l02110"></a><span class="lineno"> 2110</span>&#160;</div>
<div class="line"><a name="l02111"></a><span class="lineno"> 2111</span>&#160;  REAL xmax, xmin, ymax, ymin, zmax, zmin;         <span class="comment">// Bounding box of points.</span></div>
<div class="line"><a name="l02112"></a><span class="lineno"> 2112</span>&#160;  REAL longest;                          <span class="comment">// The longest possible edge length.</span></div>
<div class="line"><a name="l02113"></a><span class="lineno"> 2113</span>&#160;  REAL lengthlimit;                     <span class="comment">// The limiting length of a new edge.</span></div>
<div class="line"><a name="l02114"></a><span class="lineno"> 2114</span>&#160;  <span class="keywordtype">long</span> hullsize;                           <span class="comment">// Number of faces of convex hull.</span></div>
<div class="line"><a name="l02115"></a><span class="lineno"> 2115</span>&#160;  <span class="keywordtype">long</span> insegments;                               <span class="comment">// Number of input segments.</span></div>
<div class="line"><a name="l02116"></a><span class="lineno"> 2116</span>&#160;  <span class="keywordtype">long</span> meshedges;                             <span class="comment">// Number of output mesh edges.</span></div>
<div class="line"><a name="l02117"></a><span class="lineno"> 2117</span>&#160;  <span class="keywordtype">int</span> steinerleft;                  <span class="comment">// Number of Steiner points not yet used.</span></div>
<div class="line"><a name="l02118"></a><span class="lineno"> 2118</span>&#160;  <span class="keywordtype">int</span> sizeoftensor;                     <span class="comment">// Number of REALs per metric tensor.</span></div>
<div class="line"><a name="l02119"></a><span class="lineno"> 2119</span>&#160;  <span class="keywordtype">int</span> pointmtrindex;           <span class="comment">// Index to find the metric tensor of a point.</span></div>
<div class="line"><a name="l02120"></a><span class="lineno"> 2120</span>&#160;  <span class="keywordtype">int</span> point2simindex;         <span class="comment">// Index to find a simplex adjacent to a point.</span></div>
<div class="line"><a name="l02121"></a><span class="lineno"> 2121</span>&#160;  <span class="keywordtype">int</span> pointmarkindex;            <span class="comment">// Index to find boundary marker of a point.</span></div>
<div class="line"><a name="l02122"></a><span class="lineno"> 2122</span>&#160;  <span class="keywordtype">int</span> point2pbcptindex;              <span class="comment">// Index to find a pbc point to a point.</span></div>
<div class="line"><a name="l02123"></a><span class="lineno"> 2123</span>&#160;  <span class="keywordtype">int</span> highorderindex;    <span class="comment">// Index to find extra nodes for highorder elements.</span></div>
<div class="line"><a name="l02124"></a><span class="lineno"> 2124</span>&#160;  <span class="keywordtype">int</span> elemattribindex;          <span class="comment">// Index to find attributes of a tetrahedron.</span></div>
<div class="line"><a name="l02125"></a><span class="lineno"> 2125</span>&#160;  <span class="keywordtype">int</span> volumeboundindex;       <span class="comment">// Index to find volume bound of a tetrahedron.</span></div>
<div class="line"><a name="l02126"></a><span class="lineno"> 2126</span>&#160;  <span class="keywordtype">int</span> elemmarkerindex;              <span class="comment">// Index to find marker of a tetrahedron.</span></div>
<div class="line"><a name="l02127"></a><span class="lineno"> 2127</span>&#160;  <span class="keywordtype">int</span> shmarkindex;             <span class="comment">// Index to find boundary marker of a subface.</span></div>
<div class="line"><a name="l02128"></a><span class="lineno"> 2128</span>&#160;  <span class="keywordtype">int</span> areaboundindex;               <span class="comment">// Index to find area bound of a subface.</span></div>
<div class="line"><a name="l02129"></a><span class="lineno"> 2129</span>&#160;  <span class="keywordtype">int</span> checksubfaces;                   <span class="comment">// Are there subfaces in the mesh yet?</span></div>
<div class="line"><a name="l02130"></a><span class="lineno"> 2130</span>&#160;  <span class="keywordtype">int</span> checksubsegs;                     <span class="comment">// Are there subsegs in the mesh yet?</span></div>
<div class="line"><a name="l02131"></a><span class="lineno"> 2131</span>&#160;  <span class="keywordtype">int</span> checkpbcs;                   <span class="comment">// Are there periodic boundary conditions?</span></div>
<div class="line"><a name="l02132"></a><span class="lineno"> 2132</span>&#160;  <span class="keywordtype">int</span> varconstraint;     <span class="comment">// Are there variant (node, seg, facet) constraints?</span></div>
<div class="line"><a name="l02133"></a><span class="lineno"> 2133</span>&#160;  <span class="keywordtype">int</span> nonconvex;                               <span class="comment">// Is current mesh non-convex?</span></div>
<div class="line"><a name="l02134"></a><span class="lineno"> 2134</span>&#160;  <span class="keywordtype">int</span> dupverts;                             <span class="comment">// Are there duplicated vertices?</span></div>
<div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;  <span class="keywordtype">int</span> unuverts;                                 <span class="comment">// Are there unused vertices?</span></div>
<div class="line"><a name="l02136"></a><span class="lineno"> 2136</span>&#160;  <span class="keywordtype">int</span> relverts;                          <span class="comment">// The number of relocated vertices.</span></div>
<div class="line"><a name="l02137"></a><span class="lineno"> 2137</span>&#160;  <span class="keywordtype">int</span> suprelverts;            <span class="comment">// The number of suppressed relocated vertices.</span></div>
<div class="line"><a name="l02138"></a><span class="lineno"> 2138</span>&#160;  <span class="keywordtype">int</span> collapverts;             <span class="comment">// The number of collapsed relocated vertices.</span></div>
<div class="line"><a name="l02139"></a><span class="lineno"> 2139</span>&#160;  <span class="keywordtype">int</span> unsupverts;                     <span class="comment">// The number of unsuppressed vertices.</span></div>
<div class="line"><a name="l02140"></a><span class="lineno"> 2140</span>&#160;  <span class="keywordtype">int</span> smoothsegverts;                     <span class="comment">// The number of smoothed vertices.</span></div>
<div class="line"><a name="l02141"></a><span class="lineno"> 2141</span>&#160;  <span class="keywordtype">int</span> jettisoninverts;            <span class="comment">// The number of jettisoned input vertices.</span></div>
<div class="line"><a name="l02142"></a><span class="lineno"> 2142</span>&#160;  <span class="keywordtype">long</span> samples;               <span class="comment">// Number of random samples for point location.</span></div>
<div class="line"><a name="l02143"></a><span class="lineno"> 2143</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> randomseed;                    <span class="comment">// Current random number seed.</span></div>
<div class="line"><a name="l02144"></a><span class="lineno"> 2144</span>&#160;  REAL macheps;                                       <span class="comment">// The machine epsilon.</span></div>
<div class="line"><a name="l02145"></a><span class="lineno"> 2145</span>&#160;  REAL cosmaxdihed, cosmindihed;    <span class="comment">// The cosine values of max/min dihedral.</span></div>
<div class="line"><a name="l02146"></a><span class="lineno"> 2146</span>&#160;  REAL minfaceang, minfacetdihed;     <span class="comment">// The minimum input (dihedral) angles.</span></div>
<div class="line"><a name="l02147"></a><span class="lineno"> 2147</span>&#160;  <span class="keywordtype">int</span> maxcavfaces, maxcavverts;            <span class="comment">// The size of the largest cavity.</span></div>
<div class="line"><a name="l02148"></a><span class="lineno"> 2148</span>&#160;  <span class="keywordtype">bool</span> b_steinerflag;</div>
<div class="line"><a name="l02149"></a><span class="lineno"> 2149</span>&#160;</div>
<div class="line"><a name="l02150"></a><span class="lineno"> 2150</span>&#160;  <span class="comment">// Algorithm statistical counters.</span></div>
<div class="line"><a name="l02151"></a><span class="lineno"> 2151</span>&#160;  <span class="keywordtype">long</span> ptloc_count, ptloc_max_count;</div>
<div class="line"><a name="l02152"></a><span class="lineno"> 2152</span>&#160;  <span class="keywordtype">long</span> orient3dcount;</div>
<div class="line"><a name="l02153"></a><span class="lineno"> 2153</span>&#160;  <span class="keywordtype">long</span> inspherecount, insphere_sos_count;</div>
<div class="line"><a name="l02154"></a><span class="lineno"> 2154</span>&#160;  <span class="keywordtype">long</span> flip14count, flip26count, flipn2ncount;</div>
<div class="line"><a name="l02155"></a><span class="lineno"> 2155</span>&#160;  <span class="keywordtype">long</span> flip22count;</div>
<div class="line"><a name="l02156"></a><span class="lineno"> 2156</span>&#160;  <span class="keywordtype">long</span> inserthullcount;</div>
<div class="line"><a name="l02157"></a><span class="lineno"> 2157</span>&#160;  <span class="keywordtype">long</span> maxbowatcavsize, totalbowatcavsize, totaldeadtets;</div>
<div class="line"><a name="l02158"></a><span class="lineno"> 2158</span>&#160;  <span class="keywordtype">long</span> across_face_count, across_edge_count, across_max_count;</div>
<div class="line"><a name="l02159"></a><span class="lineno"> 2159</span>&#160;  <span class="keywordtype">long</span> maxcavsize, maxregionsize;</div>
<div class="line"><a name="l02160"></a><span class="lineno"> 2160</span>&#160;  <span class="keywordtype">long</span> ndelaunayedgecount, cavityexpcount;</div>
<div class="line"><a name="l02161"></a><span class="lineno"> 2161</span>&#160;  <span class="keywordtype">long</span> opt_tet_peels, opt_face_flips, opt_edge_flips;</div>
<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;</div>
<div class="line"><a name="l02163"></a><span class="lineno"> 2163</span>&#160;  <span class="keywordtype">long</span> abovecount;                     <span class="comment">// Number of abovepoints calculation.</span></div>
<div class="line"><a name="l02164"></a><span class="lineno"> 2164</span>&#160;  <span class="keywordtype">long</span> bowatvolcount, bowatsubcount, bowatsegcount;       <span class="comment">// Bowyer-Watsons.</span></div>
<div class="line"><a name="l02165"></a><span class="lineno"> 2165</span>&#160;  <span class="keywordtype">long</span> updvolcount, updsubcount, updsegcount;   <span class="comment">// Bow-Wat cavities updates.</span></div>
<div class="line"><a name="l02166"></a><span class="lineno"> 2166</span>&#160;  <span class="keywordtype">long</span> failvolcount, failsubcount, failsegcount;           <span class="comment">// Bow-Wat fails.</span></div>
<div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;  <span class="keywordtype">long</span> outbowatcircumcount;    <span class="comment">// Number of circumcenters outside Bowat-cav.</span></div>
<div class="line"><a name="l02168"></a><span class="lineno"> 2168</span>&#160;  <span class="keywordtype">long</span> r1count, r2count, r3count;        <span class="comment">// Numbers of edge splitting rules.</span></div>
<div class="line"><a name="l02169"></a><span class="lineno"> 2169</span>&#160;  <span class="keywordtype">long</span> cdtenforcesegpts;                <span class="comment">// Number of CDT enforcement points.</span></div>
<div class="line"><a name="l02170"></a><span class="lineno"> 2170</span>&#160;  <span class="keywordtype">long</span> rejsegpts, rejsubpts, rejtetpts;        <span class="comment">// Number of rejected points.</span></div>
<div class="line"><a name="l02171"></a><span class="lineno"> 2171</span>&#160;  <span class="keywordtype">long</span> optcount[10];            <span class="comment">// Numbers of various optimizing operations.</span></div>
<div class="line"><a name="l02172"></a><span class="lineno"> 2172</span>&#160;  <span class="keywordtype">long</span> flip23s, flip32s, flip22s, flip44s;     <span class="comment">// Number of flips performed.</span></div>
<div class="line"><a name="l02173"></a><span class="lineno"> 2173</span>&#160;</div>
<div class="line"><a name="l02175"></a><span class="lineno"> 2175</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02176"></a><span class="lineno"> 2176</span>&#160;<span class="comment">// Class constructor &amp; destructor                                            //</span></div>
<div class="line"><a name="l02177"></a><span class="lineno"> 2177</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02179"></a><span class="lineno"> 2179</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02180"></a><span class="lineno"> 2180</span>&#160;  <a class="code" href="classtetgenmesh.xhtml">tetgenmesh</a>()</div>
<div class="line"><a name="l02181"></a><span class="lineno"> 2181</span>&#160;  {</div>
<div class="line"><a name="l02182"></a><span class="lineno"> 2182</span>&#160;    <span class="comment">// initializing because against compiler warning</span></div>
<div class="line"><a name="l02183"></a><span class="lineno"> 2183</span>&#160;    cosmaxdihed = 0;</div>
<div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;    firstnonemptyq = 0;</div>
<div class="line"><a name="l02185"></a><span class="lineno"> 2185</span>&#160;    cosmindihed = 0;</div>
<div class="line"><a name="l02186"></a><span class="lineno"> 2186</span>&#160;    elemmarkerindex = 0;</div>
<div class="line"><a name="l02187"></a><span class="lineno"> 2187</span>&#160;    lengthlimit = 0;</div>
<div class="line"><a name="l02188"></a><span class="lineno"> 2188</span>&#160;    max_btree_depth = 0;</div>
<div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;    steinerleft = 0;</div>
<div class="line"><a name="l02190"></a><span class="lineno"> 2190</span>&#160;    max_btreenode_size = 0;</div>
<div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;    recentq = 0;</div>
<div class="line"><a name="l02192"></a><span class="lineno"> 2192</span>&#160;    sizeoftensor = 0;</div>
<div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;    smoothsegverts = 0;</div>
<div class="line"><a name="l02194"></a><span class="lineno"> 2194</span>&#160;</div>
<div class="line"><a name="l02195"></a><span class="lineno"> 2195</span>&#160;    bgm = (<a class="code" href="classtetgenmesh.xhtml">tetgenmesh</a> *) NULL;</div>
<div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;    in = (<a class="code" href="classtetgenio.xhtml">tetgenio</a> *) NULL;</div>
<div class="line"><a name="l02197"></a><span class="lineno"> 2197</span>&#160;    b = (<a class="code" href="classtetgenbehavior.xhtml">tetgenbehavior</a> *) NULL;</div>
<div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;</div>
<div class="line"><a name="l02199"></a><span class="lineno"> 2199</span>&#160;    tetrahedrons = (<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *) NULL;</div>
<div class="line"><a name="l02200"></a><span class="lineno"> 2200</span>&#160;    subfaces = (<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *) NULL;</div>
<div class="line"><a name="l02201"></a><span class="lineno"> 2201</span>&#160;    subsegs = (<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *) NULL;</div>
<div class="line"><a name="l02202"></a><span class="lineno"> 2202</span>&#160;    points = (<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *) NULL;</div>
<div class="line"><a name="l02203"></a><span class="lineno"> 2203</span>&#160;    badsubsegs = (<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *) NULL;</div>
<div class="line"><a name="l02204"></a><span class="lineno"> 2204</span>&#160;    badsubfaces = (<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *) NULL;</div>
<div class="line"><a name="l02205"></a><span class="lineno"> 2205</span>&#160;    badtetrahedrons = (<a class="code" href="classtetgenmesh_1_1memorypool.xhtml">memorypool</a> *) NULL;</div>
<div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;    tet2segpool = NULL;</div>
<div class="line"><a name="l02207"></a><span class="lineno"> 2207</span>&#160;    tet2subpool = NULL;</div>
<div class="line"><a name="l02208"></a><span class="lineno"> 2208</span>&#160;</div>
<div class="line"><a name="l02209"></a><span class="lineno"> 2209</span>&#160;    dummytet = (tetrahedron *) NULL;</div>
<div class="line"><a name="l02210"></a><span class="lineno"> 2210</span>&#160;    dummytetbase = (tetrahedron *) NULL;</div>
<div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;    dummysh = (shellface *) NULL;</div>
<div class="line"><a name="l02212"></a><span class="lineno"> 2212</span>&#160;    dummyshbase = (shellface *) NULL;</div>
<div class="line"><a name="l02213"></a><span class="lineno"> 2213</span>&#160;</div>
<div class="line"><a name="l02214"></a><span class="lineno"> 2214</span>&#160;    facetabovepointarray = (point *) NULL;</div>
<div class="line"><a name="l02215"></a><span class="lineno"> 2215</span>&#160;    abovepoint = (point) NULL;</div>
<div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;    dummypoint = NULL;</div>
<div class="line"><a name="l02217"></a><span class="lineno"> 2217</span>&#160;    btreenode_list = (<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *) NULL;</div>
<div class="line"><a name="l02218"></a><span class="lineno"> 2218</span>&#160;    highordertable = (point *) NULL;</div>
<div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;    subpbcgrouptable = (<a class="code" href="structtetgenmesh_1_1pbcdata.xhtml">pbcdata</a> *) NULL;</div>
<div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;    segpbcgrouptable = (<a class="code" href="classtetgenmesh_1_1list.xhtml">list</a> *) NULL;</div>
<div class="line"><a name="l02221"></a><span class="lineno"> 2221</span>&#160;    idx2segpglist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l02222"></a><span class="lineno"> 2222</span>&#160;    segpglist = (<span class="keywordtype">int</span> *) NULL;</div>
<div class="line"><a name="l02223"></a><span class="lineno"> 2223</span>&#160;</div>
<div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;    cavetetlist = NULL;</div>
<div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;    cavebdrylist = NULL;</div>
<div class="line"><a name="l02226"></a><span class="lineno"> 2226</span>&#160;    caveoldtetlist = NULL;</div>
<div class="line"><a name="l02227"></a><span class="lineno"> 2227</span>&#160;    caveshlist = caveshbdlist = NULL;</div>
<div class="line"><a name="l02228"></a><span class="lineno"> 2228</span>&#160;    subsegstack = subfacstack = NULL;</div>
<div class="line"><a name="l02229"></a><span class="lineno"> 2229</span>&#160;</div>
<div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;    elemfliplist = (<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *) NULL;</div>
<div class="line"><a name="l02231"></a><span class="lineno"> 2231</span>&#160;    fixededgelist = (<a class="code" href="classtetgenmesh_1_1arraypool.xhtml">arraypool</a> *) NULL;</div>
<div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;</div>
<div class="line"><a name="l02233"></a><span class="lineno"> 2233</span>&#160;    xmax = xmin = ymax = ymin = zmax = zmin = 0.0; </div>
<div class="line"><a name="l02234"></a><span class="lineno"> 2234</span>&#160;    longest = 0.0;</div>
<div class="line"><a name="l02235"></a><span class="lineno"> 2235</span>&#160;    hullsize = 0l;</div>
<div class="line"><a name="l02236"></a><span class="lineno"> 2236</span>&#160;    insegments = 0l;</div>
<div class="line"><a name="l02237"></a><span class="lineno"> 2237</span>&#160;    meshedges = 0l;</div>
<div class="line"><a name="l02238"></a><span class="lineno"> 2238</span>&#160;    pointmtrindex = 0;</div>
<div class="line"><a name="l02239"></a><span class="lineno"> 2239</span>&#160;    pointmarkindex = 0;</div>
<div class="line"><a name="l02240"></a><span class="lineno"> 2240</span>&#160;    point2simindex = 0;</div>
<div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;    point2pbcptindex = 0;</div>
<div class="line"><a name="l02242"></a><span class="lineno"> 2242</span>&#160;    highorderindex = 0;</div>
<div class="line"><a name="l02243"></a><span class="lineno"> 2243</span>&#160;    elemattribindex = 0;</div>
<div class="line"><a name="l02244"></a><span class="lineno"> 2244</span>&#160;    volumeboundindex = 0;</div>
<div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;    shmarkindex = 0;</div>
<div class="line"><a name="l02246"></a><span class="lineno"> 2246</span>&#160;    areaboundindex = 0;</div>
<div class="line"><a name="l02247"></a><span class="lineno"> 2247</span>&#160;    checksubfaces = 0;</div>
<div class="line"><a name="l02248"></a><span class="lineno"> 2248</span>&#160;    checksubsegs = 0;</div>
<div class="line"><a name="l02249"></a><span class="lineno"> 2249</span>&#160;    checkpbcs = 0;</div>
<div class="line"><a name="l02250"></a><span class="lineno"> 2250</span>&#160;    varconstraint = 0;</div>
<div class="line"><a name="l02251"></a><span class="lineno"> 2251</span>&#160;    nonconvex = 0;</div>
<div class="line"><a name="l02252"></a><span class="lineno"> 2252</span>&#160;    dupverts = 0;</div>
<div class="line"><a name="l02253"></a><span class="lineno"> 2253</span>&#160;    unuverts = 0;</div>
<div class="line"><a name="l02254"></a><span class="lineno"> 2254</span>&#160;    relverts = 0;</div>
<div class="line"><a name="l02255"></a><span class="lineno"> 2255</span>&#160;    suprelverts = 0;</div>
<div class="line"><a name="l02256"></a><span class="lineno"> 2256</span>&#160;    collapverts = 0;</div>
<div class="line"><a name="l02257"></a><span class="lineno"> 2257</span>&#160;    unsupverts = 0;</div>
<div class="line"><a name="l02258"></a><span class="lineno"> 2258</span>&#160;    jettisoninverts = 0;</div>
<div class="line"><a name="l02259"></a><span class="lineno"> 2259</span>&#160;    samples = 0l;</div>
<div class="line"><a name="l02260"></a><span class="lineno"> 2260</span>&#160;    randomseed = 1l;</div>
<div class="line"><a name="l02261"></a><span class="lineno"> 2261</span>&#160;    macheps = 0.0;</div>
<div class="line"><a name="l02262"></a><span class="lineno"> 2262</span>&#160;    minfaceang = minfacetdihed = PI;</div>
<div class="line"><a name="l02263"></a><span class="lineno"> 2263</span>&#160;    b_steinerflag = <span class="keyword">false</span>;</div>
<div class="line"><a name="l02264"></a><span class="lineno"> 2264</span>&#160;</div>
<div class="line"><a name="l02265"></a><span class="lineno"> 2265</span>&#160;    ptloc_count = ptloc_max_count = 0l;</div>
<div class="line"><a name="l02266"></a><span class="lineno"> 2266</span>&#160;    orient3dcount = 0l;</div>
<div class="line"><a name="l02267"></a><span class="lineno"> 2267</span>&#160;    inspherecount = insphere_sos_count = 0l;</div>
<div class="line"><a name="l02268"></a><span class="lineno"> 2268</span>&#160;    flip14count = flip26count = flipn2ncount = 0l;</div>
<div class="line"><a name="l02269"></a><span class="lineno"> 2269</span>&#160;    flip22count = 0l;</div>
<div class="line"><a name="l02270"></a><span class="lineno"> 2270</span>&#160;    inserthullcount = 0l;</div>
<div class="line"><a name="l02271"></a><span class="lineno"> 2271</span>&#160;    maxbowatcavsize = totalbowatcavsize = totaldeadtets = 0l;</div>
<div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;    across_face_count = across_edge_count = across_max_count = 0l;</div>
<div class="line"><a name="l02273"></a><span class="lineno"> 2273</span>&#160;    maxcavsize = maxregionsize = 0l;</div>
<div class="line"><a name="l02274"></a><span class="lineno"> 2274</span>&#160;    ndelaunayedgecount = cavityexpcount = 0l;</div>
<div class="line"><a name="l02275"></a><span class="lineno"> 2275</span>&#160;    opt_tet_peels = opt_face_flips = opt_edge_flips = 0l;</div>
<div class="line"><a name="l02276"></a><span class="lineno"> 2276</span>&#160;</div>
<div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;    maxcavfaces = maxcavverts = 0;</div>
<div class="line"><a name="l02278"></a><span class="lineno"> 2278</span>&#160;    abovecount = 0l;</div>
<div class="line"><a name="l02279"></a><span class="lineno"> 2279</span>&#160;    bowatvolcount = bowatsubcount = bowatsegcount = 0l;</div>
<div class="line"><a name="l02280"></a><span class="lineno"> 2280</span>&#160;    updvolcount = updsubcount = updsegcount = 0l;</div>
<div class="line"><a name="l02281"></a><span class="lineno"> 2281</span>&#160;    outbowatcircumcount = 0l;</div>
<div class="line"><a name="l02282"></a><span class="lineno"> 2282</span>&#160;    failvolcount = failsubcount = failsegcount = 0l;</div>
<div class="line"><a name="l02283"></a><span class="lineno"> 2283</span>&#160;    r1count = r2count = r3count = 0l;</div>
<div class="line"><a name="l02284"></a><span class="lineno"> 2284</span>&#160;    cdtenforcesegpts = 0l;</div>
<div class="line"><a name="l02285"></a><span class="lineno"> 2285</span>&#160;    rejsegpts = rejsubpts = rejtetpts = 0l;</div>
<div class="line"><a name="l02286"></a><span class="lineno"> 2286</span>&#160;    flip23s = flip32s = flip22s = flip44s = 0l;</div>
<div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;  } <span class="comment">// tetgenmesh()</span></div>
<div class="line"><a name="l02288"></a><span class="lineno"> 2288</span>&#160;    </div>
<div class="line"><a name="l02289"></a><span class="lineno"> 2289</span>&#160;  ~<a class="code" href="classtetgenmesh.xhtml">tetgenmesh</a>()</div>
<div class="line"><a name="l02290"></a><span class="lineno"> 2290</span>&#160;  {</div>
<div class="line"><a name="l02291"></a><span class="lineno"> 2291</span>&#160;    bgm = (<a class="code" href="classtetgenmesh.xhtml">tetgenmesh</a> *) NULL;</div>
<div class="line"><a name="l02292"></a><span class="lineno"> 2292</span>&#160;    in = (<a class="code" href="classtetgenio.xhtml">tetgenio</a> *) NULL;</div>
<div class="line"><a name="l02293"></a><span class="lineno"> 2293</span>&#160;    b = (<a class="code" href="classtetgenbehavior.xhtml">tetgenbehavior</a> *) NULL;</div>
<div class="line"><a name="l02294"></a><span class="lineno"> 2294</span>&#160;</div>
<div class="line"><a name="l02295"></a><span class="lineno"> 2295</span>&#160;    <span class="keywordflow">if</span> (tetrahedrons != (memorypool *) NULL) {</div>
<div class="line"><a name="l02296"></a><span class="lineno"> 2296</span>&#160;      <span class="keyword">delete</span> tetrahedrons;</div>
<div class="line"><a name="l02297"></a><span class="lineno"> 2297</span>&#160;    }</div>
<div class="line"><a name="l02298"></a><span class="lineno"> 2298</span>&#160;    <span class="keywordflow">if</span> (subfaces != (memorypool *) NULL) {</div>
<div class="line"><a name="l02299"></a><span class="lineno"> 2299</span>&#160;      <span class="keyword">delete</span> subfaces;</div>
<div class="line"><a name="l02300"></a><span class="lineno"> 2300</span>&#160;    }</div>
<div class="line"><a name="l02301"></a><span class="lineno"> 2301</span>&#160;    <span class="keywordflow">if</span> (subsegs != (memorypool *) NULL) {</div>
<div class="line"><a name="l02302"></a><span class="lineno"> 2302</span>&#160;      <span class="keyword">delete</span> subsegs;</div>
<div class="line"><a name="l02303"></a><span class="lineno"> 2303</span>&#160;    }</div>
<div class="line"><a name="l02304"></a><span class="lineno"> 2304</span>&#160;    <span class="keywordflow">if</span> (points != (memorypool *) NULL) {</div>
<div class="line"><a name="l02305"></a><span class="lineno"> 2305</span>&#160;      <span class="keyword">delete</span> points;</div>
<div class="line"><a name="l02306"></a><span class="lineno"> 2306</span>&#160;    }</div>
<div class="line"><a name="l02307"></a><span class="lineno"> 2307</span>&#160;    <span class="keywordflow">if</span> (tet2segpool != NULL) {</div>
<div class="line"><a name="l02308"></a><span class="lineno"> 2308</span>&#160;      <span class="keyword">delete</span> tet2segpool;</div>
<div class="line"><a name="l02309"></a><span class="lineno"> 2309</span>&#160;    }</div>
<div class="line"><a name="l02310"></a><span class="lineno"> 2310</span>&#160;    <span class="keywordflow">if</span> (tet2subpool != NULL) {</div>
<div class="line"><a name="l02311"></a><span class="lineno"> 2311</span>&#160;      <span class="keyword">delete</span> tet2subpool;</div>
<div class="line"><a name="l02312"></a><span class="lineno"> 2312</span>&#160;    }</div>
<div class="line"><a name="l02313"></a><span class="lineno"> 2313</span>&#160;    <span class="keywordflow">if</span> (dummytetbase != (tetrahedron *) NULL) {</div>
<div class="line"><a name="l02314"></a><span class="lineno"> 2314</span>&#160;      <span class="keyword">delete</span> [] dummytetbase;</div>
<div class="line"><a name="l02315"></a><span class="lineno"> 2315</span>&#160;    }</div>
<div class="line"><a name="l02316"></a><span class="lineno"> 2316</span>&#160;    <span class="keywordflow">if</span> (dummyshbase != (shellface *) NULL) {</div>
<div class="line"><a name="l02317"></a><span class="lineno"> 2317</span>&#160;      <span class="keyword">delete</span> [] dummyshbase;</div>
<div class="line"><a name="l02318"></a><span class="lineno"> 2318</span>&#160;    }</div>
<div class="line"><a name="l02319"></a><span class="lineno"> 2319</span>&#160;    <span class="keywordflow">if</span> (facetabovepointarray != (point *) NULL) {</div>
<div class="line"><a name="l02320"></a><span class="lineno"> 2320</span>&#160;      <span class="keyword">delete</span> [] facetabovepointarray;</div>
<div class="line"><a name="l02321"></a><span class="lineno"> 2321</span>&#160;    }</div>
<div class="line"><a name="l02322"></a><span class="lineno"> 2322</span>&#160;    <span class="keywordflow">if</span> (dummypoint != NULL) {</div>
<div class="line"><a name="l02323"></a><span class="lineno"> 2323</span>&#160;      <span class="keyword">delete</span> [] dummypoint;</div>
<div class="line"><a name="l02324"></a><span class="lineno"> 2324</span>&#160;    }</div>
<div class="line"><a name="l02325"></a><span class="lineno"> 2325</span>&#160;    <span class="keywordflow">if</span> (highordertable != (point *) NULL) {</div>
<div class="line"><a name="l02326"></a><span class="lineno"> 2326</span>&#160;      <span class="keyword">delete</span> [] highordertable;</div>
<div class="line"><a name="l02327"></a><span class="lineno"> 2327</span>&#160;    }</div>
<div class="line"><a name="l02328"></a><span class="lineno"> 2328</span>&#160;    <span class="keywordflow">if</span> (subpbcgrouptable != (pbcdata *) NULL) {</div>
<div class="line"><a name="l02329"></a><span class="lineno"> 2329</span>&#160;      <span class="keyword">delete</span> [] subpbcgrouptable;</div>
<div class="line"><a name="l02330"></a><span class="lineno"> 2330</span>&#160;    }</div>
<div class="line"><a name="l02331"></a><span class="lineno"> 2331</span>&#160;    <span class="keywordflow">if</span> (segpbcgrouptable != (list *) NULL) {</div>
<div class="line"><a name="l02332"></a><span class="lineno"> 2332</span>&#160;      <span class="keyword">delete</span> segpbcgrouptable;</div>
<div class="line"><a name="l02333"></a><span class="lineno"> 2333</span>&#160;      <span class="keyword">delete</span> [] idx2segpglist;</div>
<div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;      <span class="keyword">delete</span> [] segpglist;</div>
<div class="line"><a name="l02335"></a><span class="lineno"> 2335</span>&#160;    }</div>
<div class="line"><a name="l02336"></a><span class="lineno"> 2336</span>&#160;</div>
<div class="line"><a name="l02337"></a><span class="lineno"> 2337</span>&#160;    <span class="keywordflow">if</span> (cavetetlist != NULL) {</div>
<div class="line"><a name="l02338"></a><span class="lineno"> 2338</span>&#160;      <span class="keyword">delete</span> cavetetlist;</div>
<div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;      <span class="keyword">delete</span> cavebdrylist;</div>
<div class="line"><a name="l02340"></a><span class="lineno"> 2340</span>&#160;      <span class="keyword">delete</span> caveoldtetlist;</div>
<div class="line"><a name="l02341"></a><span class="lineno"> 2341</span>&#160;    }</div>
<div class="line"><a name="l02342"></a><span class="lineno"> 2342</span>&#160;    <span class="keywordflow">if</span> (subsegstack != NULL) {</div>
<div class="line"><a name="l02343"></a><span class="lineno"> 2343</span>&#160;      <span class="keyword">delete</span> subsegstack;</div>
<div class="line"><a name="l02344"></a><span class="lineno"> 2344</span>&#160;    }</div>
<div class="line"><a name="l02345"></a><span class="lineno"> 2345</span>&#160;    <span class="keywordflow">if</span> (subfacstack != NULL) {</div>
<div class="line"><a name="l02346"></a><span class="lineno"> 2346</span>&#160;      <span class="keyword">delete</span> subfacstack;</div>
<div class="line"><a name="l02347"></a><span class="lineno"> 2347</span>&#160;    }</div>
<div class="line"><a name="l02348"></a><span class="lineno"> 2348</span>&#160;  } <span class="comment">// ~tetgenmesh()</span></div>
<div class="line"><a name="l02349"></a><span class="lineno"> 2349</span>&#160;</div>
<div class="line"><a name="l02350"></a><span class="lineno"> 2350</span>&#160;};                                               <span class="comment">// End of class tetgenmesh.</span></div>
<div class="line"><a name="l02351"></a><span class="lineno"> 2351</span>&#160;</div>
<div class="line"><a name="l02353"></a><span class="lineno"> 2353</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02354"></a><span class="lineno"> 2354</span>&#160;<span class="comment">// tetrahedralize()    Interface for using TetGen&#39;s library to generate      //</span></div>
<div class="line"><a name="l02355"></a><span class="lineno"> 2355</span>&#160;<span class="comment">//                     Delaunay tetrahedralizations, constrained Delaunay    //</span></div>
<div class="line"><a name="l02356"></a><span class="lineno"> 2356</span>&#160;<span class="comment">//                     tetrahedralizations, quality tetrahedral meshes.      //</span></div>
<div class="line"><a name="l02357"></a><span class="lineno"> 2357</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02358"></a><span class="lineno"> 2358</span>&#160;<span class="comment">// &#39;in&#39; is an object of &#39;tetgenio&#39; which contains a PLC you want to tetrahed-//</span></div>
<div class="line"><a name="l02359"></a><span class="lineno"> 2359</span>&#160;<span class="comment">// ralize or a previously generated tetrahedral mesh you want to refine.  It //</span></div>
<div class="line"><a name="l02360"></a><span class="lineno"> 2360</span>&#160;<span class="comment">// must not be a NULL. &#39;out&#39; is another object of &#39;tetgenio&#39; for storing the //</span></div>
<div class="line"><a name="l02361"></a><span class="lineno"> 2361</span>&#160;<span class="comment">// generated tetrahedral mesh. It can be a NULL. If so, the output will be   //</span></div>
<div class="line"><a name="l02362"></a><span class="lineno"> 2362</span>&#160;<span class="comment">// saved to file(s). If &#39;bgmin&#39; != NULL, it contains a background mesh which //</span></div>
<div class="line"><a name="l02363"></a><span class="lineno"> 2363</span>&#160;<span class="comment">// defines a mesh size distruction function.                                 //</span></div>
<div class="line"><a name="l02364"></a><span class="lineno"> 2364</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02366"></a><span class="lineno"> 2366</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02367"></a><span class="lineno"> 2367</span>&#160;<span class="comment">//void tetrahedralize(tetgenbehavior *b, tetgenio *in, tetgenio *out,</span></div>
<div class="line"><a name="l02368"></a><span class="lineno"> 2368</span>&#160;<span class="comment">//                    tetgenio *addin = NULL, tetgenio *bgmin = NULL);</span></div>
<div class="line"><a name="l02369"></a><span class="lineno"> 2369</span>&#160;</div>
<div class="line"><a name="l02370"></a><span class="lineno"> 2370</span>&#160;<span class="preprocessor">#ifdef TETLIBRARY</span></div>
<div class="line"><a name="l02371"></a><span class="lineno"> 2371</span>&#160;<span class="preprocessor"></span><span class="keywordtype">void</span> tetrahedralize(<span class="keywordtype">char</span> *switches, <a class="code" href="classtetgenio.xhtml">tetgenio</a> *in, <a class="code" href="classtetgenio.xhtml">tetgenio</a> *out,</div>
<div class="line"><a name="l02372"></a><span class="lineno"> 2372</span>&#160;                    <a class="code" href="classtetgenio.xhtml">tetgenio</a> *addin = NULL, <a class="code" href="classtetgenio.xhtml">tetgenio</a> *bgmin = NULL);</div>
<div class="line"><a name="l02373"></a><span class="lineno"> 2373</span>&#160;<span class="preprocessor">#endif // #ifdef TETLIBRARY</span></div>
<div class="line"><a name="l02374"></a><span class="lineno"> 2374</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l02376"></a><span class="lineno"> 2376</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02377"></a><span class="lineno"> 2377</span>&#160;<span class="comment">// terminatetetgen()    Terminate TetGen with a given exit code.             //</span></div>
<div class="line"><a name="l02378"></a><span class="lineno"> 2378</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02380"></a><span class="lineno"> 2380</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02381"></a><span class="lineno"> 2381</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> terminatetetgen(<span class="keywordtype">int</span> x)</div>
<div class="line"><a name="l02382"></a><span class="lineno"> 2382</span>&#160;{</div>
<div class="line"><a name="l02383"></a><span class="lineno"> 2383</span>&#160;<span class="preprocessor">#ifdef TETLIBRARY</span></div>
<div class="line"><a name="l02384"></a><span class="lineno"> 2384</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">throw</span> x;</div>
<div class="line"><a name="l02385"></a><span class="lineno"> 2385</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l02386"></a><span class="lineno"> 2386</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">switch</span> (x) {</div>
<div class="line"><a name="l02387"></a><span class="lineno"> 2387</span>&#160;  <span class="keywordflow">case</span> 1: <span class="comment">// Out of memory.</span></div>
<div class="line"><a name="l02388"></a><span class="lineno"> 2388</span>&#160;    printf(<span class="stringliteral">&quot;Error:  Out of memory.\n&quot;</span>); </div>
<div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;  <span class="keywordflow">case</span> 2: <span class="comment">// Encounter an internal error.</span></div>
<div class="line"><a name="l02391"></a><span class="lineno"> 2391</span>&#160;    printf(<span class="stringliteral">&quot;  Please report this bug to sihang@mail.berlios.de. Include\n&quot;</span>);</div>
<div class="line"><a name="l02392"></a><span class="lineno"> 2392</span>&#160;    printf(<span class="stringliteral">&quot;    the message above, your input data set, and the exact\n&quot;</span>);</div>
<div class="line"><a name="l02393"></a><span class="lineno"> 2393</span>&#160;    printf(<span class="stringliteral">&quot;     command line you used to run this program, thank you.\n&quot;</span>);</div>
<div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l02395"></a><span class="lineno"> 2395</span>&#160;  <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l02396"></a><span class="lineno"> 2396</span>&#160;    printf(<span class="stringliteral">&quot;Program stopped.\n&quot;</span>); </div>
<div class="line"><a name="l02397"></a><span class="lineno"> 2397</span>&#160;  } <span class="comment">// switch (x)</span></div>
<div class="line"><a name="l02398"></a><span class="lineno"> 2398</span>&#160;  exit(x);</div>
<div class="line"><a name="l02399"></a><span class="lineno"> 2399</span>&#160;<span class="preprocessor">#endif // #ifdef TETLIBRARY</span></div>
<div class="line"><a name="l02400"></a><span class="lineno"> 2400</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l02401"></a><span class="lineno"> 2401</span>&#160;</div>
<div class="line"><a name="l02403"></a><span class="lineno"> 2403</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02404"></a><span class="lineno"> 2404</span>&#160;<span class="comment">// Geometric predicates                                                      //</span></div>
<div class="line"><a name="l02405"></a><span class="lineno"> 2405</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02406"></a><span class="lineno"> 2406</span>&#160;<span class="comment">// Return one of the values +1, 0, and -1 on basic geometric questions such  //</span></div>
<div class="line"><a name="l02407"></a><span class="lineno"> 2407</span>&#160;<span class="comment">// as the orientation of point sets, in-circle, and in-sphere tests.  They   //</span></div>
<div class="line"><a name="l02408"></a><span class="lineno"> 2408</span>&#160;<span class="comment">// are basic units for implmenting geometric algorithms.  TetGen uses two 3D //</span></div>
<div class="line"><a name="l02409"></a><span class="lineno"> 2409</span>&#160;<span class="comment">// geometric predicates: the orientation and in-sphere tests.                //</span></div>
<div class="line"><a name="l02410"></a><span class="lineno"> 2410</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02411"></a><span class="lineno"> 2411</span>&#160;<span class="comment">// Orientation test:  let a, b, c be a sequence of 3 non-collinear points in //</span></div>
<div class="line"><a name="l02412"></a><span class="lineno"> 2412</span>&#160;<span class="comment">// R^3.  They defines a unique hypeplane H.  Let H+ and H- be the two spaces //</span></div>
<div class="line"><a name="l02413"></a><span class="lineno"> 2413</span>&#160;<span class="comment">// separated by H, which are defined as follows (using the left-hand rule):  //</span></div>
<div class="line"><a name="l02414"></a><span class="lineno"> 2414</span>&#160;<span class="comment">// make a fist using your left hand in such a way that your fingers follow   //</span></div>
<div class="line"><a name="l02415"></a><span class="lineno"> 2415</span>&#160;<span class="comment">// the order of a, b and c, then your thumb is pointing to H+.  Given any    //</span></div>
<div class="line"><a name="l02416"></a><span class="lineno"> 2416</span>&#160;<span class="comment">// point d in R^3, the orientation test returns +1 if d lies in H+, -1 if d  //</span></div>
<div class="line"><a name="l02417"></a><span class="lineno"> 2417</span>&#160;<span class="comment">// lies in H-, or 0 if d lies on H.                                          //</span></div>
<div class="line"><a name="l02418"></a><span class="lineno"> 2418</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02419"></a><span class="lineno"> 2419</span>&#160;<span class="comment">// In-sphere test:  let a, b, c, d be 4 non-coplanar points in R^3.  They    //</span></div>
<div class="line"><a name="l02420"></a><span class="lineno"> 2420</span>&#160;<span class="comment">// defines a unique circumsphere S.  Given any point e in R^3, the in-sphere //</span></div>
<div class="line"><a name="l02421"></a><span class="lineno"> 2421</span>&#160;<span class="comment">// test returns +1 if e lies inside S, or -1 if e lies outside S, or 0 if e  //</span></div>
<div class="line"><a name="l02422"></a><span class="lineno"> 2422</span>&#160;<span class="comment">// lies on S.                                                                //</span></div>
<div class="line"><a name="l02423"></a><span class="lineno"> 2423</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02424"></a><span class="lineno"> 2424</span>&#160;<span class="comment">// The following routines use arbitrary precision floating-point arithmetic. //</span></div>
<div class="line"><a name="l02425"></a><span class="lineno"> 2425</span>&#160;<span class="comment">// They are provided by J. R. Schewchuk in public domain (http://www.cs.cmu. //</span></div>
<div class="line"><a name="l02426"></a><span class="lineno"> 2426</span>&#160;<span class="comment">// edu/~quake/robust.html). The source code are in &quot;predicates.cxx&quot;.         //</span></div>
<div class="line"><a name="l02427"></a><span class="lineno"> 2427</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02429"></a><span class="lineno"> 2429</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02430"></a><span class="lineno"> 2430</span>&#160;REAL exactinit();</div>
<div class="line"><a name="l02431"></a><span class="lineno"> 2431</span>&#160;REAL orient3d(REAL *pa, REAL *pb, REAL *pc, REAL *pd);</div>
<div class="line"><a name="l02432"></a><span class="lineno"> 2432</span>&#160;REAL insphere(REAL *pa, REAL *pb, REAL *pc, REAL *pd, REAL *pe);</div>
<div class="line"><a name="l02433"></a><span class="lineno"> 2433</span>&#160;</div>
<div class="line"><a name="l02435"></a><span class="lineno"> 2435</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02436"></a><span class="lineno"> 2436</span>&#160;<span class="comment">// Inline functions of mesh data structures                                  //</span></div>
<div class="line"><a name="l02437"></a><span class="lineno"> 2437</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l02439"></a><span class="lineno"> 2439</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l02440"></a><span class="lineno"> 2440</span>&#160;<span class="comment">// Some macros for convenience</span></div>
<div class="line"><a name="l02441"></a><span class="lineno"> 2441</span>&#160;</div>
<div class="line"><a name="l02442"></a><span class="lineno"> 2442</span>&#160;<span class="preprocessor">#define Div2  &gt;&gt; 1</span></div>
<div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define Mod2  &amp; 01</span></div>
<div class="line"><a name="l02444"></a><span class="lineno"> 2444</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l02445"></a><span class="lineno"> 2445</span>&#160;<span class="comment">// NOTE: These bit operators should only be used in macros below.</span></div>
<div class="line"><a name="l02446"></a><span class="lineno"> 2446</span>&#160;</div>
<div class="line"><a name="l02447"></a><span class="lineno"> 2447</span>&#160;<span class="comment">// Get orient(Range from 0 to 2) from face version(Range from 0 to 5).</span></div>
<div class="line"><a name="l02448"></a><span class="lineno"> 2448</span>&#160;</div>
<div class="line"><a name="l02449"></a><span class="lineno"> 2449</span>&#160;<span class="preprocessor">#define Orient(V)   ((V) Div2)</span></div>
<div class="line"><a name="l02450"></a><span class="lineno"> 2450</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l02451"></a><span class="lineno"> 2451</span>&#160;<span class="comment">// Determine edge ring(0 or 1) from face version(Range from 0 to 5).</span></div>
<div class="line"><a name="l02452"></a><span class="lineno"> 2452</span>&#160;</div>
<div class="line"><a name="l02453"></a><span class="lineno"> 2453</span>&#160;<span class="preprocessor">#define EdgeRing(V) ((V) Mod2)</span></div>
<div class="line"><a name="l02454"></a><span class="lineno"> 2454</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l02455"></a><span class="lineno"> 2455</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l02456"></a><span class="lineno"> 2456</span>&#160;<span class="comment">// Begin of primitives for tetrahedra</span></div>
<div class="line"><a name="l02457"></a><span class="lineno"> 2457</span>&#160;<span class="comment">// </span></div>
<div class="line"><a name="l02458"></a><span class="lineno"> 2458</span>&#160;</div>
<div class="line"><a name="l02459"></a><span class="lineno"> 2459</span>&#160;<span class="comment">// Each tetrahedron contains four pointers to its neighboring tetrahedra,</span></div>
<div class="line"><a name="l02460"></a><span class="lineno"> 2460</span>&#160;<span class="comment">//   with face indices.  To save memory, both information are kept in a</span></div>
<div class="line"><a name="l02461"></a><span class="lineno"> 2461</span>&#160;<span class="comment">//   single pointer. To make this possible, all tetrahedra are aligned to</span></div>
<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;<span class="comment">//   eight-byte boundaries, so that the last three bits of each pointer are</span></div>
<div class="line"><a name="l02463"></a><span class="lineno"> 2463</span>&#160;<span class="comment">//   zeros. A face index (in the range 0 to 3) is compressed into the last</span></div>
<div class="line"><a name="l02464"></a><span class="lineno"> 2464</span>&#160;<span class="comment">//   two bits of each pointer by the function &#39;encode()&#39;.  The function</span></div>
<div class="line"><a name="l02465"></a><span class="lineno"> 2465</span>&#160;<span class="comment">//   &#39;decode()&#39; decodes a pointer, extracting a face index and a pointer to</span></div>
<div class="line"><a name="l02466"></a><span class="lineno"> 2466</span>&#160;<span class="comment">//   the beginning of a tetrahedron.</span></div>
<div class="line"><a name="l02467"></a><span class="lineno"> 2467</span>&#160;</div>
<div class="line"><a name="l02468"></a><span class="lineno"> 2468</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::decode(tetrahedron ptr, triface&amp; t) {</div>
<div class="line"><a name="l02469"></a><span class="lineno"> 2469</span>&#160;  t.loc = (int) ((uintptr_t) (ptr) &amp; (uintptr_t) 3);</div>
<div class="line"><a name="l02470"></a><span class="lineno"> 2470</span>&#160;  t.tet = (tetrahedron *) ((uintptr_t) (ptr) &amp; ~(uintptr_t) 7);</div>
<div class="line"><a name="l02471"></a><span class="lineno"> 2471</span>&#160;}</div>
<div class="line"><a name="l02472"></a><span class="lineno"> 2472</span>&#160;</div>
<div class="line"><a name="l02473"></a><span class="lineno"> 2473</span>&#160;<span class="keyword">inline</span> tetgenmesh::tetrahedron tetgenmesh::encode(triface&amp; t) {</div>
<div class="line"><a name="l02474"></a><span class="lineno"> 2474</span>&#160;  <span class="keywordflow">return</span> (tetrahedron) ((uintptr_t) t.tet | (uintptr_t) t.loc);</div>
<div class="line"><a name="l02475"></a><span class="lineno"> 2475</span>&#160;}</div>
<div class="line"><a name="l02476"></a><span class="lineno"> 2476</span>&#160;</div>
<div class="line"><a name="l02477"></a><span class="lineno"> 2477</span>&#160;<span class="comment">// sym() finds the abutting tetrahedron on the same face.</span></div>
<div class="line"><a name="l02478"></a><span class="lineno"> 2478</span>&#160;</div>
<div class="line"><a name="l02479"></a><span class="lineno"> 2479</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sym(triface&amp; t1, triface&amp; t2) {</div>
<div class="line"><a name="l02480"></a><span class="lineno"> 2480</span>&#160;  tetrahedron ptr = t1.tet[t1.loc];</div>
<div class="line"><a name="l02481"></a><span class="lineno"> 2481</span>&#160;  decode(ptr, t2);</div>
<div class="line"><a name="l02482"></a><span class="lineno"> 2482</span>&#160;}</div>
<div class="line"><a name="l02483"></a><span class="lineno"> 2483</span>&#160;</div>
<div class="line"><a name="l02484"></a><span class="lineno"> 2484</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::symself(triface&amp; t) {</div>
<div class="line"><a name="l02485"></a><span class="lineno"> 2485</span>&#160;  tetrahedron ptr = t.tet[t.loc];</div>
<div class="line"><a name="l02486"></a><span class="lineno"> 2486</span>&#160;  decode(ptr, t);</div>
<div class="line"><a name="l02487"></a><span class="lineno"> 2487</span>&#160;}</div>
<div class="line"><a name="l02488"></a><span class="lineno"> 2488</span>&#160;</div>
<div class="line"><a name="l02489"></a><span class="lineno"> 2489</span>&#160;<span class="comment">// Bond two tetrahedra together at their faces.</span></div>
<div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;</div>
<div class="line"><a name="l02491"></a><span class="lineno"> 2491</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::bond(triface&amp; t1, triface&amp; t2) {</div>
<div class="line"><a name="l02492"></a><span class="lineno"> 2492</span>&#160;  t1.tet[t1.loc] = encode(t2);</div>
<div class="line"><a name="l02493"></a><span class="lineno"> 2493</span>&#160;  t2.tet[t2.loc] = encode(t1);</div>
<div class="line"><a name="l02494"></a><span class="lineno"> 2494</span>&#160;}</div>
<div class="line"><a name="l02495"></a><span class="lineno"> 2495</span>&#160;</div>
<div class="line"><a name="l02496"></a><span class="lineno"> 2496</span>&#160;<span class="comment">// Dissolve a bond (from one side).  Note that the other tetrahedron will</span></div>
<div class="line"><a name="l02497"></a><span class="lineno"> 2497</span>&#160;<span class="comment">//   still think it is connected to this tetrahedron.  Usually, however,</span></div>
<div class="line"><a name="l02498"></a><span class="lineno"> 2498</span>&#160;<span class="comment">//   the other tetrahedron is being deleted entirely, or bonded to another</span></div>
<div class="line"><a name="l02499"></a><span class="lineno"> 2499</span>&#160;<span class="comment">//   tetrahedron, so it doesn&#39;t matter.</span></div>
<div class="line"><a name="l02500"></a><span class="lineno"> 2500</span>&#160;</div>
<div class="line"><a name="l02501"></a><span class="lineno"> 2501</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::dissolve(triface&amp; t) {</div>
<div class="line"><a name="l02502"></a><span class="lineno"> 2502</span>&#160;  t.tet[t.loc] = (tetrahedron) dummytet;</div>
<div class="line"><a name="l02503"></a><span class="lineno"> 2503</span>&#160;}</div>
<div class="line"><a name="l02504"></a><span class="lineno"> 2504</span>&#160;</div>
<div class="line"><a name="l02505"></a><span class="lineno"> 2505</span>&#160;<span class="comment">// These primitives determine or set the origin, destination, apex or</span></div>
<div class="line"><a name="l02506"></a><span class="lineno"> 2506</span>&#160;<span class="comment">//   opposition of a tetrahedron with respect to &#39;loc&#39; and &#39;ver&#39;.</span></div>
<div class="line"><a name="l02507"></a><span class="lineno"> 2507</span>&#160;</div>
<div class="line"><a name="l02508"></a><span class="lineno"> 2508</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::org(triface&amp; t) {</div>
<div class="line"><a name="l02509"></a><span class="lineno"> 2509</span>&#160;  <span class="keywordflow">return</span> (point) t.tet[locver2org[t.loc][t.ver] + 4];</div>
<div class="line"><a name="l02510"></a><span class="lineno"> 2510</span>&#160;}</div>
<div class="line"><a name="l02511"></a><span class="lineno"> 2511</span>&#160;</div>
<div class="line"><a name="l02512"></a><span class="lineno"> 2512</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::dest(triface&amp; t) {</div>
<div class="line"><a name="l02513"></a><span class="lineno"> 2513</span>&#160;  <span class="keywordflow">return</span> (point) t.tet[locver2dest[t.loc][t.ver] + 4];</div>
<div class="line"><a name="l02514"></a><span class="lineno"> 2514</span>&#160;}</div>
<div class="line"><a name="l02515"></a><span class="lineno"> 2515</span>&#160;</div>
<div class="line"><a name="l02516"></a><span class="lineno"> 2516</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::apex(triface&amp; t) {</div>
<div class="line"><a name="l02517"></a><span class="lineno"> 2517</span>&#160;  <span class="keywordflow">return</span> (point) t.tet[locver2apex[t.loc][t.ver] + 4];</div>
<div class="line"><a name="l02518"></a><span class="lineno"> 2518</span>&#160;}</div>
<div class="line"><a name="l02519"></a><span class="lineno"> 2519</span>&#160;</div>
<div class="line"><a name="l02520"></a><span class="lineno"> 2520</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::oppo(triface&amp; t) {</div>
<div class="line"><a name="l02521"></a><span class="lineno"> 2521</span>&#160;  <span class="keywordflow">return</span> (point) t.tet[loc2oppo[t.loc] + 4];</div>
<div class="line"><a name="l02522"></a><span class="lineno"> 2522</span>&#160;}</div>
<div class="line"><a name="l02523"></a><span class="lineno"> 2523</span>&#160;</div>
<div class="line"><a name="l02524"></a><span class="lineno"> 2524</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setorg(triface&amp; t, point pointptr) {</div>
<div class="line"><a name="l02525"></a><span class="lineno"> 2525</span>&#160;  t.tet[locver2org[t.loc][t.ver] + 4] = (tetrahedron) pointptr;</div>
<div class="line"><a name="l02526"></a><span class="lineno"> 2526</span>&#160;}</div>
<div class="line"><a name="l02527"></a><span class="lineno"> 2527</span>&#160;</div>
<div class="line"><a name="l02528"></a><span class="lineno"> 2528</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setdest(triface&amp; t, point pointptr) {</div>
<div class="line"><a name="l02529"></a><span class="lineno"> 2529</span>&#160;  t.tet[locver2dest[t.loc][t.ver] + 4] = (tetrahedron) pointptr;</div>
<div class="line"><a name="l02530"></a><span class="lineno"> 2530</span>&#160;}</div>
<div class="line"><a name="l02531"></a><span class="lineno"> 2531</span>&#160;</div>
<div class="line"><a name="l02532"></a><span class="lineno"> 2532</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setapex(triface&amp; t, point pointptr) {</div>
<div class="line"><a name="l02533"></a><span class="lineno"> 2533</span>&#160;  t.tet[locver2apex[t.loc][t.ver] + 4] = (tetrahedron) pointptr;</div>
<div class="line"><a name="l02534"></a><span class="lineno"> 2534</span>&#160;}</div>
<div class="line"><a name="l02535"></a><span class="lineno"> 2535</span>&#160;</div>
<div class="line"><a name="l02536"></a><span class="lineno"> 2536</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setoppo(triface&amp; t, point pointptr) {</div>
<div class="line"><a name="l02537"></a><span class="lineno"> 2537</span>&#160;  t.tet[loc2oppo[t.loc] + 4] = (tetrahedron) pointptr;</div>
<div class="line"><a name="l02538"></a><span class="lineno"> 2538</span>&#160;}</div>
<div class="line"><a name="l02539"></a><span class="lineno"> 2539</span>&#160;</div>
<div class="line"><a name="l02540"></a><span class="lineno"> 2540</span>&#160;<span class="comment">// These primitives were drived from Mucke&#39;s triangle-edge data structure</span></div>
<div class="line"><a name="l02541"></a><span class="lineno"> 2541</span>&#160;<span class="comment">//   to change face-edge relation in a tetrahedron (esym, enext and enext2)</span></div>
<div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;<span class="comment">//   or between two tetrahedra (fnext).</span></div>
<div class="line"><a name="l02543"></a><span class="lineno"> 2543</span>&#160;</div>
<div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160;<span class="comment">// If e0 = e(i, j), e1 = e(j, i), that is e0 and e1 are the two directions</span></div>
<div class="line"><a name="l02545"></a><span class="lineno"> 2545</span>&#160;<span class="comment">//   of the same undirected edge of a face. e0.sym() = e1 and vice versa.</span></div>
<div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;</div>
<div class="line"><a name="l02547"></a><span class="lineno"> 2547</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::esym(triface&amp; t1, triface&amp; t2) {</div>
<div class="line"><a name="l02548"></a><span class="lineno"> 2548</span>&#160;  t2.tet = t1.tet;</div>
<div class="line"><a name="l02549"></a><span class="lineno"> 2549</span>&#160;  t2.loc = t1.loc;</div>
<div class="line"><a name="l02550"></a><span class="lineno"> 2550</span>&#160;  t2.ver = t1.ver + (EdgeRing(t1.ver) ? -1 : 1);</div>
<div class="line"><a name="l02551"></a><span class="lineno"> 2551</span>&#160;}</div>
<div class="line"><a name="l02552"></a><span class="lineno"> 2552</span>&#160;</div>
<div class="line"><a name="l02553"></a><span class="lineno"> 2553</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::esymself(triface&amp; t) {</div>
<div class="line"><a name="l02554"></a><span class="lineno"> 2554</span>&#160;  t.ver += (EdgeRing(t.ver) ? -1 : 1);</div>
<div class="line"><a name="l02555"></a><span class="lineno"> 2555</span>&#160;}</div>
<div class="line"><a name="l02556"></a><span class="lineno"> 2556</span>&#160;</div>
<div class="line"><a name="l02557"></a><span class="lineno"> 2557</span>&#160;<span class="comment">// If e0 and e1 are both in the same edge ring of a face, e1 = e0.enext().</span></div>
<div class="line"><a name="l02558"></a><span class="lineno"> 2558</span>&#160;</div>
<div class="line"><a name="l02559"></a><span class="lineno"> 2559</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enext(triface&amp; t1, triface&amp; t2) {</div>
<div class="line"><a name="l02560"></a><span class="lineno"> 2560</span>&#160;  t2.tet = t1.tet;</div>
<div class="line"><a name="l02561"></a><span class="lineno"> 2561</span>&#160;  t2.loc = t1.loc;</div>
<div class="line"><a name="l02562"></a><span class="lineno"> 2562</span>&#160;  t2.ver = ve[t1.ver];</div>
<div class="line"><a name="l02563"></a><span class="lineno"> 2563</span>&#160;}</div>
<div class="line"><a name="l02564"></a><span class="lineno"> 2564</span>&#160;</div>
<div class="line"><a name="l02565"></a><span class="lineno"> 2565</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enextself(triface&amp; t) {</div>
<div class="line"><a name="l02566"></a><span class="lineno"> 2566</span>&#160;  t.ver = ve[t.ver];</div>
<div class="line"><a name="l02567"></a><span class="lineno"> 2567</span>&#160;}</div>
<div class="line"><a name="l02568"></a><span class="lineno"> 2568</span>&#160;</div>
<div class="line"><a name="l02569"></a><span class="lineno"> 2569</span>&#160;<span class="comment">// enext2() is equal to e2 = e0.enext().enext()</span></div>
<div class="line"><a name="l02570"></a><span class="lineno"> 2570</span>&#160;</div>
<div class="line"><a name="l02571"></a><span class="lineno"> 2571</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enext2(triface&amp; t1, triface&amp; t2) {</div>
<div class="line"><a name="l02572"></a><span class="lineno"> 2572</span>&#160;  t2.tet = t1.tet;</div>
<div class="line"><a name="l02573"></a><span class="lineno"> 2573</span>&#160;  t2.loc = t1.loc;</div>
<div class="line"><a name="l02574"></a><span class="lineno"> 2574</span>&#160;  t2.ver = ve[ve[t1.ver]];</div>
<div class="line"><a name="l02575"></a><span class="lineno"> 2575</span>&#160;}</div>
<div class="line"><a name="l02576"></a><span class="lineno"> 2576</span>&#160;</div>
<div class="line"><a name="l02577"></a><span class="lineno"> 2577</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enext2self(triface&amp; t) {</div>
<div class="line"><a name="l02578"></a><span class="lineno"> 2578</span>&#160;  t.ver = ve[ve[t.ver]];</div>
<div class="line"><a name="l02579"></a><span class="lineno"> 2579</span>&#160;}</div>
<div class="line"><a name="l02580"></a><span class="lineno"> 2580</span>&#160;</div>
<div class="line"><a name="l02581"></a><span class="lineno"> 2581</span>&#160;<span class="comment">// If f0 and f1 are both in the same face ring of a face, f1 = f0.fnext().</span></div>
<div class="line"><a name="l02582"></a><span class="lineno"> 2582</span>&#160;<span class="comment">//   If f1 exists, return true. Otherwise, return false, i.e., f0 is a</span></div>
<div class="line"><a name="l02583"></a><span class="lineno"> 2583</span>&#160;<span class="comment">//   boundary or hull face.</span></div>
<div class="line"><a name="l02584"></a><span class="lineno"> 2584</span>&#160;</div>
<div class="line"><a name="l02585"></a><span class="lineno"> 2585</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::fnext(triface&amp; t1, triface&amp; t2) </div>
<div class="line"><a name="l02586"></a><span class="lineno"> 2586</span>&#160;{</div>
<div class="line"><a name="l02587"></a><span class="lineno"> 2587</span>&#160;  <span class="comment">// Get the next face.</span></div>
<div class="line"><a name="l02588"></a><span class="lineno"> 2588</span>&#160;  t2.loc = locver2nextf[t1.loc][t1.ver][0];</div>
<div class="line"><a name="l02589"></a><span class="lineno"> 2589</span>&#160;  <span class="comment">// Is the next face in the same tet?</span></div>
<div class="line"><a name="l02590"></a><span class="lineno"> 2590</span>&#160;  <span class="keywordflow">if</span> (t2.loc != -1) {</div>
<div class="line"><a name="l02591"></a><span class="lineno"> 2591</span>&#160;    <span class="comment">// It&#39;s in the same tet. Get the edge version.</span></div>
<div class="line"><a name="l02592"></a><span class="lineno"> 2592</span>&#160;    t2.ver = locver2nextf[t1.loc][t1.ver][1];</div>
<div class="line"><a name="l02593"></a><span class="lineno"> 2593</span>&#160;    t2.tet = t1.tet;</div>
<div class="line"><a name="l02594"></a><span class="lineno"> 2594</span>&#160;  } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02595"></a><span class="lineno"> 2595</span>&#160;    <span class="comment">// The next face is in the neigbhour of &#39;t1&#39;.</span></div>
<div class="line"><a name="l02596"></a><span class="lineno"> 2596</span>&#160;    sym(t1, t2);</div>
<div class="line"><a name="l02597"></a><span class="lineno"> 2597</span>&#160;    <span class="keywordflow">if</span> (t2.tet != dummytet) {</div>
<div class="line"><a name="l02598"></a><span class="lineno"> 2598</span>&#160;      <span class="comment">// Find the corresponding edge in t2.</span></div>
<div class="line"><a name="l02599"></a><span class="lineno"> 2599</span>&#160;      point torg;</div>
<div class="line"><a name="l02600"></a><span class="lineno"> 2600</span>&#160;      <span class="keywordtype">int</span> tloc, tver, i;</div>
<div class="line"><a name="l02601"></a><span class="lineno"> 2601</span>&#160;      t2.ver = 0;</div>
<div class="line"><a name="l02602"></a><span class="lineno"> 2602</span>&#160;      torg = org(t1);</div>
<div class="line"><a name="l02603"></a><span class="lineno"> 2603</span>&#160;      <span class="keywordflow">for</span> (i = 0; (i &lt; 3) &amp;&amp; (org(t2) != torg); i++) {</div>
<div class="line"><a name="l02604"></a><span class="lineno"> 2604</span>&#160;        enextself(t2);</div>
<div class="line"><a name="l02605"></a><span class="lineno"> 2605</span>&#160;      }</div>
<div class="line"><a name="l02606"></a><span class="lineno"> 2606</span>&#160;      <span class="comment">// Go to the next face in t2.</span></div>
<div class="line"><a name="l02607"></a><span class="lineno"> 2607</span>&#160;      tloc = t2.loc;</div>
<div class="line"><a name="l02608"></a><span class="lineno"> 2608</span>&#160;      tver = t2.ver;</div>
<div class="line"><a name="l02609"></a><span class="lineno"> 2609</span>&#160;      t2.loc = locver2nextf[tloc][tver][0];</div>
<div class="line"><a name="l02610"></a><span class="lineno"> 2610</span>&#160;      t2.ver = locver2nextf[tloc][tver][1];</div>
<div class="line"><a name="l02611"></a><span class="lineno"> 2611</span>&#160;    }</div>
<div class="line"><a name="l02612"></a><span class="lineno"> 2612</span>&#160;  }</div>
<div class="line"><a name="l02613"></a><span class="lineno"> 2613</span>&#160;  <span class="keywordflow">return</span> t2.tet != dummytet;</div>
<div class="line"><a name="l02614"></a><span class="lineno"> 2614</span>&#160;}</div>
<div class="line"><a name="l02615"></a><span class="lineno"> 2615</span>&#160;</div>
<div class="line"><a name="l02616"></a><span class="lineno"> 2616</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::fnextself(triface&amp; t1) </div>
<div class="line"><a name="l02617"></a><span class="lineno"> 2617</span>&#160;{</div>
<div class="line"><a name="l02618"></a><span class="lineno"> 2618</span>&#160;  triface t2;</div>
<div class="line"><a name="l02619"></a><span class="lineno"> 2619</span>&#160;</div>
<div class="line"><a name="l02620"></a><span class="lineno"> 2620</span>&#160;  <span class="comment">// Get the next face.</span></div>
<div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;  t2.loc = locver2nextf[t1.loc][t1.ver][0];</div>
<div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;  <span class="comment">// Is the next face in the same tet?</span></div>
<div class="line"><a name="l02623"></a><span class="lineno"> 2623</span>&#160;  <span class="keywordflow">if</span> (t2.loc != -1) {</div>
<div class="line"><a name="l02624"></a><span class="lineno"> 2624</span>&#160;    <span class="comment">// It&#39;s in the same tet. Get the edge version.</span></div>
<div class="line"><a name="l02625"></a><span class="lineno"> 2625</span>&#160;    t2.ver = locver2nextf[t1.loc][t1.ver][1];</div>
<div class="line"><a name="l02626"></a><span class="lineno"> 2626</span>&#160;    t1.loc = t2.loc;</div>
<div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;    t1.ver = t2.ver;</div>
<div class="line"><a name="l02628"></a><span class="lineno"> 2628</span>&#160;  } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02629"></a><span class="lineno"> 2629</span>&#160;    <span class="comment">// The next face is in the neigbhour of &#39;t1&#39;.</span></div>
<div class="line"><a name="l02630"></a><span class="lineno"> 2630</span>&#160;    sym(t1, t2);</div>
<div class="line"><a name="l02631"></a><span class="lineno"> 2631</span>&#160;    <span class="keywordflow">if</span> (t2.tet != dummytet) {</div>
<div class="line"><a name="l02632"></a><span class="lineno"> 2632</span>&#160;      <span class="comment">// Find the corresponding edge in t2.</span></div>
<div class="line"><a name="l02633"></a><span class="lineno"> 2633</span>&#160;      point torg;</div>
<div class="line"><a name="l02634"></a><span class="lineno"> 2634</span>&#160;      <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l02635"></a><span class="lineno"> 2635</span>&#160;      t2.ver = 0;</div>
<div class="line"><a name="l02636"></a><span class="lineno"> 2636</span>&#160;      torg = org(t1);</div>
<div class="line"><a name="l02637"></a><span class="lineno"> 2637</span>&#160;      <span class="keywordflow">for</span> (i = 0; (i &lt; 3) &amp;&amp; (org(t2) != torg); i++) {</div>
<div class="line"><a name="l02638"></a><span class="lineno"> 2638</span>&#160;        enextself(t2);</div>
<div class="line"><a name="l02639"></a><span class="lineno"> 2639</span>&#160;      }</div>
<div class="line"><a name="l02640"></a><span class="lineno"> 2640</span>&#160;      t1.loc = locver2nextf[t2.loc][t2.ver][0];</div>
<div class="line"><a name="l02641"></a><span class="lineno"> 2641</span>&#160;      t1.ver = locver2nextf[t2.loc][t2.ver][1];</div>
<div class="line"><a name="l02642"></a><span class="lineno"> 2642</span>&#160;      t1.tet = t2.tet;</div>
<div class="line"><a name="l02643"></a><span class="lineno"> 2643</span>&#160;    }</div>
<div class="line"><a name="l02644"></a><span class="lineno"> 2644</span>&#160;  }</div>
<div class="line"><a name="l02645"></a><span class="lineno"> 2645</span>&#160;  <span class="keywordflow">return</span> t2.tet != dummytet;</div>
<div class="line"><a name="l02646"></a><span class="lineno"> 2646</span>&#160;}</div>
<div class="line"><a name="l02647"></a><span class="lineno"> 2647</span>&#160;</div>
<div class="line"><a name="l02648"></a><span class="lineno"> 2648</span>&#160;<span class="comment">// Given a face t1, find the face f2 in the adjacent tet. If t2 is not</span></div>
<div class="line"><a name="l02649"></a><span class="lineno"> 2649</span>&#160;<span class="comment">//   a dummytet, then t1 and t2 refer to the same edge. Moreover, t2&#39;s</span></div>
<div class="line"><a name="l02650"></a><span class="lineno"> 2650</span>&#160;<span class="comment">//   edge must be in 0th edge ring, e.g., t2.ver is one of {0, 2, 4}.</span></div>
<div class="line"><a name="l02651"></a><span class="lineno"> 2651</span>&#160;<span class="comment">//   No matter what edge version t1 is.</span></div>
<div class="line"><a name="l02652"></a><span class="lineno"> 2652</span>&#160;</div>
<div class="line"><a name="l02653"></a><span class="lineno"> 2653</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::symedge(triface&amp; t1, triface&amp; t2)</div>
<div class="line"><a name="l02654"></a><span class="lineno"> 2654</span>&#160;{</div>
<div class="line"><a name="l02655"></a><span class="lineno"> 2655</span>&#160;  decode(t1.tet[t1.loc], t2);</div>
<div class="line"><a name="l02656"></a><span class="lineno"> 2656</span>&#160;  <span class="keywordflow">if</span> (t2.tet != dummytet) {</div>
<div class="line"><a name="l02657"></a><span class="lineno"> 2657</span>&#160;    <span class="comment">// Search the edge of t1 in t2.</span></div>
<div class="line"><a name="l02658"></a><span class="lineno"> 2658</span>&#160;    point tapex = apex(t1);</div>
<div class="line"><a name="l02659"></a><span class="lineno"> 2659</span>&#160;    <span class="keywordflow">if</span> ((point) (t2.tet[locver2apex[t2.loc][0] + 4]) == tapex) {</div>
<div class="line"><a name="l02660"></a><span class="lineno"> 2660</span>&#160;      t2.ver = 0;</div>
<div class="line"><a name="l02661"></a><span class="lineno"> 2661</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((point) (t2.tet[locver2apex[t2.loc][2] + 4]) == tapex) {</div>
<div class="line"><a name="l02662"></a><span class="lineno"> 2662</span>&#160;      t2.ver = 2;</div>
<div class="line"><a name="l02663"></a><span class="lineno"> 2663</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02664"></a><span class="lineno"> 2664</span>&#160;      assert((point) (t2.tet[locver2apex[t2.loc][4] + 4]) == tapex);</div>
<div class="line"><a name="l02665"></a><span class="lineno"> 2665</span>&#160;      t2.ver = 4;</div>
<div class="line"><a name="l02666"></a><span class="lineno"> 2666</span>&#160;    }</div>
<div class="line"><a name="l02667"></a><span class="lineno"> 2667</span>&#160;  }</div>
<div class="line"><a name="l02668"></a><span class="lineno"> 2668</span>&#160;}</div>
<div class="line"><a name="l02669"></a><span class="lineno"> 2669</span>&#160;</div>
<div class="line"><a name="l02670"></a><span class="lineno"> 2670</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::symedgeself(triface&amp; t)</div>
<div class="line"><a name="l02671"></a><span class="lineno"> 2671</span>&#160;{</div>
<div class="line"><a name="l02672"></a><span class="lineno"> 2672</span>&#160;  tetrahedron ptr;</div>
<div class="line"><a name="l02673"></a><span class="lineno"> 2673</span>&#160;  point tapex;</div>
<div class="line"><a name="l02674"></a><span class="lineno"> 2674</span>&#160;</div>
<div class="line"><a name="l02675"></a><span class="lineno"> 2675</span>&#160;  ptr = t.tet[t.loc];</div>
<div class="line"><a name="l02676"></a><span class="lineno"> 2676</span>&#160;  tapex = apex(t);</div>
<div class="line"><a name="l02677"></a><span class="lineno"> 2677</span>&#160;</div>
<div class="line"><a name="l02678"></a><span class="lineno"> 2678</span>&#160;  decode(ptr, t);</div>
<div class="line"><a name="l02679"></a><span class="lineno"> 2679</span>&#160;  <span class="keywordflow">if</span> (t.tet != dummytet) {</div>
<div class="line"><a name="l02680"></a><span class="lineno"> 2680</span>&#160;    <span class="comment">// Search the edge of t1 in t2.</span></div>
<div class="line"><a name="l02681"></a><span class="lineno"> 2681</span>&#160;    <span class="keywordflow">if</span> ((point) (t.tet[locver2apex[t.loc][0] + 4]) == tapex) {</div>
<div class="line"><a name="l02682"></a><span class="lineno"> 2682</span>&#160;      t.ver = 0;</div>
<div class="line"><a name="l02683"></a><span class="lineno"> 2683</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((point) (t.tet[locver2apex[t.loc][2] + 4]) == tapex) {</div>
<div class="line"><a name="l02684"></a><span class="lineno"> 2684</span>&#160;      t.ver = 2;</div>
<div class="line"><a name="l02685"></a><span class="lineno"> 2685</span>&#160;    } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02686"></a><span class="lineno"> 2686</span>&#160;      assert((point) (t.tet[locver2apex[t.loc][4] + 4]) == tapex);</div>
<div class="line"><a name="l02687"></a><span class="lineno"> 2687</span>&#160;      t.ver = 4;</div>
<div class="line"><a name="l02688"></a><span class="lineno"> 2688</span>&#160;    }</div>
<div class="line"><a name="l02689"></a><span class="lineno"> 2689</span>&#160;  }</div>
<div class="line"><a name="l02690"></a><span class="lineno"> 2690</span>&#160;}</div>
<div class="line"><a name="l02691"></a><span class="lineno"> 2691</span>&#160;</div>
<div class="line"><a name="l02692"></a><span class="lineno"> 2692</span>&#160;<span class="comment">// Given a face t1, find the next face t2 in the face ring, t1 and t2</span></div>
<div class="line"><a name="l02693"></a><span class="lineno"> 2693</span>&#160;<span class="comment">//   are in two different tetrahedra. If the next face is a hull face,</span></div>
<div class="line"><a name="l02694"></a><span class="lineno"> 2694</span>&#160;<span class="comment">//   t2 is dummytet.</span></div>
<div class="line"><a name="l02695"></a><span class="lineno"> 2695</span>&#160;</div>
<div class="line"><a name="l02696"></a><span class="lineno"> 2696</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tfnext(triface&amp; t1, triface&amp; t2)</div>
<div class="line"><a name="l02697"></a><span class="lineno"> 2697</span>&#160;{</div>
<div class="line"><a name="l02698"></a><span class="lineno"> 2698</span>&#160;  <span class="keywordtype">int</span> *iptr;</div>
<div class="line"><a name="l02699"></a><span class="lineno"> 2699</span>&#160;</div>
<div class="line"><a name="l02700"></a><span class="lineno"> 2700</span>&#160;  <span class="keywordflow">if</span> ((t1.ver &amp; 1) == 0) {</div>
<div class="line"><a name="l02701"></a><span class="lineno"> 2701</span>&#160;    t2.tet = t1.tet;</div>
<div class="line"><a name="l02702"></a><span class="lineno"> 2702</span>&#160;    iptr = locver2nextf[t1.loc][t1.ver];</div>
<div class="line"><a name="l02703"></a><span class="lineno"> 2703</span>&#160;    t2.loc = iptr[0];</div>
<div class="line"><a name="l02704"></a><span class="lineno"> 2704</span>&#160;    t2.ver = iptr[1];</div>
<div class="line"><a name="l02705"></a><span class="lineno"> 2705</span>&#160;    symedgeself(t2);  <span class="comment">// t2.tet may be dummytet.</span></div>
<div class="line"><a name="l02706"></a><span class="lineno"> 2706</span>&#160;  } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02707"></a><span class="lineno"> 2707</span>&#160;    symedge(t1, t2);</div>
<div class="line"><a name="l02708"></a><span class="lineno"> 2708</span>&#160;    <span class="keywordflow">if</span> (t2.tet != dummytet) {</div>
<div class="line"><a name="l02709"></a><span class="lineno"> 2709</span>&#160;      iptr = locver2nextf[t2.loc][t2.ver];</div>
<div class="line"><a name="l02710"></a><span class="lineno"> 2710</span>&#160;      t2.loc = iptr[0];</div>
<div class="line"><a name="l02711"></a><span class="lineno"> 2711</span>&#160;      t2.ver = iptr[1];</div>
<div class="line"><a name="l02712"></a><span class="lineno"> 2712</span>&#160;    }</div>
<div class="line"><a name="l02713"></a><span class="lineno"> 2713</span>&#160;  }</div>
<div class="line"><a name="l02714"></a><span class="lineno"> 2714</span>&#160;}</div>
<div class="line"><a name="l02715"></a><span class="lineno"> 2715</span>&#160;</div>
<div class="line"><a name="l02716"></a><span class="lineno"> 2716</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tfnextself(triface&amp; t)</div>
<div class="line"><a name="l02717"></a><span class="lineno"> 2717</span>&#160;{</div>
<div class="line"><a name="l02718"></a><span class="lineno"> 2718</span>&#160;  <span class="keywordtype">int</span> *iptr;</div>
<div class="line"><a name="l02719"></a><span class="lineno"> 2719</span>&#160;</div>
<div class="line"><a name="l02720"></a><span class="lineno"> 2720</span>&#160;  <span class="keywordflow">if</span> ((t.ver &amp; 1) == 0) {</div>
<div class="line"><a name="l02721"></a><span class="lineno"> 2721</span>&#160;    iptr = locver2nextf[t.loc][t.ver];</div>
<div class="line"><a name="l02722"></a><span class="lineno"> 2722</span>&#160;    t.loc = iptr[0];</div>
<div class="line"><a name="l02723"></a><span class="lineno"> 2723</span>&#160;    t.ver = iptr[1];</div>
<div class="line"><a name="l02724"></a><span class="lineno"> 2724</span>&#160;    symedgeself(t); <span class="comment">// t.tet may be dummytet.</span></div>
<div class="line"><a name="l02725"></a><span class="lineno"> 2725</span>&#160;  } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l02726"></a><span class="lineno"> 2726</span>&#160;    symedgeself(t);</div>
<div class="line"><a name="l02727"></a><span class="lineno"> 2727</span>&#160;    <span class="keywordflow">if</span> (t.tet != dummytet) {</div>
<div class="line"><a name="l02728"></a><span class="lineno"> 2728</span>&#160;      iptr = locver2nextf[t.loc][t.ver];</div>
<div class="line"><a name="l02729"></a><span class="lineno"> 2729</span>&#160;      t.loc = iptr[0];</div>
<div class="line"><a name="l02730"></a><span class="lineno"> 2730</span>&#160;      t.ver = iptr[1];</div>
<div class="line"><a name="l02731"></a><span class="lineno"> 2731</span>&#160;    }</div>
<div class="line"><a name="l02732"></a><span class="lineno"> 2732</span>&#160;  }</div>
<div class="line"><a name="l02733"></a><span class="lineno"> 2733</span>&#160;}</div>
<div class="line"><a name="l02734"></a><span class="lineno"> 2734</span>&#160;</div>
<div class="line"><a name="l02735"></a><span class="lineno"> 2735</span>&#160;<span class="comment">// enextfnext() and enext2fnext() are combination primitives of enext(),</span></div>
<div class="line"><a name="l02736"></a><span class="lineno"> 2736</span>&#160;<span class="comment">//   enext2() and fnext().</span></div>
<div class="line"><a name="l02737"></a><span class="lineno"> 2737</span>&#160;</div>
<div class="line"><a name="l02738"></a><span class="lineno"> 2738</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enextfnext(triface&amp; t1, triface&amp; t2) {</div>
<div class="line"><a name="l02739"></a><span class="lineno"> 2739</span>&#160;  enext(t1, t2);</div>
<div class="line"><a name="l02740"></a><span class="lineno"> 2740</span>&#160;  fnextself(t2);</div>
<div class="line"><a name="l02741"></a><span class="lineno"> 2741</span>&#160;}</div>
<div class="line"><a name="l02742"></a><span class="lineno"> 2742</span>&#160;</div>
<div class="line"><a name="l02743"></a><span class="lineno"> 2743</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enextfnextself(triface&amp; t) {</div>
<div class="line"><a name="l02744"></a><span class="lineno"> 2744</span>&#160;  enextself(t);</div>
<div class="line"><a name="l02745"></a><span class="lineno"> 2745</span>&#160;  fnextself(t);</div>
<div class="line"><a name="l02746"></a><span class="lineno"> 2746</span>&#160;}</div>
<div class="line"><a name="l02747"></a><span class="lineno"> 2747</span>&#160;</div>
<div class="line"><a name="l02748"></a><span class="lineno"> 2748</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enext2fnext(triface&amp; t1, triface&amp; t2) {</div>
<div class="line"><a name="l02749"></a><span class="lineno"> 2749</span>&#160;  enext2(t1, t2);</div>
<div class="line"><a name="l02750"></a><span class="lineno"> 2750</span>&#160;  fnextself(t2);</div>
<div class="line"><a name="l02751"></a><span class="lineno"> 2751</span>&#160;}</div>
<div class="line"><a name="l02752"></a><span class="lineno"> 2752</span>&#160;</div>
<div class="line"><a name="l02753"></a><span class="lineno"> 2753</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::enext2fnextself(triface&amp; t) {</div>
<div class="line"><a name="l02754"></a><span class="lineno"> 2754</span>&#160;  enext2self(t);</div>
<div class="line"><a name="l02755"></a><span class="lineno"> 2755</span>&#160;  fnextself(t);</div>
<div class="line"><a name="l02756"></a><span class="lineno"> 2756</span>&#160;}</div>
<div class="line"><a name="l02757"></a><span class="lineno"> 2757</span>&#160;</div>
<div class="line"><a name="l02758"></a><span class="lineno"> 2758</span>&#160;<span class="comment">// Check or set a tetrahedron&#39;s attributes.</span></div>
<div class="line"><a name="l02759"></a><span class="lineno"> 2759</span>&#160;</div>
<div class="line"><a name="l02760"></a><span class="lineno"> 2760</span>&#160;<span class="keyword">inline</span> REAL tetgenmesh::elemattribute(tetrahedron* ptr, <span class="keywordtype">int</span> attnum) {</div>
<div class="line"><a name="l02761"></a><span class="lineno"> 2761</span>&#160;  <span class="keywordflow">return</span> ((REAL *) (ptr))[elemattribindex + attnum];</div>
<div class="line"><a name="l02762"></a><span class="lineno"> 2762</span>&#160;}</div>
<div class="line"><a name="l02763"></a><span class="lineno"> 2763</span>&#160;</div>
<div class="line"><a name="l02764"></a><span class="lineno"> 2764</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::</div>
<div class="line"><a name="l02765"></a><span class="lineno"> 2765</span>&#160;setelemattribute(tetrahedron* ptr, <span class="keywordtype">int</span> attnum, REAL value){</div>
<div class="line"><a name="l02766"></a><span class="lineno"> 2766</span>&#160;  ((REAL *) (ptr))[elemattribindex + attnum] = value;</div>
<div class="line"><a name="l02767"></a><span class="lineno"> 2767</span>&#160;}</div>
<div class="line"><a name="l02768"></a><span class="lineno"> 2768</span>&#160;</div>
<div class="line"><a name="l02769"></a><span class="lineno"> 2769</span>&#160;<span class="comment">// Check or set a tetrahedron&#39;s maximum volume bound.</span></div>
<div class="line"><a name="l02770"></a><span class="lineno"> 2770</span>&#160;</div>
<div class="line"><a name="l02771"></a><span class="lineno"> 2771</span>&#160;<span class="keyword">inline</span> REAL tetgenmesh::volumebound(tetrahedron* ptr) {</div>
<div class="line"><a name="l02772"></a><span class="lineno"> 2772</span>&#160;  <span class="keywordflow">return</span> ((REAL *) (ptr))[volumeboundindex];</div>
<div class="line"><a name="l02773"></a><span class="lineno"> 2773</span>&#160;}</div>
<div class="line"><a name="l02774"></a><span class="lineno"> 2774</span>&#160;</div>
<div class="line"><a name="l02775"></a><span class="lineno"> 2775</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setvolumebound(tetrahedron* ptr, REAL value) {</div>
<div class="line"><a name="l02776"></a><span class="lineno"> 2776</span>&#160;  ((REAL *) (ptr))[volumeboundindex] = value;</div>
<div class="line"><a name="l02777"></a><span class="lineno"> 2777</span>&#160;}</div>
<div class="line"><a name="l02778"></a><span class="lineno"> 2778</span>&#160;</div>
<div class="line"><a name="l02779"></a><span class="lineno"> 2779</span>&#160;<span class="comment">// Check or set a tetrahedron&#39;s marker.</span></div>
<div class="line"><a name="l02780"></a><span class="lineno"> 2780</span>&#160;</div>
<div class="line"><a name="l02781"></a><span class="lineno"> 2781</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> tetgenmesh::getelemmarker(tetrahedron* ptr) {</div>
<div class="line"><a name="l02782"></a><span class="lineno"> 2782</span>&#160;  <span class="keywordflow">return</span> ((<span class="keywordtype">int</span> *) (ptr))[elemmarkerindex];</div>
<div class="line"><a name="l02783"></a><span class="lineno"> 2783</span>&#160;}</div>
<div class="line"><a name="l02784"></a><span class="lineno"> 2784</span>&#160;</div>
<div class="line"><a name="l02785"></a><span class="lineno"> 2785</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setelemmarker(tetrahedron* ptr, <span class="keywordtype">int</span> value) {</div>
<div class="line"><a name="l02786"></a><span class="lineno"> 2786</span>&#160;  ((<span class="keywordtype">int</span> *) (ptr))[elemmarkerindex] = value;</div>
<div class="line"><a name="l02787"></a><span class="lineno"> 2787</span>&#160;}</div>
<div class="line"><a name="l02788"></a><span class="lineno"> 2788</span>&#160;</div>
<div class="line"><a name="l02789"></a><span class="lineno"> 2789</span>&#160;<span class="comment">// infect(), infected(), uninfect() -- primitives to flag or unflag a</span></div>
<div class="line"><a name="l02790"></a><span class="lineno"> 2790</span>&#160;<span class="comment">//   tetrahedron. The last bit of the element marker is flagged (1)</span></div>
<div class="line"><a name="l02791"></a><span class="lineno"> 2791</span>&#160;<span class="comment">//   or unflagged (0).</span></div>
<div class="line"><a name="l02792"></a><span class="lineno"> 2792</span>&#160;</div>
<div class="line"><a name="l02793"></a><span class="lineno"> 2793</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::infect(triface&amp; t) {</div>
<div class="line"><a name="l02794"></a><span class="lineno"> 2794</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] |= (<span class="keywordtype">int</span>) 1;</div>
<div class="line"><a name="l02795"></a><span class="lineno"> 2795</span>&#160;}</div>
<div class="line"><a name="l02796"></a><span class="lineno"> 2796</span>&#160;</div>
<div class="line"><a name="l02797"></a><span class="lineno"> 2797</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::uninfect(triface&amp; t) {</div>
<div class="line"><a name="l02798"></a><span class="lineno"> 2798</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp;= ~(<span class="keywordtype">int</span>) 1;</div>
<div class="line"><a name="l02799"></a><span class="lineno"> 2799</span>&#160;}</div>
<div class="line"><a name="l02800"></a><span class="lineno"> 2800</span>&#160;</div>
<div class="line"><a name="l02801"></a><span class="lineno"> 2801</span>&#160;<span class="comment">// Test a tetrahedron for viral infection.</span></div>
<div class="line"><a name="l02802"></a><span class="lineno"> 2802</span>&#160;</div>
<div class="line"><a name="l02803"></a><span class="lineno"> 2803</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::infected(triface&amp; t) {</div>
<div class="line"><a name="l02804"></a><span class="lineno"> 2804</span>&#160;  <span class="keywordflow">return</span> (((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp; (<span class="keywordtype">int</span>) 1) != 0;</div>
<div class="line"><a name="l02805"></a><span class="lineno"> 2805</span>&#160;}</div>
<div class="line"><a name="l02806"></a><span class="lineno"> 2806</span>&#160;</div>
<div class="line"><a name="l02807"></a><span class="lineno"> 2807</span>&#160;<span class="comment">// marktest(), marktested(), unmarktest() -- primitives to flag or unflag a</span></div>
<div class="line"><a name="l02808"></a><span class="lineno"> 2808</span>&#160;<span class="comment">//   tetrahedron.  The last second bit of the element marker is marked (1)</span></div>
<div class="line"><a name="l02809"></a><span class="lineno"> 2809</span>&#160;<span class="comment">//   or unmarked (0).</span></div>
<div class="line"><a name="l02810"></a><span class="lineno"> 2810</span>&#160;<span class="comment">// One needs them in forming Bowyer-Watson cavity, to mark a tetrahedron if</span></div>
<div class="line"><a name="l02811"></a><span class="lineno"> 2811</span>&#160;<span class="comment">//   it has been checked (for Delaunay case) so later check can be avoided.</span></div>
<div class="line"><a name="l02812"></a><span class="lineno"> 2812</span>&#160;</div>
<div class="line"><a name="l02813"></a><span class="lineno"> 2813</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::marktest(triface&amp; t) {</div>
<div class="line"><a name="l02814"></a><span class="lineno"> 2814</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] |= (<span class="keywordtype">int</span>) 2;</div>
<div class="line"><a name="l02815"></a><span class="lineno"> 2815</span>&#160;}</div>
<div class="line"><a name="l02816"></a><span class="lineno"> 2816</span>&#160;</div>
<div class="line"><a name="l02817"></a><span class="lineno"> 2817</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::unmarktest(triface&amp; t) {</div>
<div class="line"><a name="l02818"></a><span class="lineno"> 2818</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp;= ~(<span class="keywordtype">int</span>) 2;</div>
<div class="line"><a name="l02819"></a><span class="lineno"> 2819</span>&#160;}</div>
<div class="line"><a name="l02820"></a><span class="lineno"> 2820</span>&#160;    </div>
<div class="line"><a name="l02821"></a><span class="lineno"> 2821</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::marktested(triface&amp; t) {</div>
<div class="line"><a name="l02822"></a><span class="lineno"> 2822</span>&#160;  <span class="keywordflow">return</span> (((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp; (<span class="keywordtype">int</span>) 2) != 0;</div>
<div class="line"><a name="l02823"></a><span class="lineno"> 2823</span>&#160;}</div>
<div class="line"><a name="l02824"></a><span class="lineno"> 2824</span>&#160;</div>
<div class="line"><a name="l02825"></a><span class="lineno"> 2825</span>&#160;<span class="comment">// markface(), unmarkface(), facemarked() -- primitives to flag or unflag a</span></div>
<div class="line"><a name="l02826"></a><span class="lineno"> 2826</span>&#160;<span class="comment">//   face of a tetrahedron.  From the last 3rd to 6th bits are used for</span></div>
<div class="line"><a name="l02827"></a><span class="lineno"> 2827</span>&#160;<span class="comment">//   face markers, e.g., the last third bit corresponds to loc = 0. </span></div>
<div class="line"><a name="l02828"></a><span class="lineno"> 2828</span>&#160;<span class="comment">// One use of the face marker is in flip algorithm. Each queued face (check</span></div>
<div class="line"><a name="l02829"></a><span class="lineno"> 2829</span>&#160;<span class="comment">//   for locally Delaunay) is marked.</span></div>
<div class="line"><a name="l02830"></a><span class="lineno"> 2830</span>&#160;</div>
<div class="line"><a name="l02831"></a><span class="lineno"> 2831</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::markface(triface&amp; t) {</div>
<div class="line"><a name="l02832"></a><span class="lineno"> 2832</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] |= (<span class="keywordtype">int</span>) (4&lt;&lt;(t).loc);</div>
<div class="line"><a name="l02833"></a><span class="lineno"> 2833</span>&#160;}</div>
<div class="line"><a name="l02834"></a><span class="lineno"> 2834</span>&#160;</div>
<div class="line"><a name="l02835"></a><span class="lineno"> 2835</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::unmarkface(triface&amp; t) {</div>
<div class="line"><a name="l02836"></a><span class="lineno"> 2836</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp;= ~(<span class="keywordtype">int</span>) (4&lt;&lt;(t).loc);</div>
<div class="line"><a name="l02837"></a><span class="lineno"> 2837</span>&#160;}</div>
<div class="line"><a name="l02838"></a><span class="lineno"> 2838</span>&#160;</div>
<div class="line"><a name="l02839"></a><span class="lineno"> 2839</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::facemarked(triface&amp; t) {</div>
<div class="line"><a name="l02840"></a><span class="lineno"> 2840</span>&#160;  <span class="keywordflow">return</span> (((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp; (<span class="keywordtype">int</span>) (4&lt;&lt;(t).loc)) != 0;</div>
<div class="line"><a name="l02841"></a><span class="lineno"> 2841</span>&#160;}</div>
<div class="line"><a name="l02842"></a><span class="lineno"> 2842</span>&#160;</div>
<div class="line"><a name="l02843"></a><span class="lineno"> 2843</span>&#160;<span class="comment">// markedge(), unmarkedge(), edgemarked() -- primitives to flag or unflag an</span></div>
<div class="line"><a name="l02844"></a><span class="lineno"> 2844</span>&#160;<span class="comment">//   edge of a tetrahedron.  From the last 7th to 12th bits are used for</span></div>
<div class="line"><a name="l02845"></a><span class="lineno"> 2845</span>&#160;<span class="comment">//   edge markers, e.g., the last 7th bit corresponds to the 0th edge, etc. </span></div>
<div class="line"><a name="l02846"></a><span class="lineno"> 2846</span>&#160;<span class="comment">// Remark: The last 7th bit is marked by 2^6 = 64.</span></div>
<div class="line"><a name="l02847"></a><span class="lineno"> 2847</span>&#160;</div>
<div class="line"><a name="l02848"></a><span class="lineno"> 2848</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::markedge(triface&amp; t) {</div>
<div class="line"><a name="l02849"></a><span class="lineno"> 2849</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] |= </div>
<div class="line"><a name="l02850"></a><span class="lineno"> 2850</span>&#160;    (<span class="keywordtype">int</span>) (64&lt;&lt;locver2edge[(t).loc][(t).ver]);</div>
<div class="line"><a name="l02851"></a><span class="lineno"> 2851</span>&#160;}</div>
<div class="line"><a name="l02852"></a><span class="lineno"> 2852</span>&#160;</div>
<div class="line"><a name="l02853"></a><span class="lineno"> 2853</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::unmarkedge(triface&amp; t) {</div>
<div class="line"><a name="l02854"></a><span class="lineno"> 2854</span>&#160;  ((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp;= </div>
<div class="line"><a name="l02855"></a><span class="lineno"> 2855</span>&#160;    ~(<span class="keywordtype">int</span>) (64&lt;&lt;locver2edge[(t).loc][(t).ver]);</div>
<div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;}</div>
<div class="line"><a name="l02857"></a><span class="lineno"> 2857</span>&#160;</div>
<div class="line"><a name="l02858"></a><span class="lineno"> 2858</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::edgemarked(triface&amp; t) {</div>
<div class="line"><a name="l02859"></a><span class="lineno"> 2859</span>&#160;  <span class="keywordflow">return</span> (((<span class="keywordtype">int</span> *) (t.tet))[elemmarkerindex] &amp; </div>
<div class="line"><a name="l02860"></a><span class="lineno"> 2860</span>&#160;            (<span class="keywordtype">int</span>) (64&lt;&lt;locver2edge[(t).loc][(t).ver])) != 0;</div>
<div class="line"><a name="l02861"></a><span class="lineno"> 2861</span>&#160;}</div>
<div class="line"><a name="l02862"></a><span class="lineno"> 2862</span>&#160;</div>
<div class="line"><a name="l02863"></a><span class="lineno"> 2863</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l02864"></a><span class="lineno"> 2864</span>&#160;<span class="comment">// End of primitives for tetrahedra</span></div>
<div class="line"><a name="l02865"></a><span class="lineno"> 2865</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l02866"></a><span class="lineno"> 2866</span>&#160;</div>
<div class="line"><a name="l02867"></a><span class="lineno"> 2867</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l02868"></a><span class="lineno"> 2868</span>&#160;<span class="comment">// Begin of primitives for subfaces/subsegments</span></div>
<div class="line"><a name="l02869"></a><span class="lineno"> 2869</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l02870"></a><span class="lineno"> 2870</span>&#160;</div>
<div class="line"><a name="l02871"></a><span class="lineno"> 2871</span>&#160;<span class="comment">// Each subface contains three pointers to its neighboring subfaces, with</span></div>
<div class="line"><a name="l02872"></a><span class="lineno"> 2872</span>&#160;<span class="comment">//   edge versions.  To save memory, both information are kept in a single</span></div>
<div class="line"><a name="l02873"></a><span class="lineno"> 2873</span>&#160;<span class="comment">//   pointer. To make this possible, all subfaces are aligned to eight-byte</span></div>
<div class="line"><a name="l02874"></a><span class="lineno"> 2874</span>&#160;<span class="comment">//   boundaries, so that the last three bits of each pointer are zeros. An</span></div>
<div class="line"><a name="l02875"></a><span class="lineno"> 2875</span>&#160;<span class="comment">//   edge version (in the range 0 to 5) is compressed into the last three</span></div>
<div class="line"><a name="l02876"></a><span class="lineno"> 2876</span>&#160;<span class="comment">//   bits of each pointer by &#39;sencode()&#39;.  &#39;sdecode()&#39; decodes a pointer,</span></div>
<div class="line"><a name="l02877"></a><span class="lineno"> 2877</span>&#160;<span class="comment">//   extracting an edge version and a pointer to the beginning of a subface.</span></div>
<div class="line"><a name="l02878"></a><span class="lineno"> 2878</span>&#160;</div>
<div class="line"><a name="l02879"></a><span class="lineno"> 2879</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sdecode(shellface sptr, face&amp; s) {</div>
<div class="line"><a name="l02880"></a><span class="lineno"> 2880</span>&#160;  s.shver = (int) ((uintptr_t) (sptr) &amp; (uintptr_t) 7);</div>
<div class="line"><a name="l02881"></a><span class="lineno"> 2881</span>&#160;  s.sh = (shellface *) ((uintptr_t) (sptr) &amp; ~ (uintptr_t) 7);</div>
<div class="line"><a name="l02882"></a><span class="lineno"> 2882</span>&#160;}</div>
<div class="line"><a name="l02883"></a><span class="lineno"> 2883</span>&#160;</div>
<div class="line"><a name="l02884"></a><span class="lineno"> 2884</span>&#160;<span class="keyword">inline</span> tetgenmesh::shellface tetgenmesh::sencode(face&amp; s) {</div>
<div class="line"><a name="l02885"></a><span class="lineno"> 2885</span>&#160;  <span class="keywordflow">return</span> (shellface) ((uintptr_t) s.sh | (uintptr_t) s.shver);</div>
<div class="line"><a name="l02886"></a><span class="lineno"> 2886</span>&#160;}</div>
<div class="line"><a name="l02887"></a><span class="lineno"> 2887</span>&#160;</div>
<div class="line"><a name="l02888"></a><span class="lineno"> 2888</span>&#160;<span class="comment">// spivot() finds the other subface (from this subface) that shares the</span></div>
<div class="line"><a name="l02889"></a><span class="lineno"> 2889</span>&#160;<span class="comment">//   same edge.</span></div>
<div class="line"><a name="l02890"></a><span class="lineno"> 2890</span>&#160;</div>
<div class="line"><a name="l02891"></a><span class="lineno"> 2891</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::spivot(face&amp; s1, face&amp; s2) {</div>
<div class="line"><a name="l02892"></a><span class="lineno"> 2892</span>&#160;  shellface sptr = s1.sh[Orient(s1.shver)];</div>
<div class="line"><a name="l02893"></a><span class="lineno"> 2893</span>&#160;  sdecode(sptr, s2);</div>
<div class="line"><a name="l02894"></a><span class="lineno"> 2894</span>&#160;}</div>
<div class="line"><a name="l02895"></a><span class="lineno"> 2895</span>&#160;</div>
<div class="line"><a name="l02896"></a><span class="lineno"> 2896</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::spivotself(face&amp; s) {</div>
<div class="line"><a name="l02897"></a><span class="lineno"> 2897</span>&#160;  shellface sptr = s.sh[Orient(s.shver)];</div>
<div class="line"><a name="l02898"></a><span class="lineno"> 2898</span>&#160;  sdecode(sptr, s);</div>
<div class="line"><a name="l02899"></a><span class="lineno"> 2899</span>&#160;}</div>
<div class="line"><a name="l02900"></a><span class="lineno"> 2900</span>&#160;</div>
<div class="line"><a name="l02901"></a><span class="lineno"> 2901</span>&#160;<span class="comment">// sbond() bonds two subfaces together, i.e., after bonding, both faces</span></div>
<div class="line"><a name="l02902"></a><span class="lineno"> 2902</span>&#160;<span class="comment">//   are pointing to each other.</span></div>
<div class="line"><a name="l02903"></a><span class="lineno"> 2903</span>&#160;</div>
<div class="line"><a name="l02904"></a><span class="lineno"> 2904</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sbond(face&amp; s1, face&amp; s2) {</div>
<div class="line"><a name="l02905"></a><span class="lineno"> 2905</span>&#160;  s1.sh[Orient(s1.shver)] = sencode(s2);</div>
<div class="line"><a name="l02906"></a><span class="lineno"> 2906</span>&#160;  s2.sh[Orient(s2.shver)] = sencode(s1);</div>
<div class="line"><a name="l02907"></a><span class="lineno"> 2907</span>&#160;}</div>
<div class="line"><a name="l02908"></a><span class="lineno"> 2908</span>&#160;</div>
<div class="line"><a name="l02909"></a><span class="lineno"> 2909</span>&#160;<span class="comment">// sbond1() only bonds s2 to s1, i.e., after bonding, s1 is pointing to s2,</span></div>
<div class="line"><a name="l02910"></a><span class="lineno"> 2910</span>&#160;<span class="comment">//   but s2 is not pointing to s1.</span></div>
<div class="line"><a name="l02911"></a><span class="lineno"> 2911</span>&#160;</div>
<div class="line"><a name="l02912"></a><span class="lineno"> 2912</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sbond1(face&amp; s1, face&amp; s2) {</div>
<div class="line"><a name="l02913"></a><span class="lineno"> 2913</span>&#160;  s1.sh[Orient(s1.shver)] = sencode(s2);</div>
<div class="line"><a name="l02914"></a><span class="lineno"> 2914</span>&#160;}</div>
<div class="line"><a name="l02915"></a><span class="lineno"> 2915</span>&#160;</div>
<div class="line"><a name="l02916"></a><span class="lineno"> 2916</span>&#160;<span class="comment">// Dissolve a subface bond (from one side).  Note that the other subface</span></div>
<div class="line"><a name="l02917"></a><span class="lineno"> 2917</span>&#160;<span class="comment">//   will still think it&#39;s connected to this subface.</span></div>
<div class="line"><a name="l02918"></a><span class="lineno"> 2918</span>&#160;</div>
<div class="line"><a name="l02919"></a><span class="lineno"> 2919</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sdissolve(face&amp; s) {</div>
<div class="line"><a name="l02920"></a><span class="lineno"> 2920</span>&#160;  s.sh[Orient(s.shver)] = (shellface) dummysh;</div>
<div class="line"><a name="l02921"></a><span class="lineno"> 2921</span>&#160;}</div>
<div class="line"><a name="l02922"></a><span class="lineno"> 2922</span>&#160;</div>
<div class="line"><a name="l02923"></a><span class="lineno"> 2923</span>&#160;<span class="comment">// These primitives determine or set the origin, destination, or apex</span></div>
<div class="line"><a name="l02924"></a><span class="lineno"> 2924</span>&#160;<span class="comment">//   of a subface with respect to the edge version.</span></div>
<div class="line"><a name="l02925"></a><span class="lineno"> 2925</span>&#160;</div>
<div class="line"><a name="l02926"></a><span class="lineno"> 2926</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::sorg(face&amp; s) {</div>
<div class="line"><a name="l02927"></a><span class="lineno"> 2927</span>&#160;  <span class="keywordflow">return</span> (point) s.sh[3 + vo[s.shver]];</div>
<div class="line"><a name="l02928"></a><span class="lineno"> 2928</span>&#160;}</div>
<div class="line"><a name="l02929"></a><span class="lineno"> 2929</span>&#160;</div>
<div class="line"><a name="l02930"></a><span class="lineno"> 2930</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::sdest(face&amp; s) {</div>
<div class="line"><a name="l02931"></a><span class="lineno"> 2931</span>&#160;  <span class="keywordflow">return</span> (point) s.sh[3 + vd[s.shver]];</div>
<div class="line"><a name="l02932"></a><span class="lineno"> 2932</span>&#160;}</div>
<div class="line"><a name="l02933"></a><span class="lineno"> 2933</span>&#160;</div>
<div class="line"><a name="l02934"></a><span class="lineno"> 2934</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::sapex(face&amp; s) {</div>
<div class="line"><a name="l02935"></a><span class="lineno"> 2935</span>&#160;  <span class="keywordflow">return</span> (point) s.sh[3 + va[s.shver]];</div>
<div class="line"><a name="l02936"></a><span class="lineno"> 2936</span>&#160;}</div>
<div class="line"><a name="l02937"></a><span class="lineno"> 2937</span>&#160;</div>
<div class="line"><a name="l02938"></a><span class="lineno"> 2938</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setsorg(face&amp; s, point pointptr) {</div>
<div class="line"><a name="l02939"></a><span class="lineno"> 2939</span>&#160;  s.sh[3 + vo[s.shver]] = (shellface) pointptr;</div>
<div class="line"><a name="l02940"></a><span class="lineno"> 2940</span>&#160;}</div>
<div class="line"><a name="l02941"></a><span class="lineno"> 2941</span>&#160;</div>
<div class="line"><a name="l02942"></a><span class="lineno"> 2942</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setsdest(face&amp; s, point pointptr) {</div>
<div class="line"><a name="l02943"></a><span class="lineno"> 2943</span>&#160;  s.sh[3 + vd[s.shver]] = (shellface) pointptr;</div>
<div class="line"><a name="l02944"></a><span class="lineno"> 2944</span>&#160;}</div>
<div class="line"><a name="l02945"></a><span class="lineno"> 2945</span>&#160;</div>
<div class="line"><a name="l02946"></a><span class="lineno"> 2946</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setsapex(face&amp; s, point pointptr) {</div>
<div class="line"><a name="l02947"></a><span class="lineno"> 2947</span>&#160;  s.sh[3 + va[s.shver]] = (shellface) pointptr;</div>
<div class="line"><a name="l02948"></a><span class="lineno"> 2948</span>&#160;}</div>
<div class="line"><a name="l02949"></a><span class="lineno"> 2949</span>&#160;</div>
<div class="line"><a name="l02950"></a><span class="lineno"> 2950</span>&#160;<span class="comment">// These primitives were drived from Mucke[2]&#39;s triangle-edge data structure</span></div>
<div class="line"><a name="l02951"></a><span class="lineno"> 2951</span>&#160;<span class="comment">//   to change face-edge relation in a subface (sesym, senext and senext2).</span></div>
<div class="line"><a name="l02952"></a><span class="lineno"> 2952</span>&#160;</div>
<div class="line"><a name="l02953"></a><span class="lineno"> 2953</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sesym(face&amp; s1, face&amp; s2) {</div>
<div class="line"><a name="l02954"></a><span class="lineno"> 2954</span>&#160;  s2.sh = s1.sh;</div>
<div class="line"><a name="l02955"></a><span class="lineno"> 2955</span>&#160;  s2.shver = s1.shver + (EdgeRing(s1.shver) ? -1 : 1);</div>
<div class="line"><a name="l02956"></a><span class="lineno"> 2956</span>&#160;}</div>
<div class="line"><a name="l02957"></a><span class="lineno"> 2957</span>&#160;</div>
<div class="line"><a name="l02958"></a><span class="lineno"> 2958</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sesymself(face&amp; s) {</div>
<div class="line"><a name="l02959"></a><span class="lineno"> 2959</span>&#160;  s.shver += (EdgeRing(s.shver) ? -1 : 1);</div>
<div class="line"><a name="l02960"></a><span class="lineno"> 2960</span>&#160;}</div>
<div class="line"><a name="l02961"></a><span class="lineno"> 2961</span>&#160;</div>
<div class="line"><a name="l02962"></a><span class="lineno"> 2962</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::senext(face&amp; s1, face&amp; s2) {</div>
<div class="line"><a name="l02963"></a><span class="lineno"> 2963</span>&#160;  s2.sh = s1.sh;</div>
<div class="line"><a name="l02964"></a><span class="lineno"> 2964</span>&#160;  s2.shver = ve[s1.shver];</div>
<div class="line"><a name="l02965"></a><span class="lineno"> 2965</span>&#160;}</div>
<div class="line"><a name="l02966"></a><span class="lineno"> 2966</span>&#160;</div>
<div class="line"><a name="l02967"></a><span class="lineno"> 2967</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::senextself(face&amp; s) { </div>
<div class="line"><a name="l02968"></a><span class="lineno"> 2968</span>&#160;  s.shver = ve[s.shver]; </div>
<div class="line"><a name="l02969"></a><span class="lineno"> 2969</span>&#160;}</div>
<div class="line"><a name="l02970"></a><span class="lineno"> 2970</span>&#160;</div>
<div class="line"><a name="l02971"></a><span class="lineno"> 2971</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::senext2(face&amp; s1, face&amp; s2) {</div>
<div class="line"><a name="l02972"></a><span class="lineno"> 2972</span>&#160;  s2.sh = s1.sh;</div>
<div class="line"><a name="l02973"></a><span class="lineno"> 2973</span>&#160;  s2.shver = ve[ve[s1.shver]];</div>
<div class="line"><a name="l02974"></a><span class="lineno"> 2974</span>&#160;}</div>
<div class="line"><a name="l02975"></a><span class="lineno"> 2975</span>&#160;</div>
<div class="line"><a name="l02976"></a><span class="lineno"> 2976</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::senext2self(face&amp; s) {</div>
<div class="line"><a name="l02977"></a><span class="lineno"> 2977</span>&#160;  s.shver = ve[ve[s.shver]];</div>
<div class="line"><a name="l02978"></a><span class="lineno"> 2978</span>&#160;}</div>
<div class="line"><a name="l02979"></a><span class="lineno"> 2979</span>&#160;</div>
<div class="line"><a name="l02980"></a><span class="lineno"> 2980</span>&#160;<span class="comment">// If f0 and f1 are both in the same face ring, then f1 = f0.fnext(),</span></div>
<div class="line"><a name="l02981"></a><span class="lineno"> 2981</span>&#160;</div>
<div class="line"><a name="l02982"></a><span class="lineno"> 2982</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sfnext(face&amp; s1, face&amp; s2) {</div>
<div class="line"><a name="l02983"></a><span class="lineno"> 2983</span>&#160;  getnextsface(&amp;s1, &amp;s2);</div>
<div class="line"><a name="l02984"></a><span class="lineno"> 2984</span>&#160;}</div>
<div class="line"><a name="l02985"></a><span class="lineno"> 2985</span>&#160;</div>
<div class="line"><a name="l02986"></a><span class="lineno"> 2986</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sfnextself(face&amp; s) {</div>
<div class="line"><a name="l02987"></a><span class="lineno"> 2987</span>&#160;  getnextsface(&amp;s, NULL);</div>
<div class="line"><a name="l02988"></a><span class="lineno"> 2988</span>&#160;}</div>
<div class="line"><a name="l02989"></a><span class="lineno"> 2989</span>&#160;</div>
<div class="line"><a name="l02990"></a><span class="lineno"> 2990</span>&#160;<span class="comment">// These primitives read or set a pointer of the badface structure.  The</span></div>
<div class="line"><a name="l02991"></a><span class="lineno"> 2991</span>&#160;<span class="comment">//   pointer is stored sh[11].</span></div>
<div class="line"><a name="l02992"></a><span class="lineno"> 2992</span>&#160;</div>
<div class="line"><a name="l02993"></a><span class="lineno"> 2993</span>&#160;<span class="keyword">inline</span> <a class="code" href="structtetgenmesh_1_1badface.xhtml">tetgenmesh::badface</a>* tetgenmesh::shell2badface(face&amp; s) {</div>
<div class="line"><a name="l02994"></a><span class="lineno"> 2994</span>&#160;  <span class="keywordflow">return</span> (badface*) s.sh[11];</div>
<div class="line"><a name="l02995"></a><span class="lineno"> 2995</span>&#160;}</div>
<div class="line"><a name="l02996"></a><span class="lineno"> 2996</span>&#160;</div>
<div class="line"><a name="l02997"></a><span class="lineno"> 2997</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setshell2badface(face&amp; s, badface* value) {</div>
<div class="line"><a name="l02998"></a><span class="lineno"> 2998</span>&#160;  s.sh[11] = (shellface) value;</div>
<div class="line"><a name="l02999"></a><span class="lineno"> 2999</span>&#160;}</div>
<div class="line"><a name="l03000"></a><span class="lineno"> 3000</span>&#160;</div>
<div class="line"><a name="l03001"></a><span class="lineno"> 3001</span>&#160;<span class="comment">// Check or set a subface&#39;s maximum area bound.</span></div>
<div class="line"><a name="l03002"></a><span class="lineno"> 3002</span>&#160;</div>
<div class="line"><a name="l03003"></a><span class="lineno"> 3003</span>&#160;<span class="keyword">inline</span> REAL tetgenmesh::areabound(face&amp; s) {</div>
<div class="line"><a name="l03004"></a><span class="lineno"> 3004</span>&#160;  <span class="keywordflow">return</span> ((REAL *) (s.sh))[areaboundindex];</div>
<div class="line"><a name="l03005"></a><span class="lineno"> 3005</span>&#160;}</div>
<div class="line"><a name="l03006"></a><span class="lineno"> 3006</span>&#160;</div>
<div class="line"><a name="l03007"></a><span class="lineno"> 3007</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setareabound(face&amp; s, REAL value) {</div>
<div class="line"><a name="l03008"></a><span class="lineno"> 3008</span>&#160;  ((REAL *) (s.sh))[areaboundindex] = value;</div>
<div class="line"><a name="l03009"></a><span class="lineno"> 3009</span>&#160;}</div>
<div class="line"><a name="l03010"></a><span class="lineno"> 3010</span>&#160;</div>
<div class="line"><a name="l03011"></a><span class="lineno"> 3011</span>&#160;<span class="comment">// These two primitives read or set a shell marker.  Shell markers are used</span></div>
<div class="line"><a name="l03012"></a><span class="lineno"> 3012</span>&#160;<span class="comment">//   to hold user boundary information.</span></div>
<div class="line"><a name="l03013"></a><span class="lineno"> 3013</span>&#160;<span class="comment">// The last two bits of the int ((int *) ((s).sh))[shmarkindex] are used</span></div>
<div class="line"><a name="l03014"></a><span class="lineno"> 3014</span>&#160;<span class="comment">//   by sinfect() and smarktest().</span></div>
<div class="line"><a name="l03015"></a><span class="lineno"> 3015</span>&#160;</div>
<div class="line"><a name="l03016"></a><span class="lineno"> 3016</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> tetgenmesh::shellmark(face&amp; s) {</div>
<div class="line"><a name="l03017"></a><span class="lineno"> 3017</span>&#160;  <span class="keywordflow">return</span> (((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex]) &gt;&gt; (int) 2; </div>
<div class="line"><a name="l03018"></a><span class="lineno"> 3018</span>&#160;  <span class="comment">// return ((int *) (s.sh))[shmarkindex];</span></div>
<div class="line"><a name="l03019"></a><span class="lineno"> 3019</span>&#160;}</div>
<div class="line"><a name="l03020"></a><span class="lineno"> 3020</span>&#160;</div>
<div class="line"><a name="l03021"></a><span class="lineno"> 3021</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setshellmark(face&amp; s, <span class="keywordtype">int</span> value) {</div>
<div class="line"><a name="l03022"></a><span class="lineno"> 3022</span>&#160;  ((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex] = (value &lt;&lt; (int) 2) + </div>
<div class="line"><a name="l03023"></a><span class="lineno"> 3023</span>&#160;    ((((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex]) &amp; (<span class="keywordtype">int</span>) 3);</div>
<div class="line"><a name="l03024"></a><span class="lineno"> 3024</span>&#160;  <span class="comment">// ((int *) (s.sh))[shmarkindex] = value;</span></div>
<div class="line"><a name="l03025"></a><span class="lineno"> 3025</span>&#160;}</div>
<div class="line"><a name="l03026"></a><span class="lineno"> 3026</span>&#160;</div>
<div class="line"><a name="l03027"></a><span class="lineno"> 3027</span>&#160;<span class="comment">// These two primitives set or read the type of the subface or subsegment.</span></div>
<div class="line"><a name="l03028"></a><span class="lineno"> 3028</span>&#160;</div>
<div class="line"><a name="l03029"></a><span class="lineno"> 3029</span>&#160;<span class="keyword">inline</span> <span class="keyword">enum</span> tetgenmesh::shestype tetgenmesh::shelltype(face&amp; s) {</div>
<div class="line"><a name="l03030"></a><span class="lineno"> 3030</span>&#160;  <span class="keywordflow">return</span> (<span class="keyword">enum</span> shestype) ((<span class="keywordtype">int</span> *) (s.sh))[shmarkindex + 1];</div>
<div class="line"><a name="l03031"></a><span class="lineno"> 3031</span>&#160;}</div>
<div class="line"><a name="l03032"></a><span class="lineno"> 3032</span>&#160;</div>
<div class="line"><a name="l03033"></a><span class="lineno"> 3033</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setshelltype(face&amp; s, <span class="keyword">enum</span> shestype value) {</div>
<div class="line"><a name="l03034"></a><span class="lineno"> 3034</span>&#160;  ((<span class="keywordtype">int</span> *) (s.sh))[shmarkindex + 1] = (<span class="keywordtype">int</span>) value;</div>
<div class="line"><a name="l03035"></a><span class="lineno"> 3035</span>&#160;}</div>
<div class="line"><a name="l03036"></a><span class="lineno"> 3036</span>&#160;</div>
<div class="line"><a name="l03037"></a><span class="lineno"> 3037</span>&#160;<span class="comment">// These two primitives set or read the pbc group of the subface.</span></div>
<div class="line"><a name="l03038"></a><span class="lineno"> 3038</span>&#160;</div>
<div class="line"><a name="l03039"></a><span class="lineno"> 3039</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> tetgenmesh::shellpbcgroup(face&amp; s) {</div>
<div class="line"><a name="l03040"></a><span class="lineno"> 3040</span>&#160;  <span class="keywordflow">return</span> ((<span class="keywordtype">int</span> *) (s.sh))[shmarkindex + 2];</div>
<div class="line"><a name="l03041"></a><span class="lineno"> 3041</span>&#160;}</div>
<div class="line"><a name="l03042"></a><span class="lineno"> 3042</span>&#160;</div>
<div class="line"><a name="l03043"></a><span class="lineno"> 3043</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setshellpbcgroup(face&amp; s, <span class="keywordtype">int</span> value) {</div>
<div class="line"><a name="l03044"></a><span class="lineno"> 3044</span>&#160;  ((<span class="keywordtype">int</span> *) (s.sh))[shmarkindex + 2] = value;</div>
<div class="line"><a name="l03045"></a><span class="lineno"> 3045</span>&#160;}</div>
<div class="line"><a name="l03046"></a><span class="lineno"> 3046</span>&#160;</div>
<div class="line"><a name="l03047"></a><span class="lineno"> 3047</span>&#160;<span class="comment">// sinfect(), sinfected(), suninfect() -- primitives to flag or unflag a</span></div>
<div class="line"><a name="l03048"></a><span class="lineno"> 3048</span>&#160;<span class="comment">//   subface. The last bit of ((int *) ((s).sh))[shmarkindex] is flaged.</span></div>
<div class="line"><a name="l03049"></a><span class="lineno"> 3049</span>&#160;</div>
<div class="line"><a name="l03050"></a><span class="lineno"> 3050</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sinfect(face&amp; s) {</div>
<div class="line"><a name="l03051"></a><span class="lineno"> 3051</span>&#160;  ((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex] = </div>
<div class="line"><a name="l03052"></a><span class="lineno"> 3052</span>&#160;    (((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex] | (int) 1);</div>
<div class="line"><a name="l03053"></a><span class="lineno"> 3053</span>&#160;  <span class="comment">// s.sh[6] = (shellface) ((unsigned long) s.sh[6] | (unsigned long) 4l);</span></div>
<div class="line"><a name="l03054"></a><span class="lineno"> 3054</span>&#160;}</div>
<div class="line"><a name="l03055"></a><span class="lineno"> 3055</span>&#160;</div>
<div class="line"><a name="l03056"></a><span class="lineno"> 3056</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::suninfect(face&amp; s) {</div>
<div class="line"><a name="l03057"></a><span class="lineno"> 3057</span>&#160;  ((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex] = </div>
<div class="line"><a name="l03058"></a><span class="lineno"> 3058</span>&#160;    (((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex] &amp; ~(int) 1);</div>
<div class="line"><a name="l03059"></a><span class="lineno"> 3059</span>&#160;  <span class="comment">// s.sh[6] = (shellface)((unsigned long) s.sh[6] &amp; ~(unsigned long) 4l);</span></div>
<div class="line"><a name="l03060"></a><span class="lineno"> 3060</span>&#160;}</div>
<div class="line"><a name="l03061"></a><span class="lineno"> 3061</span>&#160;</div>
<div class="line"><a name="l03062"></a><span class="lineno"> 3062</span>&#160;<span class="comment">// Test a subface for viral infection.</span></div>
<div class="line"><a name="l03063"></a><span class="lineno"> 3063</span>&#160;</div>
<div class="line"><a name="l03064"></a><span class="lineno"> 3064</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::sinfected(face&amp; s) {</div>
<div class="line"><a name="l03065"></a><span class="lineno"> 3065</span>&#160;  <span class="keywordflow">return</span> (((<span class="keywordtype">int</span> *) ((s).sh))[shmarkindex] &amp; (<span class="keywordtype">int</span>) 1) != 0;</div>
<div class="line"><a name="l03066"></a><span class="lineno"> 3066</span>&#160;}</div>
<div class="line"><a name="l03067"></a><span class="lineno"> 3067</span>&#160;</div>
<div class="line"><a name="l03068"></a><span class="lineno"> 3068</span>&#160;<span class="comment">// smarktest(), smarktested(), sunmarktest() -- primitives to flag or unflag</span></div>
<div class="line"><a name="l03069"></a><span class="lineno"> 3069</span>&#160;<span class="comment">//   a subface. The last 2nd bit of ((int *) ((s).sh))[shmarkindex] is flaged.</span></div>
<div class="line"><a name="l03070"></a><span class="lineno"> 3070</span>&#160;</div>
<div class="line"><a name="l03071"></a><span class="lineno"> 3071</span>&#160;<span class="preprocessor">#define smarktest(s) \</span></div>
<div class="line"><a name="l03072"></a><span class="lineno"> 3072</span>&#160;<span class="preprocessor">  ((int *) ((s).sh))[shmarkindex] = (((int *)((s).sh))[shmarkindex] | (int) 2)</span></div>
<div class="line"><a name="l03073"></a><span class="lineno"> 3073</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03074"></a><span class="lineno"> 3074</span>&#160;<span class="preprocessor">#define sunmarktest(s) \</span></div>
<div class="line"><a name="l03075"></a><span class="lineno"> 3075</span>&#160;<span class="preprocessor">  ((int *) ((s).sh))[shmarkindex] = (((int *)((s).sh))[shmarkindex] &amp; ~(int) 2)</span></div>
<div class="line"><a name="l03076"></a><span class="lineno"> 3076</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03077"></a><span class="lineno"> 3077</span>&#160;<span class="preprocessor">#define smarktested(s) ((((int *) ((s).sh))[shmarkindex] &amp; (int) 2) != 0)</span></div>
<div class="line"><a name="l03078"></a><span class="lineno"> 3078</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03079"></a><span class="lineno"> 3079</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03080"></a><span class="lineno"> 3080</span>&#160;<span class="comment">// End of primitives for subfaces/subsegments</span></div>
<div class="line"><a name="l03081"></a><span class="lineno"> 3081</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03082"></a><span class="lineno"> 3082</span>&#160;</div>
<div class="line"><a name="l03083"></a><span class="lineno"> 3083</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03084"></a><span class="lineno"> 3084</span>&#160;<span class="comment">// Begin of primitives for interacting between tetrahedra and subfaces</span></div>
<div class="line"><a name="l03085"></a><span class="lineno"> 3085</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03086"></a><span class="lineno"> 3086</span>&#160;</div>
<div class="line"><a name="l03087"></a><span class="lineno"> 3087</span>&#160;<span class="comment">// tspivot() finds a subface abutting on this tetrahdera.</span></div>
<div class="line"><a name="l03088"></a><span class="lineno"> 3088</span>&#160;</div>
<div class="line"><a name="l03089"></a><span class="lineno"> 3089</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tspivot(triface&amp; t, face&amp; s) {</div>
<div class="line"><a name="l03090"></a><span class="lineno"> 3090</span>&#160;  <span class="keywordflow">if</span> ((t).tet[9] != NULL) {</div>
<div class="line"><a name="l03091"></a><span class="lineno"> 3091</span>&#160;    sdecode(((shellface *) (t).tet[9])[(t).loc], s);</div>
<div class="line"><a name="l03092"></a><span class="lineno"> 3092</span>&#160;  } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l03093"></a><span class="lineno"> 3093</span>&#160;    (s).sh = dummysh;</div>
<div class="line"><a name="l03094"></a><span class="lineno"> 3094</span>&#160;  }</div>
<div class="line"><a name="l03095"></a><span class="lineno"> 3095</span>&#160;  <span class="comment">//shellface sptr = (shellface) t.tet[8 + t.loc];</span></div>
<div class="line"><a name="l03096"></a><span class="lineno"> 3096</span>&#160;  <span class="comment">//sdecode(sptr, s);</span></div>
<div class="line"><a name="l03097"></a><span class="lineno"> 3097</span>&#160;}</div>
<div class="line"><a name="l03098"></a><span class="lineno"> 3098</span>&#160;</div>
<div class="line"><a name="l03099"></a><span class="lineno"> 3099</span>&#160;<span class="comment">// stpivot() finds a tetrahedron abutting a subface.</span></div>
<div class="line"><a name="l03100"></a><span class="lineno"> 3100</span>&#160;</div>
<div class="line"><a name="l03101"></a><span class="lineno"> 3101</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::stpivot(face&amp; s, triface&amp; t) {</div>
<div class="line"><a name="l03102"></a><span class="lineno"> 3102</span>&#160;  tetrahedron ptr = (tetrahedron) s.sh[6 + EdgeRing(s.shver)];</div>
<div class="line"><a name="l03103"></a><span class="lineno"> 3103</span>&#160;  decode(ptr, t);</div>
<div class="line"><a name="l03104"></a><span class="lineno"> 3104</span>&#160;}</div>
<div class="line"><a name="l03105"></a><span class="lineno"> 3105</span>&#160;</div>
<div class="line"><a name="l03106"></a><span class="lineno"> 3106</span>&#160;<span class="comment">// tsbond() bond a tetrahedron to a subface.</span></div>
<div class="line"><a name="l03107"></a><span class="lineno"> 3107</span>&#160;</div>
<div class="line"><a name="l03108"></a><span class="lineno"> 3108</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tsbond(triface&amp; t, face&amp; s) {</div>
<div class="line"><a name="l03109"></a><span class="lineno"> 3109</span>&#160;  <span class="keywordflow">if</span> ((t).tet[9] == NULL) {</div>
<div class="line"><a name="l03110"></a><span class="lineno"> 3110</span>&#160;    <span class="comment">// Allocate space for this tet.</span></div>
<div class="line"><a name="l03111"></a><span class="lineno"> 3111</span>&#160;    (t).tet[9] = (tetrahedron) tet2subpool-&gt;alloc();</div>
<div class="line"><a name="l03112"></a><span class="lineno"> 3112</span>&#160;    <span class="comment">// NULL all fields in this space.</span></div>
<div class="line"><a name="l03113"></a><span class="lineno"> 3113</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++) {</div>
<div class="line"><a name="l03114"></a><span class="lineno"> 3114</span>&#160;      ((shellface *) (t).tet[9])[i] = (shellface) dummysh;</div>
<div class="line"><a name="l03115"></a><span class="lineno"> 3115</span>&#160;    }</div>
<div class="line"><a name="l03116"></a><span class="lineno"> 3116</span>&#160;  }</div>
<div class="line"><a name="l03117"></a><span class="lineno"> 3117</span>&#160;  <span class="comment">// Bond t &lt;==&gt; s.</span></div>
<div class="line"><a name="l03118"></a><span class="lineno"> 3118</span>&#160;  ((shellface *) (t).tet[9])[(t).loc] = sencode(s);</div>
<div class="line"><a name="l03119"></a><span class="lineno"> 3119</span>&#160;  <span class="comment">//t.tet[8 + t.loc] = (tetrahedron) sencode(s);</span></div>
<div class="line"><a name="l03120"></a><span class="lineno"> 3120</span>&#160;  s.sh[6 + EdgeRing(s.shver)] = (shellface) encode(t);</div>
<div class="line"><a name="l03121"></a><span class="lineno"> 3121</span>&#160;}</div>
<div class="line"><a name="l03122"></a><span class="lineno"> 3122</span>&#160;</div>
<div class="line"><a name="l03123"></a><span class="lineno"> 3123</span>&#160;<span class="comment">// tsdissolve() dissolve a bond (from the tetrahedron side).</span></div>
<div class="line"><a name="l03124"></a><span class="lineno"> 3124</span>&#160;</div>
<div class="line"><a name="l03125"></a><span class="lineno"> 3125</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tsdissolve(triface&amp; t) {</div>
<div class="line"><a name="l03126"></a><span class="lineno"> 3126</span>&#160;  <span class="keywordflow">if</span> ((t).tet[9] != NULL) {</div>
<div class="line"><a name="l03127"></a><span class="lineno"> 3127</span>&#160;    ((shellface *) (t).tet[9])[(t).loc] = (shellface) dummysh;</div>
<div class="line"><a name="l03128"></a><span class="lineno"> 3128</span>&#160;  }</div>
<div class="line"><a name="l03129"></a><span class="lineno"> 3129</span>&#160;  <span class="comment">// t.tet[8 + t.loc] = (tetrahedron) dummysh;</span></div>
<div class="line"><a name="l03130"></a><span class="lineno"> 3130</span>&#160;}</div>
<div class="line"><a name="l03131"></a><span class="lineno"> 3131</span>&#160;</div>
<div class="line"><a name="l03132"></a><span class="lineno"> 3132</span>&#160;<span class="comment">// stdissolve() dissolve a bond (from the subface side).</span></div>
<div class="line"><a name="l03133"></a><span class="lineno"> 3133</span>&#160;</div>
<div class="line"><a name="l03134"></a><span class="lineno"> 3134</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::stdissolve(face&amp; s) {</div>
<div class="line"><a name="l03135"></a><span class="lineno"> 3135</span>&#160;  s.sh[6 + EdgeRing(s.shver)] = (shellface) dummytet;</div>
<div class="line"><a name="l03136"></a><span class="lineno"> 3136</span>&#160;}</div>
<div class="line"><a name="l03137"></a><span class="lineno"> 3137</span>&#160;</div>
<div class="line"><a name="l03138"></a><span class="lineno"> 3138</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03139"></a><span class="lineno"> 3139</span>&#160;<span class="comment">// End of primitives for interacting between tetrahedra and subfaces</span></div>
<div class="line"><a name="l03140"></a><span class="lineno"> 3140</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03141"></a><span class="lineno"> 3141</span>&#160;</div>
<div class="line"><a name="l03142"></a><span class="lineno"> 3142</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03143"></a><span class="lineno"> 3143</span>&#160;<span class="comment">// Begin of primitives for interacting between subfaces and subsegs</span></div>
<div class="line"><a name="l03144"></a><span class="lineno"> 3144</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03145"></a><span class="lineno"> 3145</span>&#160;</div>
<div class="line"><a name="l03146"></a><span class="lineno"> 3146</span>&#160;<span class="comment">// sspivot() finds a subsegment abutting a subface.</span></div>
<div class="line"><a name="l03147"></a><span class="lineno"> 3147</span>&#160;</div>
<div class="line"><a name="l03148"></a><span class="lineno"> 3148</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::sspivot(face&amp; s, face&amp; edge) {</div>
<div class="line"><a name="l03149"></a><span class="lineno"> 3149</span>&#160;  shellface sptr = (shellface) s.sh[8 + Orient(s.shver)];</div>
<div class="line"><a name="l03150"></a><span class="lineno"> 3150</span>&#160;  sdecode(sptr, edge);</div>
<div class="line"><a name="l03151"></a><span class="lineno"> 3151</span>&#160;}</div>
<div class="line"><a name="l03152"></a><span class="lineno"> 3152</span>&#160;</div>
<div class="line"><a name="l03153"></a><span class="lineno"> 3153</span>&#160;<span class="comment">// ssbond() bond a subface to a subsegment.</span></div>
<div class="line"><a name="l03154"></a><span class="lineno"> 3154</span>&#160;</div>
<div class="line"><a name="l03155"></a><span class="lineno"> 3155</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::ssbond(face&amp; s, face&amp; edge) {</div>
<div class="line"><a name="l03156"></a><span class="lineno"> 3156</span>&#160;  s.sh[8 + Orient(s.shver)] = sencode(edge);</div>
<div class="line"><a name="l03157"></a><span class="lineno"> 3157</span>&#160;  edge.sh[0] = sencode(s);</div>
<div class="line"><a name="l03158"></a><span class="lineno"> 3158</span>&#160;}</div>
<div class="line"><a name="l03159"></a><span class="lineno"> 3159</span>&#160;</div>
<div class="line"><a name="l03160"></a><span class="lineno"> 3160</span>&#160;<span class="comment">// ssdisolve() dissolve a bond (from the subface side)</span></div>
<div class="line"><a name="l03161"></a><span class="lineno"> 3161</span>&#160;</div>
<div class="line"><a name="l03162"></a><span class="lineno"> 3162</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::ssdissolve(face&amp; s) {</div>
<div class="line"><a name="l03163"></a><span class="lineno"> 3163</span>&#160;  s.sh[8 + Orient(s.shver)] = (shellface) dummysh;</div>
<div class="line"><a name="l03164"></a><span class="lineno"> 3164</span>&#160;}</div>
<div class="line"><a name="l03165"></a><span class="lineno"> 3165</span>&#160;</div>
<div class="line"><a name="l03166"></a><span class="lineno"> 3166</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03167"></a><span class="lineno"> 3167</span>&#160;<span class="comment">// End of primitives for interacting between subfaces and subsegs</span></div>
<div class="line"><a name="l03168"></a><span class="lineno"> 3168</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03169"></a><span class="lineno"> 3169</span>&#160;</div>
<div class="line"><a name="l03170"></a><span class="lineno"> 3170</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03171"></a><span class="lineno"> 3171</span>&#160;<span class="comment">// Begin of primitives for interacting between tet and subsegs.</span></div>
<div class="line"><a name="l03172"></a><span class="lineno"> 3172</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03173"></a><span class="lineno"> 3173</span>&#160;</div>
<div class="line"><a name="l03174"></a><span class="lineno"> 3174</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tsspivot1(triface&amp; t, face&amp; s)</div>
<div class="line"><a name="l03175"></a><span class="lineno"> 3175</span>&#160;{</div>
<div class="line"><a name="l03176"></a><span class="lineno"> 3176</span>&#160;  <span class="keywordflow">if</span> ((t).tet[8] != NULL) {</div>
<div class="line"><a name="l03177"></a><span class="lineno"> 3177</span>&#160;    sdecode(((shellface *) (t).tet[8])[locver2edge[(t).loc][(t).ver]], s);</div>
<div class="line"><a name="l03178"></a><span class="lineno"> 3178</span>&#160;  } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l03179"></a><span class="lineno"> 3179</span>&#160;    (s).sh = dummysh;</div>
<div class="line"><a name="l03180"></a><span class="lineno"> 3180</span>&#160;  }</div>
<div class="line"><a name="l03181"></a><span class="lineno"> 3181</span>&#160;  <span class="comment">// shellface sptr = (shellface) t.tet[8 + locver2edge[t.loc][t.ver]];</span></div>
<div class="line"><a name="l03182"></a><span class="lineno"> 3182</span>&#160;  <span class="comment">// sdecode(sptr, seg);</span></div>
<div class="line"><a name="l03183"></a><span class="lineno"> 3183</span>&#160;}</div>
<div class="line"><a name="l03184"></a><span class="lineno"> 3184</span>&#160;</div>
<div class="line"><a name="l03185"></a><span class="lineno"> 3185</span>&#160;<span class="comment">// Only bond/dissolve at tet&#39;s side, but not vice versa.</span></div>
<div class="line"><a name="l03186"></a><span class="lineno"> 3186</span>&#160;</div>
<div class="line"><a name="l03187"></a><span class="lineno"> 3187</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tssbond1(triface&amp; t, face&amp; s)</div>
<div class="line"><a name="l03188"></a><span class="lineno"> 3188</span>&#160;{</div>
<div class="line"><a name="l03189"></a><span class="lineno"> 3189</span>&#160;  <span class="keywordflow">if</span> ((t).tet[8] == NULL) {</div>
<div class="line"><a name="l03190"></a><span class="lineno"> 3190</span>&#160;    <span class="comment">// Allocate space for this tet.</span></div>
<div class="line"><a name="l03191"></a><span class="lineno"> 3191</span>&#160;    (t).tet[8] = (tetrahedron) tet2segpool-&gt;alloc();</div>
<div class="line"><a name="l03192"></a><span class="lineno"> 3192</span>&#160;    <span class="comment">// NULL all fields in this space.</span></div>
<div class="line"><a name="l03193"></a><span class="lineno"> 3193</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 6; i++) {</div>
<div class="line"><a name="l03194"></a><span class="lineno"> 3194</span>&#160;      ((shellface *) (t).tet[8])[i] = (shellface) dummysh;</div>
<div class="line"><a name="l03195"></a><span class="lineno"> 3195</span>&#160;    }</div>
<div class="line"><a name="l03196"></a><span class="lineno"> 3196</span>&#160;  }</div>
<div class="line"><a name="l03197"></a><span class="lineno"> 3197</span>&#160;  <span class="comment">// Bond the segment.</span></div>
<div class="line"><a name="l03198"></a><span class="lineno"> 3198</span>&#160;  ((shellface *) (t).tet[8])[locver2edge[(t).loc][(t).ver]] = sencode((s));</div>
<div class="line"><a name="l03199"></a><span class="lineno"> 3199</span>&#160;  <span class="comment">// t.tet[8 + locver2edge[t.loc][t.ver]] = (tetrahedron) sencode(seg);</span></div>
<div class="line"><a name="l03200"></a><span class="lineno"> 3200</span>&#160;}</div>
<div class="line"><a name="l03201"></a><span class="lineno"> 3201</span>&#160;</div>
<div class="line"><a name="l03202"></a><span class="lineno"> 3202</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::tssdissolve1(triface&amp; t)</div>
<div class="line"><a name="l03203"></a><span class="lineno"> 3203</span>&#160;{</div>
<div class="line"><a name="l03204"></a><span class="lineno"> 3204</span>&#160;  <span class="keywordflow">if</span> ((t).tet[8] != NULL) {</div>
<div class="line"><a name="l03205"></a><span class="lineno"> 3205</span>&#160;    ((shellface *) (t).tet[8])[locver2edge[(t).loc][(t).ver]] </div>
<div class="line"><a name="l03206"></a><span class="lineno"> 3206</span>&#160;      = (shellface) dummysh;</div>
<div class="line"><a name="l03207"></a><span class="lineno"> 3207</span>&#160;  }</div>
<div class="line"><a name="l03208"></a><span class="lineno"> 3208</span>&#160;  <span class="comment">// t.tet[8 + locver2edge[t.loc][t.ver]] = (tetrahedron) dummysh;</span></div>
<div class="line"><a name="l03209"></a><span class="lineno"> 3209</span>&#160;}</div>
<div class="line"><a name="l03210"></a><span class="lineno"> 3210</span>&#160;</div>
<div class="line"><a name="l03211"></a><span class="lineno"> 3211</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03212"></a><span class="lineno"> 3212</span>&#160;<span class="comment">// End of primitives for interacting between tet and subsegs.</span></div>
<div class="line"><a name="l03213"></a><span class="lineno"> 3213</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03214"></a><span class="lineno"> 3214</span>&#160;</div>
<div class="line"><a name="l03215"></a><span class="lineno"> 3215</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03216"></a><span class="lineno"> 3216</span>&#160;<span class="comment">// Begin of primitives for points</span></div>
<div class="line"><a name="l03217"></a><span class="lineno"> 3217</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03218"></a><span class="lineno"> 3218</span>&#160;</div>
<div class="line"><a name="l03219"></a><span class="lineno"> 3219</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> tetgenmesh::pointmark(point pt) { </div>
<div class="line"><a name="l03220"></a><span class="lineno"> 3220</span>&#160;  <span class="keywordflow">return</span> ((<span class="keywordtype">int</span> *) (pt))[pointmarkindex]; </div>
<div class="line"><a name="l03221"></a><span class="lineno"> 3221</span>&#160;}</div>
<div class="line"><a name="l03222"></a><span class="lineno"> 3222</span>&#160;</div>
<div class="line"><a name="l03223"></a><span class="lineno"> 3223</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpointmark(point pt, <span class="keywordtype">int</span> value) {</div>
<div class="line"><a name="l03224"></a><span class="lineno"> 3224</span>&#160;  ((<span class="keywordtype">int</span> *) (pt))[pointmarkindex] = value;</div>
<div class="line"><a name="l03225"></a><span class="lineno"> 3225</span>&#160;}</div>
<div class="line"><a name="l03226"></a><span class="lineno"> 3226</span>&#160;</div>
<div class="line"><a name="l03227"></a><span class="lineno"> 3227</span>&#160;<span class="comment">// These two primitives set and read the type of the point.</span></div>
<div class="line"><a name="l03228"></a><span class="lineno"> 3228</span>&#160;<span class="comment">// The last significant bit of this integer is used by pinfect/puninfect.</span></div>
<div class="line"><a name="l03229"></a><span class="lineno"> 3229</span>&#160;</div>
<div class="line"><a name="l03230"></a><span class="lineno"> 3230</span>&#160;<span class="keyword">inline</span> <span class="keyword">enum</span> tetgenmesh::verttype tetgenmesh::pointtype(point pt) {</div>
<div class="line"><a name="l03231"></a><span class="lineno"> 3231</span>&#160;  <span class="keywordflow">return</span> (<span class="keyword">enum</span> verttype) (((<span class="keywordtype">int</span> *) (pt))[pointmarkindex + 1] &gt;&gt; (<span class="keywordtype">int</span>) 1);</div>
<div class="line"><a name="l03232"></a><span class="lineno"> 3232</span>&#160;}</div>
<div class="line"><a name="l03233"></a><span class="lineno"> 3233</span>&#160;</div>
<div class="line"><a name="l03234"></a><span class="lineno"> 3234</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpointtype(point pt, <span class="keyword">enum</span> verttype value) {</div>
<div class="line"><a name="l03235"></a><span class="lineno"> 3235</span>&#160;  ((<span class="keywordtype">int</span> *) (pt))[pointmarkindex + 1] = </div>
<div class="line"><a name="l03236"></a><span class="lineno"> 3236</span>&#160;    ((<span class="keywordtype">int</span>) value &lt;&lt; 1) + (((<span class="keywordtype">int</span> *) (pt))[pointmarkindex + 1] &amp; (int) 1);</div>
<div class="line"><a name="l03237"></a><span class="lineno"> 3237</span>&#160;}</div>
<div class="line"><a name="l03238"></a><span class="lineno"> 3238</span>&#160;</div>
<div class="line"><a name="l03239"></a><span class="lineno"> 3239</span>&#160;<span class="comment">// pinfect(), puninfect(), pinfected() -- primitives to flag or unflag</span></div>
<div class="line"><a name="l03240"></a><span class="lineno"> 3240</span>&#160;<span class="comment">//   a point. The last bit of the integer &#39;[pointindex+1]&#39; is flaged.</span></div>
<div class="line"><a name="l03241"></a><span class="lineno"> 3241</span>&#160;</div>
<div class="line"><a name="l03242"></a><span class="lineno"> 3242</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::pinfect(point pt) {</div>
<div class="line"><a name="l03243"></a><span class="lineno"> 3243</span>&#160;  ((<span class="keywordtype">int</span> *) (pt))[pointmarkindex + 1] |= (<span class="keywordtype">int</span>) 1;</div>
<div class="line"><a name="l03244"></a><span class="lineno"> 3244</span>&#160;}</div>
<div class="line"><a name="l03245"></a><span class="lineno"> 3245</span>&#160;</div>
<div class="line"><a name="l03246"></a><span class="lineno"> 3246</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::puninfect(point pt) {</div>
<div class="line"><a name="l03247"></a><span class="lineno"> 3247</span>&#160;  ((<span class="keywordtype">int</span> *) (pt))[pointmarkindex + 1] &amp;= ~(<span class="keywordtype">int</span>) 1;</div>
<div class="line"><a name="l03248"></a><span class="lineno"> 3248</span>&#160;}</div>
<div class="line"><a name="l03249"></a><span class="lineno"> 3249</span>&#160;</div>
<div class="line"><a name="l03250"></a><span class="lineno"> 3250</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::pinfected(point pt) {</div>
<div class="line"><a name="l03251"></a><span class="lineno"> 3251</span>&#160;  <span class="keywordflow">return</span> (((<span class="keywordtype">int</span> *) (pt))[pointmarkindex + 1] &amp; (<span class="keywordtype">int</span>) 1) != 0;</div>
<div class="line"><a name="l03252"></a><span class="lineno"> 3252</span>&#160;}</div>
<div class="line"><a name="l03253"></a><span class="lineno"> 3253</span>&#160;</div>
<div class="line"><a name="l03254"></a><span class="lineno"> 3254</span>&#160;<span class="comment">// These following primitives set and read a pointer to a tetrahedron</span></div>
<div class="line"><a name="l03255"></a><span class="lineno"> 3255</span>&#160;<span class="comment">//   a subface/subsegment, a point, or a tet of background mesh.</span></div>
<div class="line"><a name="l03256"></a><span class="lineno"> 3256</span>&#160;</div>
<div class="line"><a name="l03257"></a><span class="lineno"> 3257</span>&#160;<span class="keyword">inline</span> tetgenmesh::tetrahedron tetgenmesh::point2tet(point pt) {</div>
<div class="line"><a name="l03258"></a><span class="lineno"> 3258</span>&#160;  <span class="keywordflow">return</span> ((tetrahedron *) (pt))[point2simindex];</div>
<div class="line"><a name="l03259"></a><span class="lineno"> 3259</span>&#160;}</div>
<div class="line"><a name="l03260"></a><span class="lineno"> 3260</span>&#160;</div>
<div class="line"><a name="l03261"></a><span class="lineno"> 3261</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpoint2tet(point pt, tetrahedron value) {</div>
<div class="line"><a name="l03262"></a><span class="lineno"> 3262</span>&#160;  ((tetrahedron *) (pt))[point2simindex] = value;</div>
<div class="line"><a name="l03263"></a><span class="lineno"> 3263</span>&#160;}</div>
<div class="line"><a name="l03264"></a><span class="lineno"> 3264</span>&#160;</div>
<div class="line"><a name="l03265"></a><span class="lineno"> 3265</span>&#160;<span class="keyword">inline</span> tetgenmesh::shellface tetgenmesh::point2sh(point pt) {</div>
<div class="line"><a name="l03266"></a><span class="lineno"> 3266</span>&#160;  <span class="keywordflow">return</span> (shellface) ((tetrahedron *) (pt))[point2simindex + 1];</div>
<div class="line"><a name="l03267"></a><span class="lineno"> 3267</span>&#160;}</div>
<div class="line"><a name="l03268"></a><span class="lineno"> 3268</span>&#160;</div>
<div class="line"><a name="l03269"></a><span class="lineno"> 3269</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpoint2sh(point pt, shellface value) {</div>
<div class="line"><a name="l03270"></a><span class="lineno"> 3270</span>&#160;  ((tetrahedron *) (pt))[point2simindex + 1] = (tetrahedron) value;</div>
<div class="line"><a name="l03271"></a><span class="lineno"> 3271</span>&#160;}</div>
<div class="line"><a name="l03272"></a><span class="lineno"> 3272</span>&#160;</div>
<div class="line"><a name="l03273"></a><span class="lineno"> 3273</span>&#160;<span class="keyword">inline</span> tetgenmesh::shellface tetgenmesh::point2seg(point pt) {</div>
<div class="line"><a name="l03274"></a><span class="lineno"> 3274</span>&#160;  <span class="keywordflow">return</span> (shellface) ((tetrahedron *) (pt))[point2simindex + 2];</div>
<div class="line"><a name="l03275"></a><span class="lineno"> 3275</span>&#160;}</div>
<div class="line"><a name="l03276"></a><span class="lineno"> 3276</span>&#160;</div>
<div class="line"><a name="l03277"></a><span class="lineno"> 3277</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpoint2seg(point pt, shellface value) {</div>
<div class="line"><a name="l03278"></a><span class="lineno"> 3278</span>&#160;  ((tetrahedron *) (pt))[point2simindex + 2] = (tetrahedron) value;</div>
<div class="line"><a name="l03279"></a><span class="lineno"> 3279</span>&#160;}</div>
<div class="line"><a name="l03280"></a><span class="lineno"> 3280</span>&#160;</div>
<div class="line"><a name="l03281"></a><span class="lineno"> 3281</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::point2ppt(point pt) {</div>
<div class="line"><a name="l03282"></a><span class="lineno"> 3282</span>&#160;  <span class="keywordflow">return</span> (point) ((tetrahedron *) (pt))[point2simindex + 3];</div>
<div class="line"><a name="l03283"></a><span class="lineno"> 3283</span>&#160;}</div>
<div class="line"><a name="l03284"></a><span class="lineno"> 3284</span>&#160;</div>
<div class="line"><a name="l03285"></a><span class="lineno"> 3285</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpoint2ppt(point pt, point value) {</div>
<div class="line"><a name="l03286"></a><span class="lineno"> 3286</span>&#160;  ((tetrahedron *) (pt))[point2simindex + 3] = (tetrahedron) value;</div>
<div class="line"><a name="l03287"></a><span class="lineno"> 3287</span>&#160;}</div>
<div class="line"><a name="l03288"></a><span class="lineno"> 3288</span>&#160;</div>
<div class="line"><a name="l03289"></a><span class="lineno"> 3289</span>&#160;<span class="keyword">inline</span> tetgenmesh::tetrahedron tetgenmesh::point2bgmtet(point pt) {</div>
<div class="line"><a name="l03290"></a><span class="lineno"> 3290</span>&#160;  <span class="keywordflow">return</span> ((tetrahedron *) (pt))[point2simindex + 4];</div>
<div class="line"><a name="l03291"></a><span class="lineno"> 3291</span>&#160;}</div>
<div class="line"><a name="l03292"></a><span class="lineno"> 3292</span>&#160;</div>
<div class="line"><a name="l03293"></a><span class="lineno"> 3293</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpoint2bgmtet(point pt, tetrahedron value) {</div>
<div class="line"><a name="l03294"></a><span class="lineno"> 3294</span>&#160;  ((tetrahedron *) (pt))[point2simindex + 4] = value;</div>
<div class="line"><a name="l03295"></a><span class="lineno"> 3295</span>&#160;}</div>
<div class="line"><a name="l03296"></a><span class="lineno"> 3296</span>&#160;</div>
<div class="line"><a name="l03297"></a><span class="lineno"> 3297</span>&#160;<span class="comment">// These primitives set and read a pointer to its pbc point.</span></div>
<div class="line"><a name="l03298"></a><span class="lineno"> 3298</span>&#160;</div>
<div class="line"><a name="l03299"></a><span class="lineno"> 3299</span>&#160;<span class="keyword">inline</span> tetgenmesh::point tetgenmesh::point2pbcpt(point pt) {</div>
<div class="line"><a name="l03300"></a><span class="lineno"> 3300</span>&#160;  <span class="keywordflow">return</span> (point) ((tetrahedron *) (pt))[point2pbcptindex];</div>
<div class="line"><a name="l03301"></a><span class="lineno"> 3301</span>&#160;}</div>
<div class="line"><a name="l03302"></a><span class="lineno"> 3302</span>&#160;</div>
<div class="line"><a name="l03303"></a><span class="lineno"> 3303</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::setpoint2pbcpt(point pt, point value) {</div>
<div class="line"><a name="l03304"></a><span class="lineno"> 3304</span>&#160;  ((tetrahedron *) (pt))[point2pbcptindex] = (tetrahedron) value;</div>
<div class="line"><a name="l03305"></a><span class="lineno"> 3305</span>&#160;}</div>
<div class="line"><a name="l03306"></a><span class="lineno"> 3306</span>&#160;</div>
<div class="line"><a name="l03307"></a><span class="lineno"> 3307</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03308"></a><span class="lineno"> 3308</span>&#160;<span class="comment">// End of primitives for points</span></div>
<div class="line"><a name="l03309"></a><span class="lineno"> 3309</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03310"></a><span class="lineno"> 3310</span>&#160;</div>
<div class="line"><a name="l03311"></a><span class="lineno"> 3311</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03312"></a><span class="lineno"> 3312</span>&#160;<span class="comment">// Begin of advanced primitives</span></div>
<div class="line"><a name="l03313"></a><span class="lineno"> 3313</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l03314"></a><span class="lineno"> 3314</span>&#160;</div>
<div class="line"><a name="l03315"></a><span class="lineno"> 3315</span>&#160;<span class="comment">// adjustedgering() adjusts the edge version so that it belongs to the</span></div>
<div class="line"><a name="l03316"></a><span class="lineno"> 3316</span>&#160;<span class="comment">//   indicated edge ring.  The &#39;direction&#39; only can be 0(CCW) or 1(CW).</span></div>
<div class="line"><a name="l03317"></a><span class="lineno"> 3317</span>&#160;<span class="comment">//   If the edge is not in the wanted edge ring, reverse it.</span></div>
<div class="line"><a name="l03318"></a><span class="lineno"> 3318</span>&#160;</div>
<div class="line"><a name="l03319"></a><span class="lineno"> 3319</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::adjustedgering(triface&amp; t, <span class="keywordtype">int</span> direction) {</div>
<div class="line"><a name="l03320"></a><span class="lineno"> 3320</span>&#160;  <span class="keywordflow">if</span> (EdgeRing(t.ver) != direction) {</div>
<div class="line"><a name="l03321"></a><span class="lineno"> 3321</span>&#160;    esymself(t);</div>
<div class="line"><a name="l03322"></a><span class="lineno"> 3322</span>&#160;  }</div>
<div class="line"><a name="l03323"></a><span class="lineno"> 3323</span>&#160;}</div>
<div class="line"><a name="l03324"></a><span class="lineno"> 3324</span>&#160;</div>
<div class="line"><a name="l03325"></a><span class="lineno"> 3325</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::adjustedgering(face&amp; s, <span class="keywordtype">int</span> direction) {</div>
<div class="line"><a name="l03326"></a><span class="lineno"> 3326</span>&#160;  <span class="keywordflow">if</span> (EdgeRing(s.shver) != direction) {</div>
<div class="line"><a name="l03327"></a><span class="lineno"> 3327</span>&#160;    sesymself(s);</div>
<div class="line"><a name="l03328"></a><span class="lineno"> 3328</span>&#160;  }</div>
<div class="line"><a name="l03329"></a><span class="lineno"> 3329</span>&#160;}</div>
<div class="line"><a name="l03330"></a><span class="lineno"> 3330</span>&#160;</div>
<div class="line"><a name="l03331"></a><span class="lineno"> 3331</span>&#160;<span class="comment">// isdead() returns TRUE if the tetrahedron or subface has been dealloced.</span></div>
<div class="line"><a name="l03332"></a><span class="lineno"> 3332</span>&#160;</div>
<div class="line"><a name="l03333"></a><span class="lineno"> 3333</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::isdead(triface* t) {</div>
<div class="line"><a name="l03334"></a><span class="lineno"> 3334</span>&#160;  <span class="keywordflow">if</span> (t-&gt;tet == (tetrahedron *) NULL) <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l03335"></a><span class="lineno"> 3335</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">return</span> t-&gt;tet[4] == (tetrahedron) NULL;</div>
<div class="line"><a name="l03336"></a><span class="lineno"> 3336</span>&#160;}</div>
<div class="line"><a name="l03337"></a><span class="lineno"> 3337</span>&#160;</div>
<div class="line"><a name="l03338"></a><span class="lineno"> 3338</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::isdead(face* s) {</div>
<div class="line"><a name="l03339"></a><span class="lineno"> 3339</span>&#160;  <span class="keywordflow">if</span> (s-&gt;sh == (shellface *) NULL) <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l03340"></a><span class="lineno"> 3340</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">return</span> s-&gt;sh[3] == (shellface) NULL;</div>
<div class="line"><a name="l03341"></a><span class="lineno"> 3341</span>&#160;}</div>
<div class="line"><a name="l03342"></a><span class="lineno"> 3342</span>&#160;</div>
<div class="line"><a name="l03343"></a><span class="lineno"> 3343</span>&#160;<span class="comment">// isfacehaspoint() returns TRUE if the &#39;testpoint&#39; is one of the vertices</span></div>
<div class="line"><a name="l03344"></a><span class="lineno"> 3344</span>&#160;<span class="comment">//   of the tetface &#39;t&#39; subface &#39;s&#39;.</span></div>
<div class="line"><a name="l03345"></a><span class="lineno"> 3345</span>&#160;</div>
<div class="line"><a name="l03346"></a><span class="lineno"> 3346</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::isfacehaspoint(triface* t, point testpoint) {</div>
<div class="line"><a name="l03347"></a><span class="lineno"> 3347</span>&#160;  <span class="keywordflow">return</span> ((org(*t) == testpoint) || (dest(*t) == testpoint) ||</div>
<div class="line"><a name="l03348"></a><span class="lineno"> 3348</span>&#160;          (apex(*t) == testpoint));</div>
<div class="line"><a name="l03349"></a><span class="lineno"> 3349</span>&#160;}</div>
<div class="line"><a name="l03350"></a><span class="lineno"> 3350</span>&#160;</div>
<div class="line"><a name="l03351"></a><span class="lineno"> 3351</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::isfacehaspoint(face* s, point testpoint) {</div>
<div class="line"><a name="l03352"></a><span class="lineno"> 3352</span>&#160;  <span class="keywordflow">return</span> (s-&gt;sh[3] == (shellface) testpoint) || </div>
<div class="line"><a name="l03353"></a><span class="lineno"> 3353</span>&#160;         (s-&gt;sh[4] == (shellface) testpoint) ||</div>
<div class="line"><a name="l03354"></a><span class="lineno"> 3354</span>&#160;         (s-&gt;sh[5] == (shellface) testpoint);</div>
<div class="line"><a name="l03355"></a><span class="lineno"> 3355</span>&#160;}</div>
<div class="line"><a name="l03356"></a><span class="lineno"> 3356</span>&#160;</div>
<div class="line"><a name="l03357"></a><span class="lineno"> 3357</span>&#160;<span class="comment">// isfacehasedge() returns TRUE if the edge (given by its two endpoints) is</span></div>
<div class="line"><a name="l03358"></a><span class="lineno"> 3358</span>&#160;<span class="comment">//   one of the three edges of the subface &#39;s&#39;.</span></div>
<div class="line"><a name="l03359"></a><span class="lineno"> 3359</span>&#160;</div>
<div class="line"><a name="l03360"></a><span class="lineno"> 3360</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::isfacehasedge(face* s, point tend1, point tend2) {</div>
<div class="line"><a name="l03361"></a><span class="lineno"> 3361</span>&#160;  <span class="keywordflow">return</span> (isfacehaspoint(s, tend1) &amp;&amp; isfacehaspoint(s, tend2));</div>
<div class="line"><a name="l03362"></a><span class="lineno"> 3362</span>&#160;}</div>
<div class="line"><a name="l03363"></a><span class="lineno"> 3363</span>&#160;</div>
<div class="line"><a name="l03364"></a><span class="lineno"> 3364</span>&#160;<span class="comment">// issymexist() returns TRUE if the adjoining tetrahedron is not &#39;duumytet&#39;.</span></div>
<div class="line"><a name="l03365"></a><span class="lineno"> 3365</span>&#160;</div>
<div class="line"><a name="l03366"></a><span class="lineno"> 3366</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> tetgenmesh::issymexist(triface* t) {</div>
<div class="line"><a name="l03367"></a><span class="lineno"> 3367</span>&#160;  tetrahedron *ptr = (tetrahedron *) </div>
<div class="line"><a name="l03368"></a><span class="lineno"> 3368</span>&#160;    ((<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)(t-&gt;tet[t-&gt;loc]) &amp; ~(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)7l);</div>
<div class="line"><a name="l03369"></a><span class="lineno"> 3369</span>&#160;  <span class="keywordflow">return</span> ptr != dummytet;</div>
<div class="line"><a name="l03370"></a><span class="lineno"> 3370</span>&#160;}</div>
<div class="line"><a name="l03371"></a><span class="lineno"> 3371</span>&#160;</div>
<div class="line"><a name="l03372"></a><span class="lineno"> 3372</span>&#160;<span class="comment">// dot() returns the dot product: v1 dot v2.</span></div>
<div class="line"><a name="l03373"></a><span class="lineno"> 3373</span>&#160;</div>
<div class="line"><a name="l03374"></a><span class="lineno"> 3374</span>&#160;<span class="keyword">inline</span> REAL tetgenmesh::dot(REAL* v1, REAL* v2) </div>
<div class="line"><a name="l03375"></a><span class="lineno"> 3375</span>&#160;{</div>
<div class="line"><a name="l03376"></a><span class="lineno"> 3376</span>&#160;  <span class="keywordflow">return</span> v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];</div>
<div class="line"><a name="l03377"></a><span class="lineno"> 3377</span>&#160;}</div>
<div class="line"><a name="l03378"></a><span class="lineno"> 3378</span>&#160;</div>
<div class="line"><a name="l03379"></a><span class="lineno"> 3379</span>&#160;<span class="comment">// cross() computes the cross product: n = v1 cross v2.</span></div>
<div class="line"><a name="l03380"></a><span class="lineno"> 3380</span>&#160;</div>
<div class="line"><a name="l03381"></a><span class="lineno"> 3381</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> tetgenmesh::cross(REAL* v1, REAL* v2, REAL* n) </div>
<div class="line"><a name="l03382"></a><span class="lineno"> 3382</span>&#160;{</div>
<div class="line"><a name="l03383"></a><span class="lineno"> 3383</span>&#160;  n[0] =   v1[1] * v2[2] - v2[1] * v1[2];</div>
<div class="line"><a name="l03384"></a><span class="lineno"> 3384</span>&#160;  n[1] = -(v1[0] * v2[2] - v2[0] * v1[2]);</div>
<div class="line"><a name="l03385"></a><span class="lineno"> 3385</span>&#160;  n[2] =   v1[0] * v2[1] - v2[0] * v1[1];</div>
<div class="line"><a name="l03386"></a><span class="lineno"> 3386</span>&#160;}</div>
<div class="line"><a name="l03387"></a><span class="lineno"> 3387</span>&#160;</div>
<div class="line"><a name="l03388"></a><span class="lineno"> 3388</span>&#160;<span class="comment">// distance() computs the Euclidean distance between two points.</span></div>
<div class="line"><a name="l03389"></a><span class="lineno"> 3389</span>&#160;<span class="keyword">inline</span> REAL tetgenmesh::distance(REAL* p1, REAL* p2)</div>
<div class="line"><a name="l03390"></a><span class="lineno"> 3390</span>&#160;{</div>
<div class="line"><a name="l03391"></a><span class="lineno"> 3391</span>&#160;  <span class="keywordflow">return</span> sqrt((p2[0] - p1[0]) * (p2[0] - p1[0]) +</div>
<div class="line"><a name="l03392"></a><span class="lineno"> 3392</span>&#160;              (p2[1] - p1[1]) * (p2[1] - p1[1]) +</div>
<div class="line"><a name="l03393"></a><span class="lineno"> 3393</span>&#160;              (p2[2] - p1[2]) * (p2[2] - p1[2]));</div>
<div class="line"><a name="l03394"></a><span class="lineno"> 3394</span>&#160;}</div>
<div class="line"><a name="l03395"></a><span class="lineno"> 3395</span>&#160;</div>
<div class="line"><a name="l03396"></a><span class="lineno"> 3396</span>&#160;<span class="comment">// Linear algebra operators.</span></div>
<div class="line"><a name="l03397"></a><span class="lineno"> 3397</span>&#160;</div>
<div class="line"><a name="l03398"></a><span class="lineno"> 3398</span>&#160;<span class="preprocessor">#define NORM2(x, y, z) ((x) * (x) + (y) * (y) + (z) * (z))</span></div>
<div class="line"><a name="l03399"></a><span class="lineno"> 3399</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03400"></a><span class="lineno"> 3400</span>&#160;<span class="preprocessor">#define DIST(p1, p2) \</span></div>
<div class="line"><a name="l03401"></a><span class="lineno"> 3401</span>&#160;<span class="preprocessor">  sqrt(NORM2((p2)[0] - (p1)[0], (p2)[1] - (p1)[1], (p2)[2] - (p1)[2]))</span></div>
<div class="line"><a name="l03402"></a><span class="lineno"> 3402</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03403"></a><span class="lineno"> 3403</span>&#160;<span class="preprocessor">#define DOT(v1, v2) \</span></div>
<div class="line"><a name="l03404"></a><span class="lineno"> 3404</span>&#160;<span class="preprocessor">  ((v1)[0] * (v2)[0] + (v1)[1] * (v2)[1] + (v1)[2] * (v2)[2])</span></div>
<div class="line"><a name="l03405"></a><span class="lineno"> 3405</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03406"></a><span class="lineno"> 3406</span>&#160;<span class="preprocessor">#define CROSS(v1, v2, n) \</span></div>
<div class="line"><a name="l03407"></a><span class="lineno"> 3407</span>&#160;<span class="preprocessor">  (n)[0] =   (v1)[1] * (v2)[2] - (v2)[1] * (v1)[2];\</span></div>
<div class="line"><a name="l03408"></a><span class="lineno"> 3408</span>&#160;<span class="preprocessor">  (n)[1] = -((v1)[0] * (v2)[2] - (v2)[0] * (v1)[2]);\</span></div>
<div class="line"><a name="l03409"></a><span class="lineno"> 3409</span>&#160;<span class="preprocessor">  (n)[2] =   (v1)[0] * (v2)[1] - (v2)[0] * (v1)[1]</span></div>
<div class="line"><a name="l03410"></a><span class="lineno"> 3410</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03411"></a><span class="lineno"> 3411</span>&#160;<span class="preprocessor">#define SETVECTOR3(V, a0, a1, a2) (V)[0] = (a0); (V)[1] = (a1); (V)[2] = (a2)</span></div>
<div class="line"><a name="l03412"></a><span class="lineno"> 3412</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03413"></a><span class="lineno"> 3413</span>&#160;<span class="preprocessor">#define SWAP2(a0, a1, tmp) (tmp) = (a0); (a0) = (a1); (a1) = (tmp)</span></div>
<div class="line"><a name="l03414"></a><span class="lineno"> 3414</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l03416"></a><span class="lineno"> 3416</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l03417"></a><span class="lineno"> 3417</span>&#160;<span class="comment">// Two inline functions used in read/write VTK files.                        //</span></div>
<div class="line"><a name="l03418"></a><span class="lineno"> 3418</span>&#160;<span class="comment">//                                                                           //</span></div>
<div class="line"><a name="l03420"></a><span class="lineno"> 3420</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l03421"></a><span class="lineno"> 3421</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> swapBytes(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* var, <span class="keywordtype">int</span> size)</div>
<div class="line"><a name="l03422"></a><span class="lineno"> 3422</span>&#160;{</div>
<div class="line"><a name="l03423"></a><span class="lineno"> 3423</span>&#160;  <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l03424"></a><span class="lineno"> 3424</span>&#160;  <span class="keywordtype">int</span> j = size - 1;</div>
<div class="line"><a name="l03425"></a><span class="lineno"> 3425</span>&#160;  <span class="keywordtype">char</span> c;</div>
<div class="line"><a name="l03426"></a><span class="lineno"> 3426</span>&#160;</div>
<div class="line"><a name="l03427"></a><span class="lineno"> 3427</span>&#160;  <span class="keywordflow">while</span> (i &lt; j) {</div>
<div class="line"><a name="l03428"></a><span class="lineno"> 3428</span>&#160;    c = var[i]; var[i] = var[j]; var[j] = c;</div>
<div class="line"><a name="l03429"></a><span class="lineno"> 3429</span>&#160;    i++, j--;</div>
<div class="line"><a name="l03430"></a><span class="lineno"> 3430</span>&#160;  }</div>
<div class="line"><a name="l03431"></a><span class="lineno"> 3431</span>&#160;}</div>
<div class="line"><a name="l03432"></a><span class="lineno"> 3432</span>&#160;</div>
<div class="line"><a name="l03433"></a><span class="lineno"> 3433</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> testIsBigEndian()</div>
<div class="line"><a name="l03434"></a><span class="lineno"> 3434</span>&#160;{</div>
<div class="line"><a name="l03435"></a><span class="lineno"> 3435</span>&#160;  <span class="keywordtype">short</span> word = 0x4321;</div>
<div class="line"><a name="l03436"></a><span class="lineno"> 3436</span>&#160;  <span class="keywordflow">if</span>((*(<span class="keywordtype">char</span> *)&amp; word) != 0x21)</div>
<div class="line"><a name="l03437"></a><span class="lineno"> 3437</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l03438"></a><span class="lineno"> 3438</span>&#160;  <span class="keywordflow">else</span> </div>
<div class="line"><a name="l03439"></a><span class="lineno"> 3439</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l03440"></a><span class="lineno"> 3440</span>&#160;}</div>
<div class="line"><a name="l03441"></a><span class="lineno"> 3441</span>&#160;</div>
<div class="line"><a name="l03442"></a><span class="lineno"> 3442</span>&#160;<span class="preprocessor">#endif // #ifndef tetgenH</span></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Erzeugt am Sam Feb 8 2014 19:38:07 für Simple Analyzer von &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.4
</small></address>
</body>
</html>
